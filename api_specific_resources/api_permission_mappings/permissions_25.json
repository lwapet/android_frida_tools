{
    "<android.hardware.location.ActivityRecognitionHardware: boolean disableActivityEvent(java.lang.String,int)>": [
        "android.permission.LOCATION_HARDWARE"
    ],
    "<android.hardware.location.ActivityRecognitionHardware: boolean enableActivityEvent(java.lang.String,int,long)>": [
        "android.permission.LOCATION_HARDWARE"
    ],
    "<android.hardware.location.ActivityRecognitionHardware: boolean flush()>": [
        "android.permission.LOCATION_HARDWARE"
    ],
    "<android.hardware.location.ActivityRecognitionHardware: java.lang.String[] getSupportedActivities()>": [
        "android.permission.LOCATION_HARDWARE"
    ],
    "<android.hardware.location.ActivityRecognitionHardware: boolean isActivitySupported(java.lang.String)>": [
        "android.permission.LOCATION_HARDWARE"
    ],
    "<android.hardware.location.ActivityRecognitionHardware: boolean registerSink(android.hardware.location.IActivityRecognitionHardwareSink)>": [
        "android.permission.LOCATION_HARDWARE"
    ],
    "<android.hardware.location.ActivityRecognitionHardware: boolean unregisterSink(android.hardware.location.IActivityRecognitionHardwareSink)>": [
        "android.permission.LOCATION_HARDWARE"
    ],
    "<android.hardware.location.ContextHubService: int[] findNanoAppOnHub(int,android.hardware.location.NanoAppFilter)>": [
        "android.permission.LOCATION_HARDWARE"
    ],
    "<android.hardware.location.ContextHubService: int[] getContextHubHandles()>": [
        "android.permission.LOCATION_HARDWARE"
    ],
    "<android.hardware.location.ContextHubService: android.hardware.location.ContextHubInfo getContextHubInfo(int)>": [
        "android.permission.LOCATION_HARDWARE"
    ],
    "<android.hardware.location.ContextHubService: android.hardware.location.NanoAppInstanceInfo getNanoAppInstanceInfo(int)>": [
        "android.permission.LOCATION_HARDWARE"
    ],
    "<android.hardware.location.ContextHubService: int loadNanoApp(int,android.hardware.location.NanoApp)>": [
        "android.permission.LOCATION_HARDWARE"
    ],
    "<android.hardware.location.ContextHubService: int registerCallback(android.hardware.location.IContextHubCallback)>": [
        "android.permission.LOCATION_HARDWARE"
    ],
    "<android.hardware.location.ContextHubService: int sendMessage(int,int,android.hardware.location.ContextHubMessage)>": [
        "android.permission.LOCATION_HARDWARE"
    ],
    "<android.hardware.location.ContextHubService: int unloadNanoApp(int)>": [
        "android.permission.LOCATION_HARDWARE"
    ],
    "<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: boolean connect(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: boolean disconnect(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: java.util.List getConnectedDevices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: int getConnectionState(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: java.util.List getDevicesMatchingConnectionStates([int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: int getPriority(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.a2dpsink.A2dpSinkService$BluetoothA2dpSinkBinder: boolean connect(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.a2dpsink.A2dpSinkService$BluetoothA2dpSinkBinder: boolean disconnect(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.a2dpsink.A2dpSinkService$BluetoothA2dpSinkBinder: android.bluetooth.BluetoothAudioConfig getAudioConfig(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.a2dpsink.A2dpSinkService$BluetoothA2dpSinkBinder: java.util.List getConnectedDevices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.a2dpsink.A2dpSinkService$BluetoothA2dpSinkBinder: int getConnectionState(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.a2dpsink.A2dpSinkService$BluetoothA2dpSinkBinder: java.util.List getDevicesMatchingConnectionStates([int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.a2dpsink.A2dpSinkService$BluetoothA2dpSinkBinder: int getPriority(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.a2dpsink.A2dpSinkService$BluetoothA2dpSinkBinder: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.a2dpsink.A2dpSinkService$BluetoothA2dpSinkBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.avrcp.AvrcpControllerService$BluetoothAvrcpControllerBinder: java.util.List getConnectedDevices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.avrcp.AvrcpControllerService$BluetoothAvrcpControllerBinder: int getConnectionState(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.avrcp.AvrcpControllerService$BluetoothAvrcpControllerBinder: java.util.List getDevicesMatchingConnectionStates([int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.avrcp.AvrcpControllerService$BluetoothAvrcpControllerBinder: android.media.MediaMetadata getMetadata(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.avrcp.AvrcpControllerService$BluetoothAvrcpControllerBinder: android.media.session.PlaybackState getPlaybackState(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.avrcp.AvrcpControllerService$BluetoothAvrcpControllerBinder: android.bluetooth.BluetoothAvrcpPlayerSettings getPlayerSettings(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.avrcp.AvrcpControllerService$BluetoothAvrcpControllerBinder: void sendGroupNavigationCmd(android.bluetooth.BluetoothDevice,int,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.avrcp.AvrcpControllerService$BluetoothAvrcpControllerBinder: void sendPassThroughCmd(android.bluetooth.BluetoothDevice,int,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.avrcp.AvrcpControllerService$BluetoothAvrcpControllerBinder: boolean setPlayerApplicationSetting(android.bluetooth.BluetoothAvrcpPlayerSettings)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean cancelBondProcess(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean cancelDiscovery()>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean configHciSnoopLog(boolean)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelFileDescriptor connectSocket(android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid,int,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean createBond(android.bluetooth.BluetoothDevice,int)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN",
        "android.permission.BLUETOOTH_PRIVILEGED"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean createBondOutOfBand(android.bluetooth.BluetoothDevice,int,android.bluetooth.OobData)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN",
        "android.permission.BLUETOOTH_PRIVILEGED"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean disable()>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean enable()>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean enableNoAutoConnect()>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean factoryReset()>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean fetchRemoteUuids(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getAdapterConnectionState()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getAddress()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getBondState(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.bluetooth.BluetoothDevice[] getBondedDevices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getConnectionState(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getDiscoverableTimeout()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getMessageAccessPermission(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getName()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getPhonebookAccessPermission(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getProfileConnectionState(int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getRemoteClass(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getRemoteType(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getScanMode()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getSimAccessPermission(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getState()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelUuid[] getUuids()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean isActivityAndEnergyReportingSupported()>": [
        "android.permission.BLUETOOTH_PRIVILEGED"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean isDiscovering()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean isEnabled()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean isMultiAdvertisementSupported()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean isOffloadedFilteringSupported()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean isOffloadedScanBatchingSupported()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean removeBond(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN",
        "android.permission.BLUETOOTH_PRIVILEGED"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.bluetooth.BluetoothActivityEnergyInfo reportActivityInfo()>": [
        "android.permission.BLUETOOTH_PRIVILEGED"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: void requestActivityInfo(android.os.ResultReceiver)>": [
        "android.permission.BLUETOOTH_PRIVILEGED"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean sdpSearch(android.bluetooth.BluetoothDevice,android.os.ParcelUuid)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setDiscoverableTimeout(int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setMessageAccessPermission(android.bluetooth.BluetoothDevice,int)>": [
        "android.permission.BLUETOOTH_PRIVILEGED"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setName(java.lang.String)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setPairingConfirmation(android.bluetooth.BluetoothDevice,boolean)>": [
        "android.permission.BLUETOOTH_PRIVILEGED"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setPasskey(android.bluetooth.BluetoothDevice,boolean,int,[byte)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setPhonebookAccessPermission(android.bluetooth.BluetoothDevice,int)>": [
        "android.permission.BLUETOOTH_PRIVILEGED"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setPin(android.bluetooth.BluetoothDevice,boolean,int,[byte)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setScanMode(int,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setSimAccessPermission(android.bluetooth.BluetoothDevice,int)>": [
        "android.permission.BLUETOOTH_PRIVILEGED"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean startDiscovery()>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void addCharacteristic(int,android.os.ParcelUuid,int,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void addDescriptor(int,android.os.ParcelUuid,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void addIncludedService(int,int,int,android.os.ParcelUuid)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void beginReliableWrite(int,java.lang.String)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void beginServiceDeclaration(int,int,int,int,android.os.ParcelUuid,boolean)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void clearServices(int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void clientConnect(int,java.lang.String,boolean,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void clientDisconnect(int,java.lang.String)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void configureMTU(int,java.lang.String,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void connectionParameterUpdate(int,java.lang.String,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void disconnectAll()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void discoverServices(int,java.lang.String)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void endReliableWrite(int,java.lang.String,boolean)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void endServiceDeclaration(int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: java.util.List getDevicesMatchingConnectionStates([int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: int numHwTrackFiltersAvailable()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void readCharacteristic(int,java.lang.String,int,int)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_PRIVILEGED"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void readDescriptor(int,java.lang.String,int,int)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_PRIVILEGED"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void readRemoteRssi(int,java.lang.String)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void refreshDevice(int,java.lang.String)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void registerClient(android.os.ParcelUuid,android.bluetooth.IBluetoothGattCallback)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void registerForNotification(int,java.lang.String,int,boolean)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_PRIVILEGED"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void registerServer(android.os.ParcelUuid,android.bluetooth.IBluetoothGattServerCallback)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void removeService(int,int,int,android.os.ParcelUuid)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void sendNotification(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,boolean,[byte)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void sendResponse(int,java.lang.String,int,int,int,[byte)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void serverConnect(int,java.lang.String,boolean,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void serverDisconnect(int,java.lang.String)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void startMultiAdvertising(int,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseSettings)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void startScan(int,boolean,android.bluetooth.le.ScanSettings,java.util.List,android.os.WorkSource,java.util.List,java.lang.String)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION",
        "android.permission.BLUETOOTH_ADMIN",
        "android.permission.BLUETOOTH_PRIVILEGED",
        "android.permission.PEERS_MAC_ADDRESS",
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void stopMultiAdvertising(int)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void stopScan(int,boolean)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void unregAll()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void unregisterClient(int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void unregisterServer(int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void writeCharacteristic(int,java.lang.String,int,int,int,[byte)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_PRIVILEGED"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void writeDescriptor(int,java.lang.String,int,int,int,[byte)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_PRIVILEGED"
    ],
    "<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: java.util.List getConnectedHealthDevices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: java.util.List getHealthDevicesMatchingConnectionStates([int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: void bindResponse(int,boolean)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: void clccResponse(int,int,int,int,boolean,java.lang.String,int)>": [
        "android.permission.BLUETOOTH_ADMIN",
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean connect(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean connectAudio()>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean disableWBS()>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean disconnect(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean disconnectAudio()>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean enableWBS()>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: java.util.List getConnectedDevices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: int getConnectionState(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: java.util.List getDevicesMatchingConnectionStates([int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: int getPriority(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean isAudioConnected(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean isAudioOn()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: void phoneStateChanged(int,int,int,java.lang.String,int)>": [
        "android.permission.BLUETOOTH_ADMIN",
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: boolean acceptCall(android.bluetooth.BluetoothDevice,int)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: boolean connect(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: boolean connectAudio()>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: boolean dial(android.bluetooth.BluetoothDevice,java.lang.String)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: boolean dialMemory(android.bluetooth.BluetoothDevice,int)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: boolean disconnect(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: boolean disconnectAudio()>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: boolean enterPrivateMode(android.bluetooth.BluetoothDevice,int)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: boolean explicitCallTransfer(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: java.util.List getConnectedDevices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: int getConnectionState(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: android.os.Bundle getCurrentAgEvents(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: android.os.Bundle getCurrentAgFeatures(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: java.util.List getCurrentCalls(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: java.util.List getDevicesMatchingConnectionStates([int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: boolean getLastVoiceTagNumber(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: int getPriority(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: boolean holdCall(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: boolean redial(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: boolean rejectCall(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: boolean sendDTMF(android.bluetooth.BluetoothDevice,byte)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfpclient.HeadsetClientService$BluetoothHeadsetClientBinder: boolean terminateCall(android.bluetooth.BluetoothDevice,int)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean connect(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean disconnect(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: java.util.List getConnectedDevices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: java.util.List getDevicesMatchingConnectionStates([int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: int getPriority(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean getProtocolMode(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean virtualUnplug(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: boolean connect(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: boolean disconnect(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: android.bluetooth.BluetoothDevice getClient()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: java.util.List getConnectedDevices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: int getConnectionState(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: java.util.List getDevicesMatchingConnectionStates([int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: int getPriority(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: int getState()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: boolean isConnected(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.map.BluetoothMapService$BluetoothMapBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.pan.PanService$BluetoothPanBinder: boolean connect(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.pan.PanService$BluetoothPanBinder: boolean disconnect(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.pan.PanService$BluetoothPanBinder: java.util.List getConnectedDevices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.pan.PanService$BluetoothPanBinder: java.util.List getDevicesMatchingConnectionStates([int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.pan.PanService$BluetoothPanBinder: void setBluetoothTethering(boolean)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN",
        "android.permission.TETHER_PRIVILEGED"
    ],
    "<com.android.bluetooth.pbapclient.PbapClientService$BluetoothPbapClientBinder: boolean connect(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.pbapclient.PbapClientService$BluetoothPbapClientBinder: boolean disconnect(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.pbapclient.PbapClientService$BluetoothPbapClientBinder: java.util.List getConnectedDevices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.pbapclient.PbapClientService$BluetoothPbapClientBinder: int getConnectionState(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.pbapclient.PbapClientService$BluetoothPbapClientBinder: java.util.List getDevicesMatchingConnectionStates([int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.pbapclient.PbapClientService$BluetoothPbapClientBinder: int getPriority(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.pbapclient.PbapClientService$BluetoothPbapClientBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.sap.SapService$SapBinder: boolean connect(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.sap.SapService$SapBinder: boolean disconnect(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.sap.SapService$SapBinder: android.bluetooth.BluetoothDevice getClient()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.sap.SapService$SapBinder: java.util.List getConnectedDevices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.sap.SapService$SapBinder: int getConnectionState(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.sap.SapService$SapBinder: java.util.List getDevicesMatchingConnectionStates([int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.sap.SapService$SapBinder: int getPriority(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.sap.SapService$SapBinder: int getState()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.sap.SapService$SapBinder: boolean isConnected(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.sap.SapService$SapBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.car.CarRadioService: boolean setPreset(android.car.hardware.radio.CarRadioPreset)>": [
        "android.car.permission.CAR_RADIO"
    ],
    "<com.android.car.ICarImpl: android.os.IBinder getCarService(java.lang.String)>": [
        "android.car.permission.CAR_CAMERA",
        "android.car.permission.CAR_HVAC",
        "android.car.permission.CAR_MOCK_VEHICLE_HAL",
        "android.car.permission.CAR_NAVIGATION_MANAGER",
        "android.car.permission.CAR_PROJECTION",
        "android.car.permission.CAR_RADIO"
    ],
    "<com.android.car.pm.CarPackageManagerService: void setAppBlockingPolicy(java.lang.String,android.car.content.pm.CarAppBlockingPolicy,int)>": [
        "android.car.permission.CONTROL_APP_BLOCKING"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getCompleteVoiceMailNumber()>": [
        "android.permission.CALL_PRIVILEGED"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getCompleteVoiceMailNumberForSubscriber(int)>": [
        "android.permission.CALL_PRIVILEGED"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getDeviceId(java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getDeviceIdForPhone(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getDeviceSvn(java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getDeviceSvnUsingSubId(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getGroupIdLevel1(java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getGroupIdLevel1ForSubscriber(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getIccSerialNumber(java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getIccSerialNumberForSubscriber(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getIccSimChallengeResponse(int,int,int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getImeiForSubscriber(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getIsimChallengeResponse(java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getIsimDomain()>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getIsimImpi()>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String[] getIsimImpu()>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getIsimIst()>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String[] getIsimPcscf()>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getLine1AlphaTag(java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getLine1AlphaTagForSubscriber(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getLine1Number(java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getLine1NumberForSubscriber(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getMsisdn(java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getMsisdnForSubscriber(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getNaiForSubscriber(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getSubscriberId(java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getSubscriberIdForSubscriber(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getVoiceMailAlphaTag(java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getVoiceMailAlphaTagForSubscriber(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getVoiceMailNumber(java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfoController: java.lang.String getVoiceMailNumberForSubscriber(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.SubscriptionController: int addSubInfoRecord(java.lang.String,int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.internal.telephony.SubscriptionController: void clearDefaultsForInactiveSubIds()>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.internal.telephony.SubscriptionController: int clearSubInfo()>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.internal.telephony.SubscriptionController: int getActiveSubInfoCount(java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.SubscriptionController: android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.SubscriptionController: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForIccId(java.lang.String,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.SubscriptionController: android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.SubscriptionController: java.util.List getActiveSubscriptionInfoList(java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.SubscriptionController: int getAllSubInfoCount(java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.SubscriptionController: java.util.List getAllSubInfoList(java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.SubscriptionController: java.lang.String getSubscriptionProperty(int,java.lang.String,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.SubscriptionController: int setDataRoaming(int,int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.internal.telephony.SubscriptionController: void setDefaultDataSubId(int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.internal.telephony.SubscriptionController: void setDefaultSmsSubId(int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.internal.telephony.SubscriptionController: void setDefaultVoiceSubId(int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.internal.telephony.SubscriptionController: int setDisplayName(java.lang.String,int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.internal.telephony.SubscriptionController: int setDisplayNameUsingSrc(java.lang.String,int,long)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.internal.telephony.SubscriptionController: int setDisplayNumber(java.lang.String,int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.internal.telephony.SubscriptionController: int setIconTint(int,int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.internal.telephony.SubscriptionController: void setSubscriptionProperty(int,java.lang.String,java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.internal.telephony.UiccPhoneBookController: java.util.List getAdnRecordsInEf(int)>": [
        "android.permission.READ_CONTACTS"
    ],
    "<com.android.internal.telephony.UiccPhoneBookController: java.util.List getAdnRecordsInEfForSubscriber(int,int)>": [
        "android.permission.READ_CONTACTS"
    ],
    "<com.android.internal.telephony.UiccPhoneBookController: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)>": [
        "android.permission.WRITE_CONTACTS"
    ],
    "<com.android.internal.telephony.UiccPhoneBookController: boolean updateAdnRecordsInEfByIndexForSubscriber(int,int,java.lang.String,java.lang.String,int,java.lang.String)>": [
        "android.permission.WRITE_CONTACTS"
    ],
    "<com.android.internal.telephony.UiccPhoneBookController: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>": [
        "android.permission.WRITE_CONTACTS"
    ],
    "<com.android.internal.telephony.UiccPhoneBookController: boolean updateAdnRecordsInEfBySearchForSubscriber(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>": [
        "android.permission.WRITE_CONTACTS"
    ],
    "<com.android.internal.telephony.UiccSmsController: boolean copyMessageToIccEfForSubscriber(int,java.lang.String,int,[byte,[byte)>": [
        "android.permission.RECEIVE_SMS",
        "android.permission.SEND_SMS"
    ],
    "<com.android.internal.telephony.UiccSmsController: boolean disableCellBroadcastForSubscriber(int,int,int)>": [
        "android.permission.RECEIVE_SMS"
    ],
    "<com.android.internal.telephony.UiccSmsController: boolean disableCellBroadcastRangeForSubscriber(int,int,int,int)>": [
        "android.permission.RECEIVE_SMS"
    ],
    "<com.android.internal.telephony.UiccSmsController: boolean enableCellBroadcastForSubscriber(int,int,int)>": [
        "android.permission.RECEIVE_SMS"
    ],
    "<com.android.internal.telephony.UiccSmsController: boolean enableCellBroadcastRangeForSubscriber(int,int,int,int)>": [
        "android.permission.RECEIVE_SMS"
    ],
    "<com.android.internal.telephony.UiccSmsController: java.util.List getAllMessagesFromIccEfForSubscriber(int,java.lang.String)>": [
        "android.permission.RECEIVE_SMS"
    ],
    "<com.android.internal.telephony.UiccSmsController: void sendDataForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,int,[byte,android.app.PendingIntent,android.app.PendingIntent)>": [
        "android.permission.READ_EXTERNAL_STORAGE",
        "android.permission.SEND_SMS",
        "android.permission.SEND_SMS_NO_CONFIRMATION"
    ],
    "<com.android.internal.telephony.UiccSmsController: void sendDataForSubscriberWithSelfPermissions(int,java.lang.String,java.lang.String,java.lang.String,int,[byte,android.app.PendingIntent,android.app.PendingIntent)>": [
        "android.permission.READ_EXTERNAL_STORAGE",
        "android.permission.SEND_SMS",
        "android.permission.SEND_SMS_NO_CONFIRMATION"
    ],
    "<com.android.internal.telephony.UiccSmsController: void sendMultipartTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean)>": [
        "android.permission.READ_EXTERNAL_STORAGE",
        "android.permission.SEND_SMS",
        "android.permission.SEND_SMS_NO_CONFIRMATION"
    ],
    "<com.android.internal.telephony.UiccSmsController: void sendStoredMultipartText(int,java.lang.String,android.net.Uri,java.lang.String,java.util.List,java.util.List)>": [
        "android.permission.READ_EXTERNAL_STORAGE",
        "android.permission.SEND_SMS",
        "android.permission.SEND_SMS_NO_CONFIRMATION"
    ],
    "<com.android.internal.telephony.UiccSmsController: void sendStoredText(int,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>": [
        "android.permission.READ_EXTERNAL_STORAGE",
        "android.permission.SEND_SMS",
        "android.permission.SEND_SMS_NO_CONFIRMATION"
    ],
    "<com.android.internal.telephony.UiccSmsController: void sendTextForSubscriber(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean)>": [
        "android.permission.READ_EXTERNAL_STORAGE",
        "android.permission.SEND_SMS",
        "android.permission.SEND_SMS_NO_CONFIRMATION"
    ],
    "<com.android.internal.telephony.UiccSmsController: void sendTextForSubscriberWithSelfPermissions(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean)>": [
        "android.permission.READ_EXTERNAL_STORAGE",
        "android.permission.SEND_SMS",
        "android.permission.SEND_SMS_NO_CONFIRMATION"
    ],
    "<com.android.internal.telephony.UiccSmsController: boolean updateMessageOnIccEfForSubscriber(int,java.lang.String,int,int,[byte)>": [
        "android.permission.RECEIVE_SMS",
        "android.permission.SEND_SMS"
    ],
    "<com.android.phone.CarrierConfigLoader: android.os.PersistableBundle getConfigForSubId(int)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.CarrierConfigLoader: void notifyConfigChangedForSubId(int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.CarrierConfigLoader: void updateConfigForPhoneId(int,java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: void answerRingingCall()>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: void answerRingingCallForSubscriber(int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: void call(java.lang.String,java.lang.String)>": [
        "android.permission.CALL_PHONE"
    ],
    "<com.android.phone.PhoneInterfaceManager: void carrierActionSetMeteredApnsEnabled(int,boolean)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: void carrierActionSetRadioEnabled(int,boolean)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean disableDataConnectivity()>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: void disableLocationUpdates()>": [
        "android.permission.CONTROL_LOCATION_UPDATES"
    ],
    "<com.android.phone.PhoneInterfaceManager: void disableLocationUpdatesForSubscriber(int)>": [
        "android.permission.CONTROL_LOCATION_UPDATES"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean enableDataConnectivity()>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: void enableLocationUpdates()>": [
        "android.permission.CONTROL_LOCATION_UPDATES"
    ],
    "<com.android.phone.PhoneInterfaceManager: void enableLocationUpdatesForSubscriber(int)>": [
        "android.permission.CONTROL_LOCATION_UPDATES"
    ],
    "<com.android.phone.PhoneInterfaceManager: void enableVideoCalling(boolean)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean endCall()>": [
        "android.permission.CALL_PHONE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean endCallForSubscriber(int)>": [
        "android.permission.CALL_PHONE"
    ],
    "<com.android.phone.PhoneInterfaceManager: void factoryReset(int)>": [
        "android.permission.CONNECTIVITY_INTERNAL",
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: java.lang.String getAidForAppType(int,int)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: java.util.List getAllCellInfo(java.lang.String)>": [
        "android.permission.ACCESS_FINE_LOCATION",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.phone.PhoneInterfaceManager: java.util.List getAllowedCarriers(int)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: int getCalculatedPreferredNetworkType(java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: int getCdmaEriIconIndex(java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: int getCdmaEriIconIndexForSubscriber(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: int getCdmaEriIconMode(java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: int getCdmaEriIconModeForSubscriber(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: java.lang.String getCdmaEriText(java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: java.lang.String getCdmaEriTextForSubscriber(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: java.lang.String getCdmaMdn(int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: java.lang.String getCdmaMin(int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: java.lang.String getCdmaPrlVersion(int)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: android.os.Bundle getCellLocation(java.lang.String)>": [
        "android.permission.ACCESS_FINE_LOCATION",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.phone.PhoneInterfaceManager: com.android.internal.telephony.CellNetworkScanResult getCellNetworkScanResults(int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean getDataEnabled(int)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: int getDataNetworkType(java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: int getDataNetworkTypeForSubscriber(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: java.lang.String getDeviceId(java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: java.lang.String getDeviceSoftwareVersionForSlot(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: java.lang.String getEsn(int)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: java.lang.String getImeiForSlot(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: java.lang.String getLine1AlphaTagForDisplay(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: java.lang.String getLine1NumberForDisplay(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: int getLteOnCdmaMode(java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: int getLteOnCdmaModeForSubscriber(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: java.lang.String[] getMergedSubscriberIds(java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: java.util.List getNeighboringCellInfo(java.lang.String)>": [
        "android.permission.ACCESS_FINE_LOCATION",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.phone.PhoneInterfaceManager: int getNetworkTypeForSubscriber(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: java.lang.String[] getPcscfAddress(java.lang.String,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: int getPreferredNetworkType(int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: int getRadioAccessFamily(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: android.telephony.ServiceState getServiceStateForSubscriber(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: android.telephony.VisualVoicemailSmsFilterSettings getSystemVisualVoicemailSmsFilterSettings(java.lang.String,int)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: java.util.List getTelephonyHistograms()>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: int getTetherApnRequired()>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: int getVoiceNetworkTypeForSubscriber(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: long getVtDataUsage()>": [
        "android.permission.READ_NETWORK_USAGE_HISTORY"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean handlePinMmi(java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean handlePinMmiForSubscriber(int,java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean iccCloseLogicalChannel(int,int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: B[] iccExchangeSimIO(int,int,int,int,int,int,java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(int,java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: java.lang.String iccTransmitApduBasicChannel(int,int,int,int,int,int,java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: java.lang.String iccTransmitApduLogicalChannel(int,int,int,int,int,int,int,java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: int invokeOemRilRequestRaw([byte,[byte)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean isIdle(java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean isIdleForSubscriber(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean isOffhook(java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean isOffhookForSubscriber(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean isRadioOn(java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean isRadioOnForSubscriber(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean isRinging(java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean isRingingForSubscriber(int,java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean isVideoCallingEnabled(java.lang.String)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean isVisualVoicemailEnabled(java.lang.String,android.telecom.PhoneAccountHandle)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: java.lang.String nvReadItem(int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean nvResetConfig(int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean nvWriteCdmaPrl([byte)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean nvWriteItem(int,java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: void requestModemActivityInfo(android.os.ResultReceiver)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: java.lang.String sendEnvelopeWithStatus(int,java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: int setAllowedCarriers(int,java.util.List)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: void setDataEnabled(int,boolean)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: void setImsRegistrationState(boolean)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: void setNetworkSelectionModeAutomatic(int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean setNetworkSelectionModeManual(int,com.android.internal.telephony.OperatorInfo,boolean)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: void setPolicyDataEnabled(boolean,int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean setPreferredNetworkType(int,int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean setRadio(boolean)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean setRadioForSubscriber(int,boolean)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean setRadioPower(boolean)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: void setVisualVoicemailEnabled(java.lang.String,android.telecom.PhoneAccountHandle,boolean)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: void shutdownMobileRadios()>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean supplyPin(java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean supplyPinForSubscriber(int,java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: int[] supplyPinReportResult(java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: int[] supplyPinReportResultForSubscriber(int,java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean supplyPuk(java.lang.String,java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean supplyPukForSubscriber(int,java.lang.String,java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: int[] supplyPukReportResult(java.lang.String,java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: int[] supplyPukReportResultForSubscriber(int,java.lang.String,java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: void toggleRadioOnOff()>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: void toggleRadioOnOffForSubscriber(int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.providers.contacts.ContactsProvider2: java.lang.String getType(android.net.Uri)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.AppOpsService: int checkAudioOperation(int,int,int,java.lang.String)>": [
        "android.permission.UPDATE_APP_OPS_STATS"
    ],
    "<com.android.server.AppOpsService: int checkOperation(int,int,java.lang.String)>": [
        "android.permission.UPDATE_APP_OPS_STATS"
    ],
    "<com.android.server.AppOpsService: void finishOperation(android.os.IBinder,int,int,java.lang.String)>": [
        "android.permission.UPDATE_APP_OPS_STATS"
    ],
    "<com.android.server.AppOpsService: java.util.List getOpsForPackage(int,java.lang.String,[int)>": [
        "android.permission.GET_APP_OPS_STATS"
    ],
    "<com.android.server.AppOpsService: java.util.List getPackagesForOps([int)>": [
        "android.permission.GET_APP_OPS_STATS"
    ],
    "<com.android.server.AppOpsService: int noteOperation(int,int,java.lang.String)>": [
        "android.permission.UPDATE_APP_OPS_STATS"
    ],
    "<com.android.server.AppOpsService: void resetAllModes(int,java.lang.String)>": [
        "android.permission.UPDATE_APP_OPS_STATS"
    ],
    "<com.android.server.AppOpsService: void setAudioRestriction(int,int,int,int,[java.lang.String)>": [
        "android.permission.UPDATE_APP_OPS_STATS"
    ],
    "<com.android.server.AppOpsService: void setMode(int,int,java.lang.String,int)>": [
        "android.permission.UPDATE_APP_OPS_STATS"
    ],
    "<com.android.server.AppOpsService: void setUidMode(int,int,int)>": [
        "android.permission.UPDATE_APP_OPS_STATS"
    ],
    "<com.android.server.AppOpsService: void setUserRestriction(int,boolean,android.os.IBinder,int,[java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS",
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.MANAGE_APP_OPS_RESTRICTIONS"
    ],
    "<com.android.server.AppOpsService: int startOperation(android.os.IBinder,int,int,java.lang.String)>": [
        "android.permission.UPDATE_APP_OPS_STATS"
    ],
    "<com.android.server.BluetoothManagerService: boolean disable(boolean)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.server.BluetoothManagerService: boolean enable()>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.server.BluetoothManagerService: boolean enableNoAutoConnect()>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.server.BluetoothManagerService: java.lang.String getAddress()>": [
        "android.permission.BLUETOOTH",
        "android.permission.LOCAL_MAC_ADDRESS"
    ],
    "<com.android.server.BluetoothManagerService: java.lang.String getName()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.server.BluetoothManagerService: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.server.BluetoothManagerService: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.server.BluetoothManagerService: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.server.ConnectivityService: void factoryReset()>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.CONNECTIVITY_INTERNAL",
        "android.permission.CONTROL_VPN",
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.TETHER_PRIVILEGED"
    ],
    "<com.android.server.ConnectivityService: android.net.LinkProperties getActiveLinkProperties()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: android.net.Network getActiveNetwork()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: android.net.Network getActiveNetworkForUid(int,boolean)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfo()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfoForUid(int,boolean)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConnectivityService: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: android.net.NetworkInfo[] getAllNetworkInfo()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: android.net.NetworkState[] getAllNetworkState()>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConnectivityService: android.net.Network[] getAllNetworks()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: com.android.internal.net.VpnInfo[] getAllVpnInfo()>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConnectivityService: java.lang.String getAlwaysOnVpnPackage(int)>": [
        "android.permission.CONNECTIVITY_INTERNAL",
        "android.permission.CONTROL_VPN",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.ConnectivityService: android.net.NetworkCapabilities[] getDefaultNetworkCapabilitiesForUser(int)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: int getLastTetherError(java.lang.String)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo(int)>": [
        "android.permission.CONTROL_VPN",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.ConnectivityService: android.net.LinkProperties getLinkProperties(android.net.Network)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: android.net.LinkProperties getLinkPropertiesForType(int)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: java.lang.String getMobileProvisioningUrl()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConnectivityService: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: android.net.Network getNetworkForType(int)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: android.net.NetworkInfo getNetworkInfo(int)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: android.net.NetworkInfo getNetworkInfoForUid(android.net.Network,int,boolean)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: java.lang.String[] getTetherableBluetoothRegexs()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: java.lang.String[] getTetherableIfaces()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: java.lang.String[] getTetherableUsbRegexs()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: java.lang.String[] getTetherableWifiRegexs()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: java.lang.String[] getTetheredDhcpRanges()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConnectivityService: java.lang.String[] getTetheredIfaces()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: java.lang.String[] getTetheringErroredIfaces()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: com.android.internal.net.VpnConfig getVpnConfig(int)>": [
        "android.permission.CONTROL_VPN",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.ConnectivityService: boolean isActiveNetworkMetered()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: boolean isNetworkSupported(int)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: boolean isTetheringSupported()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities,android.os.Messenger,android.os.IBinder)>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.ACCESS_WIFI_STATE",
        "android.permission.CHANGE_NETWORK_STATE",
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConnectivityService: void pendingListenForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent)>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.ACCESS_WIFI_STATE",
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConnectivityService: android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities,android.app.PendingIntent)>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.CHANGE_NETWORK_STATE",
        "android.permission.CONNECTIVITY_INTERNAL",
        "android.permission.CONNECTIVITY_USE_RESTRICTED_NETWORKS"
    ],
    "<com.android.server.ConnectivityService: boolean prepareVpn(java.lang.String,java.lang.String,int)>": [
        "android.permission.CONTROL_VPN",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.ConnectivityService: int registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkMisc)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConnectivityService: void registerNetworkFactory(android.os.Messenger,java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConnectivityService: void reportInetCondition(int,int)>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.INTERNET"
    ],
    "<com.android.server.ConnectivityService: void reportNetworkConnectivity(android.net.Network,boolean)>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.INTERNET"
    ],
    "<com.android.server.ConnectivityService: boolean requestBandwidthUpdate(android.net.Network)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int)>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.CHANGE_NETWORK_STATE",
        "android.permission.CONNECTIVITY_INTERNAL",
        "android.permission.CONNECTIVITY_USE_RESTRICTED_NETWORKS"
    ],
    "<com.android.server.ConnectivityService: boolean requestRouteToHostAddress(int,[byte)>": [
        "android.permission.CHANGE_NETWORK_STATE",
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConnectivityService: void setAcceptUnvalidated(android.net.Network,boolean,boolean)>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConnectivityService: void setAirplaneMode(boolean)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConnectivityService: boolean setAlwaysOnVpnPackage(int,java.lang.String,boolean)>": [
        "android.permission.CONNECTIVITY_INTERNAL",
        "android.permission.CONTROL_VPN",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.ConnectivityService: void setAvoidUnvalidated(android.net.Network)>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConnectivityService: void setGlobalProxy(android.net.ProxyInfo)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConnectivityService: void setProvisioningNotificationVisible(boolean,int,java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConnectivityService: int setUsbTethering(boolean)>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.TETHER_PRIVILEGED"
    ],
    "<com.android.server.ConnectivityService: void setVpnPackageAuthorization(java.lang.String,int,boolean)>": [
        "android.permission.CONTROL_VPN",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.ConnectivityService: void startLegacyVpn(com.android.internal.net.VpnProfile)>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.CONTROL_VPN"
    ],
    "<com.android.server.ConnectivityService: void startNattKeepalive(android.net.Network,int,android.os.Messenger,android.os.IBinder,java.lang.String,int,java.lang.String)>": [
        "android.permission.PACKET_KEEPALIVE_OFFLOAD"
    ],
    "<com.android.server.ConnectivityService: void startTethering(int,android.os.ResultReceiver,boolean)>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.TETHER_PRIVILEGED"
    ],
    "<com.android.server.ConnectivityService: void stopTethering(int)>": [
        "android.permission.TETHER_PRIVILEGED"
    ],
    "<com.android.server.ConnectivityService: int tether(java.lang.String)>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.TETHER_PRIVILEGED"
    ],
    "<com.android.server.ConnectivityService: void unregisterNetworkFactory(android.os.Messenger)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConnectivityService: int untether(java.lang.String)>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.TETHER_PRIVILEGED"
    ],
    "<com.android.server.ConnectivityService: boolean updateLockdownVpn()>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConsumerIrService: int[] getCarrierFrequencies()>": [
        "android.permission.TRANSMIT_IR"
    ],
    "<com.android.server.ConsumerIrService: void transmit(java.lang.String,int,[int)>": [
        "android.permission.TRANSMIT_IR"
    ],
    "<com.android.server.DeviceIdleController$BinderService: void addPowerSaveTempWhitelistApp(java.lang.String,long,int,java.lang.String)>": [
        "android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST"
    ],
    "<com.android.server.DeviceIdleController$BinderService: long addPowerSaveTempWhitelistAppForMms(java.lang.String,int,java.lang.String)>": [
        "android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST"
    ],
    "<com.android.server.DeviceIdleController$BinderService: long addPowerSaveTempWhitelistAppForSms(java.lang.String,int,java.lang.String)>": [
        "android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST"
    ],
    "<com.android.server.DeviceIdleController$BinderService: void addPowerSaveWhitelistApp(java.lang.String)>": [
        "android.permission.DEVICE_POWER"
    ],
    "<com.android.server.DeviceIdleController$BinderService: void exitIdle(java.lang.String)>": [
        "android.permission.DEVICE_POWER"
    ],
    "<com.android.server.DeviceIdleController$BinderService: void removePowerSaveWhitelistApp(java.lang.String)>": [
        "android.permission.DEVICE_POWER"
    ],
    "<com.android.server.InputMethodManagerService: void addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: void clearLastInputMethodWindowForTransition(android.os.IBinder)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: com.android.internal.inputmethod.IInputContentUriToken createInputContentUriToken(android.os.IBinder,android.net.Uri,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: java.util.List getEnabledInputMethodList()>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: java.util.List getEnabledInputMethodSubtypeList(java.lang.String,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: java.util.List getInputMethodList()>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: void hideMySoftInput(android.os.IBinder,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: boolean notifySuggestionPicked(android.text.style.SuggestionSpan,java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: void registerSuggestionSpansForNotification([android.text.style.SuggestionSpan)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: void removeClient(com.android.internal.view.IInputMethodClient)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: void setAdditionalInputMethodSubtypes(java.lang.String,[android.view.inputmethod.InputMethodSubtype)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: void setInputMethod(android.os.IBinder,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.InputMethodManagerService: void setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.InputMethodManagerService: boolean setInputMethodEnabled(java.lang.String,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.InputMethodManagerService: boolean shouldOfferSwitchingToNextInputMethod(android.os.IBinder)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.READ_EXTERNAL_STORAGE"
    ],
    "<com.android.server.InputMethodManagerService: void showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: void showMySoftInput(android.os.IBinder,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: boolean showSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: boolean switchToLastInputMethod(android.os.IBinder)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.InputMethodManagerService: boolean switchToNextInputMethod(android.os.IBinder,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.LocationManagerService: boolean addGnssMeasurementsListener(android.location.IGnssMeasurementsListener,java.lang.String)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<com.android.server.LocationManagerService: boolean addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener,java.lang.String)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<com.android.server.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<com.android.server.LocationManagerService: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<com.android.server.LocationManagerService: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<com.android.server.LocationManagerService: boolean registerGnssStatusCallback(android.location.IGnssStatusListener,java.lang.String)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<com.android.server.LocationManagerService: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<com.android.server.LocationManagerService: void reportLocation(android.location.Location,boolean)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION",
        "android.permission.INSTALL_LOCATION_PROVIDER"
    ],
    "<com.android.server.LocationManagerService: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<com.android.server.LocationManagerService: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION",
        "android.permission.UPDATE_APP_OPS_STATS",
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.LocationManagerService: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION",
        "android.permission.ACCESS_LOCATION_EXTRA_COMMANDS"
    ],
    "<com.android.server.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse checkPassword(java.lang.String,int,com.android.internal.widget.ICheckCredentialProgressCallback)>": [
        "android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"
    ],
    "<com.android.server.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse checkPattern(java.lang.String,int,com.android.internal.widget.ICheckCredentialProgressCallback)>": [
        "android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"
    ],
    "<com.android.server.LockSettingsService: boolean checkVoldPassword(int)>": [
        "android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"
    ],
    "<com.android.server.LockSettingsService: boolean getBoolean(java.lang.String,boolean,int)>": [
        "android.permission.ACCESS_KEYGUARD_SECURE_STORAGE",
        "android.permission.READ_CONTACTS"
    ],
    "<com.android.server.LockSettingsService: long getLong(java.lang.String,long,int)>": [
        "android.permission.ACCESS_KEYGUARD_SECURE_STORAGE",
        "android.permission.READ_CONTACTS"
    ],
    "<com.android.server.LockSettingsService: boolean getSeparateProfileChallengeEnabled(int)>": [
        "android.permission.ACCESS_KEYGUARD_SECURE_STORAGE",
        "android.permission.READ_CONTACTS"
    ],
    "<com.android.server.LockSettingsService: java.lang.String getString(java.lang.String,java.lang.String,int)>": [
        "android.permission.ACCESS_KEYGUARD_SECURE_STORAGE",
        "android.permission.READ_CONTACTS"
    ],
    "<com.android.server.LockSettingsService: int getStrongAuthForUser(int)>": [
        "android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"
    ],
    "<com.android.server.LockSettingsService: void registerStrongAuthTracker(android.app.trust.IStrongAuthTracker)>": [
        "android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"
    ],
    "<com.android.server.LockSettingsService: void requireStrongAuth(int,int)>": [
        "android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"
    ],
    "<com.android.server.LockSettingsService: void resetKeyStore(int)>": [
        "android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"
    ],
    "<com.android.server.LockSettingsService: void setBoolean(java.lang.String,boolean,int)>": [
        "android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"
    ],
    "<com.android.server.LockSettingsService: void setLockPassword(java.lang.String,java.lang.String,int)>": [
        "android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"
    ],
    "<com.android.server.LockSettingsService: void setLockPattern(java.lang.String,java.lang.String,int)>": [
        "android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"
    ],
    "<com.android.server.LockSettingsService: void setLong(java.lang.String,long,int)>": [
        "android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"
    ],
    "<com.android.server.LockSettingsService: void setSeparateProfileChallengeEnabled(int,boolean,java.lang.String)>": [
        "android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"
    ],
    "<com.android.server.LockSettingsService: void setString(java.lang.String,java.lang.String,int)>": [
        "android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"
    ],
    "<com.android.server.LockSettingsService: void systemReady()>": [
        "android.permission.ACCESS_KEYGUARD_SECURE_STORAGE",
        "android.permission.READ_CONTACTS"
    ],
    "<com.android.server.LockSettingsService: void unregisterStrongAuthTracker(android.app.trust.IStrongAuthTracker)>": [
        "android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"
    ],
    "<com.android.server.LockSettingsService: void userPresent(int)>": [
        "android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"
    ],
    "<com.android.server.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse verifyPassword(java.lang.String,long,int)>": [
        "android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"
    ],
    "<com.android.server.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse verifyPattern(java.lang.String,long,int)>": [
        "android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"
    ],
    "<com.android.server.LockSettingsService: com.android.internal.widget.VerifyCredentialResponse verifyTiedProfileChallenge(java.lang.String,boolean,long,int)>": [
        "android.permission.ACCESS_KEYGUARD_SECURE_STORAGE"
    ],
    "<com.android.server.MmsServiceBroker$BinderService: void downloadMessage(int,java.lang.String,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)>": [
        "android.permission.RECEIVE_MMS"
    ],
    "<com.android.server.MmsServiceBroker$BinderService: void sendMessage(int,java.lang.String,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent)>": [
        "android.permission.SEND_SMS"
    ],
    "<com.android.server.MountService: void addUserKeyAuth(int,int,[byte,[byte)>": [
        "android.permission.STORAGE_INTERNAL"
    ],
    "<com.android.server.MountService: long benchmark(java.lang.String)>": [
        "android.permission.MOUNT_FORMAT_FILESYSTEMS"
    ],
    "<com.android.server.MountService: int changeEncryptionPassword(int,java.lang.String)>": [
        "android.permission.CRYPT_KEEPER"
    ],
    "<com.android.server.MountService: void clearPassword()>": [
        "android.permission.STORAGE_INTERNAL"
    ],
    "<com.android.server.MountService: int createSecureContainer(java.lang.String,int,java.lang.String,java.lang.String,int,boolean)>": [
        "android.permission.ASEC_CREATE"
    ],
    "<com.android.server.MountService: void createUserKey(int,int,boolean)>": [
        "android.permission.STORAGE_INTERNAL"
    ],
    "<com.android.server.MountService: int decryptStorage(java.lang.String)>": [
        "android.permission.CRYPT_KEEPER"
    ],
    "<com.android.server.MountService: int destroySecureContainer(java.lang.String,boolean)>": [
        "android.permission.ASEC_DESTROY"
    ],
    "<com.android.server.MountService: void destroyUserKey(int)>": [
        "android.permission.STORAGE_INTERNAL"
    ],
    "<com.android.server.MountService: void destroyUserStorage(java.lang.String,int,int)>": [
        "android.permission.STORAGE_INTERNAL"
    ],
    "<com.android.server.MountService: int encryptStorage(int,java.lang.String)>": [
        "android.permission.CRYPT_KEEPER"
    ],
    "<com.android.server.MountService: int finalizeSecureContainer(java.lang.String)>": [
        "android.permission.ASEC_CREATE"
    ],
    "<com.android.server.MountService: int fixPermissionsSecureContainer(java.lang.String,int,java.lang.String)>": [
        "android.permission.ASEC_CREATE"
    ],
    "<com.android.server.MountService: void fixateNewestUserKeyAuth(int)>": [
        "android.permission.STORAGE_INTERNAL"
    ],
    "<com.android.server.MountService: void forgetAllVolumes()>": [
        "android.permission.MOUNT_UNMOUNT_FILESYSTEMS"
    ],
    "<com.android.server.MountService: void forgetVolume(java.lang.String)>": [
        "android.permission.MOUNT_UNMOUNT_FILESYSTEMS"
    ],
    "<com.android.server.MountService: void format(java.lang.String)>": [
        "android.permission.MOUNT_FORMAT_FILESYSTEMS"
    ],
    "<com.android.server.MountService: int formatVolume(java.lang.String)>": [
        "android.permission.MOUNT_FORMAT_FILESYSTEMS"
    ],
    "<com.android.server.MountService: int getEncryptionState()>": [
        "android.permission.CRYPT_KEEPER"
    ],
    "<com.android.server.MountService: java.lang.String getField(java.lang.String)>": [
        "android.permission.STORAGE_INTERNAL"
    ],
    "<com.android.server.MountService: java.lang.String getPassword()>": [
        "android.permission.STORAGE_INTERNAL"
    ],
    "<com.android.server.MountService: int getPasswordType()>": [
        "android.permission.STORAGE_INTERNAL"
    ],
    "<com.android.server.MountService: java.lang.String getPrimaryStorageUuid()>": [
        "android.permission.MOUNT_UNMOUNT_FILESYSTEMS"
    ],
    "<com.android.server.MountService: java.lang.String getSecureContainerFilesystemPath(java.lang.String)>": [
        "android.permission.ASEC_ACCESS"
    ],
    "<com.android.server.MountService: java.lang.String[] getSecureContainerList()>": [
        "android.permission.ASEC_ACCESS"
    ],
    "<com.android.server.MountService: java.lang.String getSecureContainerPath(java.lang.String)>": [
        "android.permission.ASEC_ACCESS"
    ],
    "<com.android.server.MountService: int[] getStorageUsers(java.lang.String)>": [
        "android.permission.MOUNT_UNMOUNT_FILESYSTEMS"
    ],
    "<com.android.server.MountService: boolean isConvertibleToFBE()>": [
        "android.permission.STORAGE_INTERNAL"
    ],
    "<com.android.server.MountService: boolean isSecureContainerMounted(java.lang.String)>": [
        "android.permission.ASEC_ACCESS"
    ],
    "<com.android.server.MountService: void lockUserKey(int)>": [
        "android.permission.STORAGE_INTERNAL"
    ],
    "<com.android.server.MountService: void mount(java.lang.String)>": [
        "android.permission.MOUNT_UNMOUNT_FILESYSTEMS"
    ],
    "<com.android.server.MountService: int mountSecureContainer(java.lang.String,java.lang.String,int,boolean)>": [
        "android.permission.ASEC_MOUNT_UNMOUNT"
    ],
    "<com.android.server.MountService: int mountVolume(java.lang.String)>": [
        "android.permission.MOUNT_UNMOUNT_FILESYSTEMS"
    ],
    "<com.android.server.MountService: void partitionMixed(java.lang.String,int)>": [
        "android.permission.MOUNT_FORMAT_FILESYSTEMS"
    ],
    "<com.android.server.MountService: void partitionPrivate(java.lang.String)>": [
        "android.permission.MOUNT_FORMAT_FILESYSTEMS"
    ],
    "<com.android.server.MountService: void partitionPublic(java.lang.String)>": [
        "android.permission.MOUNT_FORMAT_FILESYSTEMS"
    ],
    "<com.android.server.MountService: void prepareUserStorage(java.lang.String,int,int,int)>": [
        "android.permission.STORAGE_INTERNAL"
    ],
    "<com.android.server.MountService: int renameSecureContainer(java.lang.String,java.lang.String)>": [
        "android.permission.ASEC_RENAME"
    ],
    "<com.android.server.MountService: int resizeSecureContainer(java.lang.String,int,java.lang.String)>": [
        "android.permission.ASEC_CREATE"
    ],
    "<com.android.server.MountService: void runMaintenance()>": [
        "android.permission.MOUNT_UNMOUNT_FILESYSTEMS"
    ],
    "<com.android.server.MountService: void setDebugFlags(int,int)>": [
        "android.permission.MOUNT_UNMOUNT_FILESYSTEMS"
    ],
    "<com.android.server.MountService: void setField(java.lang.String,java.lang.String)>": [
        "android.permission.STORAGE_INTERNAL"
    ],
    "<com.android.server.MountService: void setPrimaryStorageUuid(java.lang.String,android.content.pm.IPackageMoveObserver)>": [
        "android.permission.MOUNT_UNMOUNT_FILESYSTEMS"
    ],
    "<com.android.server.MountService: void setVolumeNickname(java.lang.String,java.lang.String)>": [
        "android.permission.MOUNT_UNMOUNT_FILESYSTEMS"
    ],
    "<com.android.server.MountService: void setVolumeUserFlags(java.lang.String,int,int)>": [
        "android.permission.MOUNT_UNMOUNT_FILESYSTEMS"
    ],
    "<com.android.server.MountService: void shutdown(android.os.storage.IMountShutdownObserver)>": [
        "android.permission.SHUTDOWN"
    ],
    "<com.android.server.MountService: void unlockUserKey(int,int,[byte,[byte)>": [
        "android.permission.STORAGE_INTERNAL"
    ],
    "<com.android.server.MountService: void unmount(java.lang.String)>": [
        "android.permission.MOUNT_UNMOUNT_FILESYSTEMS"
    ],
    "<com.android.server.MountService: int unmountSecureContainer(java.lang.String,boolean)>": [
        "android.permission.ASEC_MOUNT_UNMOUNT"
    ],
    "<com.android.server.MountService: void unmountVolume(java.lang.String,boolean,boolean)>": [
        "android.permission.MOUNT_UNMOUNT_FILESYSTEMS"
    ],
    "<com.android.server.MountService: int verifyEncryptionPassword(java.lang.String)>": [
        "android.permission.CRYPT_KEEPER"
    ],
    "<com.android.server.NetworkManagementService: void addIdleTimer(java.lang.String,int,int)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void addInterfaceToLocalNetwork(java.lang.String,java.util.List)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void addInterfaceToNetwork(java.lang.String,int)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void addLegacyRouteForNetId(int,android.net.RouteInfo,int)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void addRoute(int,android.net.RouteInfo)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void addVpnUidRanges(int,[android.net.UidRange)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void allowProtect(int)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void attachPppd(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void clearDefaultNetId()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void clearInterfaceAddresses(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void clearPermission([int)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void createPhysicalNetwork(int,java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void createVirtualNetwork(int,boolean,boolean)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void denyProtect(int)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void detachPppd(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void disableIpv6(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void disableNat(java.lang.String,java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void enableIpv6(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void enableNat(java.lang.String,java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: java.lang.String[] getDnsForwarders()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: boolean getIpForwardingEnabled()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsDetail()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsSummaryDev()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsSummaryXt()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsTethering()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsUidDetail(int)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: boolean isBandwidthControlEnabled()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: boolean isClatdStarted(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: boolean isTetheringStarted()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: java.lang.String[] listInterfaces()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: java.lang.String[] listTetheredInterfaces()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: java.lang.String[] listTtys()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void removeIdleTimer(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void removeInterfaceAlert(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void removeInterfaceFromLocalNetwork(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void removeInterfaceFromNetwork(java.lang.String,int)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void removeInterfaceQuota(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void removeNetwork(int)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void removeRoute(int,android.net.RouteInfo)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: int removeRoutesFromLocalNetwork(java.util.List)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void removeVpnUidRanges(int,[android.net.UidRange)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setDefaultNetId(int)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setDnsConfigurationForNetwork(int,[java.lang.String,java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setDnsForwarders(android.net.Network,[java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setDnsServersForNetwork(int,[java.lang.String,java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setGlobalAlert(long)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setInterfaceAlert(java.lang.String,long)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setInterfaceDown(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setInterfaceIpv6NdOffload(java.lang.String,boolean)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setInterfaceIpv6PrivacyExtensions(java.lang.String,boolean)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setInterfaceQuota(java.lang.String,long)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setInterfaceUp(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setIpForwardingEnabled(boolean)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setMtu(java.lang.String,int)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setNetworkPermission(int,java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setPermission(java.lang.String,[int)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setUidCleartextNetworkPolicy(int,int)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setUidMeteredNetworkBlacklist(int,boolean)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setUidMeteredNetworkWhitelist(int,boolean)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void shutdown()>": [
        "android.permission.SHUTDOWN"
    ],
    "<com.android.server.NetworkManagementService: void startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void startClatd(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void startInterfaceForwarding(java.lang.String,java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void startTethering([java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void stopAccessPoint(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void stopClatd(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void stopInterfaceForwarding(java.lang.String,java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void stopTethering()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void tetherInterface(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void unregisterObserver(android.net.INetworkManagementEventObserver)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void untetherInterface(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void wifiFirmwareReload(java.lang.String,java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkScoreService: boolean clearScores()>": [
        "android.permission.BROADCAST_NETWORK_PRIVILEGED",
        "android.permission.SCORE_NETWORKS"
    ],
    "<com.android.server.NetworkScoreService: void disableScoring()>": [
        "android.permission.SCORE_NETWORKS"
    ],
    "<com.android.server.NetworkScoreService: void registerNetworkScoreCache(int,android.net.INetworkScoreCache)>": [
        "android.permission.BROADCAST_NETWORK_PRIVILEGED"
    ],
    "<com.android.server.NetworkScoreService: boolean setActiveScorer(java.lang.String)>": [
        "android.permission.SCORE_NETWORKS"
    ],
    "<com.android.server.NetworkScoreService: boolean updateScores([android.net.ScoredNetwork)>": [
        "android.permission.SCORE_NETWORKS"
    ],
    "<com.android.server.NsdService: android.os.Messenger getMessenger()>": [
        "android.permission.INTERNET"
    ],
    "<com.android.server.NsdService: void setEnabled(boolean)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.RecoverySystemService$BinderService: boolean clearBcb()>": [
        "android.permission.RECOVERY"
    ],
    "<com.android.server.RecoverySystemService$BinderService: void rebootRecoveryWithCommand(java.lang.String)>": [
        "android.permission.RECOVERY"
    ],
    "<com.android.server.RecoverySystemService$BinderService: boolean setupBcb(java.lang.String)>": [
        "android.permission.RECOVERY"
    ],
    "<com.android.server.RecoverySystemService$BinderService: boolean uncrypt(java.lang.String,android.os.IRecoverySystemProgressListener)>": [
        "android.permission.RECOVERY"
    ],
    "<com.android.server.SerialService: java.lang.String[] getSerialPorts()>": [
        "android.permission.SERIAL_PORT"
    ],
    "<com.android.server.SerialService: android.os.ParcelFileDescriptor openSerialPort(java.lang.String)>": [
        "android.permission.SERIAL_PORT"
    ],
    "<com.android.server.TelephonyRegistry: void addOnSubscriptionsChangedListener(java.lang.String,com.android.internal.telephony.IOnSubscriptionsChangedListener)>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.READ_PHONE_STATE",
        "android.permission.READ_PRECISE_PHONE_STATE",
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void listenForSubscriber(int,java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.READ_PHONE_STATE",
        "android.permission.READ_PRECISE_PHONE_STATE",
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyCallForwardingChanged(boolean)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyCallForwardingChangedForSubscriber(int,boolean)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyCallState(int,java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyCallStateForPhoneId(int,int,int,java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyCarrierNetworkChange(boolean)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyCellInfo(java.util.List)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyCellInfoForSubscriber(int,java.util.List)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyCellLocation(android.os.Bundle)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyCellLocationForSubscriber(int,android.os.Bundle)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyDataActivity(int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyDataActivityForSubscriber(int,int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.NetworkCapabilities,int,boolean)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyDataConnectionFailed(java.lang.String,java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyDataConnectionFailedForSubscriber(int,java.lang.String,java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyDataConnectionForSubscriber(int,int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.NetworkCapabilities,int,boolean)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyDisconnectCause(int,int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyMessageWaitingChangedForPhoneId(int,int,boolean)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyOemHookRawEventForSubscriber(int,[byte)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyOtaspChanged(int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyPreciseCallState(int,int,int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyPreciseDataConnectionFailed(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyServiceStateForPhoneId(int,int,android.telephony.ServiceState)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifySignalStrengthForPhoneId(int,int,android.telephony.SignalStrength)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyVoLteServiceStateChanged(android.telephony.VoLteServiceState)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TextServicesManagerService: void setCurrentSpellChecker(java.lang.String,java.lang.String)>": [
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.TextServicesManagerService: void setCurrentSpellCheckerSubtype(java.lang.String,int)>": [
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.TextServicesManagerService: void setSpellCheckerEnabled(boolean)>": [
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.UpdateLockService: void acquireUpdateLock(android.os.IBinder,java.lang.String)>": [
        "android.permission.UPDATE_LOCK"
    ],
    "<com.android.server.UpdateLockService: void releaseUpdateLock(android.os.IBinder)>": [
        "android.permission.UPDATE_LOCK"
    ],
    "<com.android.server.VibratorService: void cancelVibrate(android.os.IBinder)>": [
        "android.permission.VIBRATE"
    ],
    "<com.android.server.VibratorService: void vibrate(int,java.lang.String,long,int,android.os.IBinder)>": [
        "android.permission.UPDATE_APP_OPS_STATS",
        "android.permission.VIBRATE"
    ],
    "<com.android.server.VibratorService: void vibratePattern(int,java.lang.String,[long,int,int,android.os.IBinder)>": [
        "android.permission.UPDATE_APP_OPS_STATS",
        "android.permission.VIBRATE"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService$Service: boolean findAccessibilityNodeInfoByAccessibilityId(int,long,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,long)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService$Service: boolean findAccessibilityNodeInfosByText(int,long,java.lang.String,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService$Service: boolean findAccessibilityNodeInfosByViewId(int,long,java.lang.String,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService$Service: boolean findFocus(int,long,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService$Service: boolean focusSearch(int,long,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService$Service: float getMagnificationCenterX()>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService$Service: float getMagnificationCenterY()>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService$Service: android.graphics.Region getMagnificationRegion()>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService$Service: float getMagnificationScale()>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService$Service: android.view.accessibility.AccessibilityWindowInfo getWindow(int)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService$Service: java.util.List getWindows()>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService$Service: boolean performAccessibilityAction(int,long,int,android.os.Bundle,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService$Service: boolean performGlobalAction(int)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService$Service: boolean resetMagnification(boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService$Service: boolean setMagnificationScaleAndCenter(float,float,float,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService$Service: boolean setSoftKeyboardShowMode(int)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService: int addAccessibilityInteractionConnection(android.view.IWindow,android.view.accessibility.IAccessibilityInteractionConnection,int)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService: int addClient(android.view.accessibility.IAccessibilityManagerClient,int)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService: void disableAccessibilityService(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService: void enableAccessibilityService(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService: java.util.List getEnabledAccessibilityServiceList(int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService: java.util.List getInstalledAccessibilityServiceList(int)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService: android.os.IBinder getWindowToken(int,int)>": [
        "getWindowToken"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService: void interrupt(int)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService: void removeAccessibilityInteractionConnection(android.view.IWindow)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService: boolean sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService: void temporaryEnableAccessibilityStateUntilKeyguardRemoved(android.content.ComponentName,boolean)>": [
        "temporaryEnableAccessibilityStateUntilKeyguardRemoved"
    ],
    "<com.android.server.accounts.AccountManagerService: void addAccountAsUser(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,[java.lang.String,boolean,android.os.Bundle,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.accounts.AccountManagerService: void addSharedAccountsFromParentUser(int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.accounts.AccountManagerService: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.accounts.AccountManagerService: void copyAccountToUser(android.accounts.IAccountManagerResponse,android.accounts.Account,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.accounts.AccountManagerService: void finishSessionAsUser(android.accounts.IAccountManagerResponse,android.os.Bundle,boolean,android.os.Bundle,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccounts(java.lang.String,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsForPackage(java.lang.String,int,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.accounts.AccountManagerService: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes(int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.accounts.AccountManagerService: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.accounts.AccountManagerService: void removeAccountAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,boolean,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.am.ActivityManagerService: void appNotRespondingViaProvider(android.os.IBinder)>": [
        "android.permission.REMOVE_TASKS"
    ],
    "<com.android.server.am.ActivityManagerService: boolean bindBackupAgent(java.lang.String,int,int)>": [
        "android.permission.CONFIRM_FULL_BACKUP",
        "android.permission.START_ANY_ACTIVITY",
        "android.permission.START_TASKS_FROM_RECENTS"
    ],
    "<com.android.server.am.ActivityManagerService: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,java.lang.String,int)>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.SET_DEBUG_APP",
        "android.permission.START_ANY_ACTIVITY",
        "android.permission.START_TASKS_FROM_RECENTS"
    ],
    "<com.android.server.am.ActivityManagerService: void bootAnimationComplete()>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<com.android.server.am.ActivityManagerService: void clearGrantedUriPermissions(java.lang.String,int)>": [
        "android.permission.CLEAR_APP_GRANTED_URI_PERMISSIONS"
    ],
    "<com.android.server.am.ActivityManagerService: void clearPendingBackup()>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.am.ActivityManagerService: void crashApplication(int,int,java.lang.String,java.lang.String)>": [
        "android.permission.FORCE_STOP_PACKAGES"
    ],
    "<com.android.server.am.ActivityManagerService: android.app.IActivityContainer createStackOnDisplay(int)>": [
        "android.permission.MANAGE_ACTIVITY_STACKS"
    ],
    "<com.android.server.am.ActivityManagerService: android.app.IActivityContainer createVirtualActivityContainer(android.os.IBinder,android.app.IActivityContainerCallback)>": [
        "android.permission.MANAGE_ACTIVITY_STACKS"
    ],
    "<com.android.server.am.ActivityManagerService: void deleteActivityContainer(android.app.IActivityContainer)>": [
        "android.permission.MANAGE_ACTIVITY_STACKS"
    ],
    "<com.android.server.am.ActivityManagerService: boolean dumpHeap(java.lang.String,int,boolean,java.lang.String,android.os.ParcelFileDescriptor)>": [
        "android.permission.SET_ACTIVITY_WATCHER"
    ],
    "<com.android.server.am.ActivityManagerService: void finishHeavyWeightApp()>": [
        "android.permission.FORCE_STOP_PACKAGES"
    ],
    "<com.android.server.am.ActivityManagerService: void forceStopPackage(java.lang.String,int)>": [
        "android.permission.FORCE_STOP_PACKAGES"
    ],
    "<com.android.server.am.ActivityManagerService: java.util.List getAllStackInfos()>": [
        "android.permission.MANAGE_ACTIVITY_STACKS"
    ],
    "<com.android.server.am.ActivityManagerService: android.os.Bundle getAssistContextExtras(int)>": [
        "android.permission.GET_TOP_ACTIVITY_INFO"
    ],
    "<com.android.server.am.ActivityManagerService: android.app.IActivityManager$ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder)>": [
        "android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY"
    ],
    "<com.android.server.am.ActivityManagerService: android.content.pm.UserInfo getCurrentUser()>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.am.ActivityManagerService: android.content.pm.ParceledListSlice getGrantedUriPermissions(java.lang.String,int)>": [
        "android.permission.GET_APP_GRANTED_URI_PERMISSIONS"
    ],
    "<com.android.server.am.ActivityManagerService: android.content.Intent getIntentForIntentSender(android.content.IIntentSender)>": [
        "android.permission.GET_INTENT_SENDER_INTENT"
    ],
    "<com.android.server.am.ActivityManagerService: int getPackageProcessState(java.lang.String,java.lang.String)>": [
        "android.permission.PACKAGE_USAGE_STATS"
    ],
    "<com.android.server.am.ActivityManagerService: android.content.pm.ParceledListSlice getRecentTasks(int,int,int)>": [
        "android.permission.GET_DETAILED_TASKS",
        "android.permission.GET_TASKS",
        "android.permission.REAL_GET_TASKS"
    ],
    "<com.android.server.am.ActivityManagerService: java.util.List getRunningAppProcesses()>": [
        "android.permission.GET_TASKS",
        "android.permission.REAL_GET_TASKS"
    ],
    "<com.android.server.am.ActivityManagerService: java.util.List getRunningExternalApplications()>": [
        "android.permission.GET_TASKS",
        "android.permission.REAL_GET_TASKS"
    ],
    "<com.android.server.am.ActivityManagerService: int[] getRunningUserIds()>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.am.ActivityManagerService: android.app.ActivityManager$StackInfo getStackInfo(int)>": [
        "android.permission.MANAGE_ACTIVITY_STACKS"
    ],
    "<com.android.server.am.ActivityManagerService: android.graphics.Rect getTaskBounds(int)>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.MANAGE_ACTIVITY_STACKS"
    ],
    "<com.android.server.am.ActivityManagerService: android.graphics.Bitmap getTaskDescriptionIcon(java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.am.ActivityManagerService: android.app.ActivityManager$TaskThumbnail getTaskThumbnail(int)>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.READ_FRAME_BUFFER"
    ],
    "<com.android.server.am.ActivityManagerService: java.util.List getTasks(int,int)>": [
        "android.permission.GET_TASKS",
        "android.permission.REAL_GET_TASKS"
    ],
    "<com.android.server.am.ActivityManagerService: void hang(android.os.IBinder,boolean)>": [
        "android.permission.SET_ACTIVITY_WATCHER"
    ],
    "<com.android.server.am.ActivityManagerService: long inputDispatchingTimedOut(int,boolean,java.lang.String)>": [
        "android.permission.FILTER_EVENTS"
    ],
    "<com.android.server.am.ActivityManagerService: boolean isInHomeStack(int)>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.MANAGE_ACTIVITY_STACKS"
    ],
    "<com.android.server.am.ActivityManagerService: boolean isUserRunning(int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.am.ActivityManagerService: void killAllBackgroundProcesses()>": [
        "android.permission.KILL_BACKGROUND_PROCESSES"
    ],
    "<com.android.server.am.ActivityManagerService: void killBackgroundProcesses(java.lang.String,int)>": [
        "android.permission.KILL_BACKGROUND_PROCESSES"
    ],
    "<com.android.server.am.ActivityManagerService: void killPackageDependents(java.lang.String,int)>": [
        "android.permission.KILL_UID"
    ],
    "<com.android.server.am.ActivityManagerService: void killUid(int,int,java.lang.String)>": [
        "android.permission.KILL_UID"
    ],
    "<com.android.server.am.ActivityManagerService: boolean launchAssistIntent(android.content.Intent,int,java.lang.String,int,android.os.Bundle)>": [
        "android.permission.GET_TOP_ACTIVITY_INFO"
    ],
    "<com.android.server.am.ActivityManagerService: void moveTaskBackwards(int)>": [
        "android.permission.REORDER_TASKS"
    ],
    "<com.android.server.am.ActivityManagerService: boolean moveTaskToDockedStack(int,int,boolean,boolean,android.graphics.Rect,boolean)>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.MANAGE_ACTIVITY_STACKS"
    ],
    "<com.android.server.am.ActivityManagerService: void moveTaskToFront(int,int,android.os.Bundle)>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.REORDER_TASKS"
    ],
    "<com.android.server.am.ActivityManagerService: void moveTaskToStack(int,int,boolean)>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.MANAGE_ACTIVITY_STACKS"
    ],
    "<com.android.server.am.ActivityManagerService: void moveTasksToFullscreenStack(int,boolean)>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.MANAGE_ACTIVITY_STACKS"
    ],
    "<com.android.server.am.ActivityManagerService: boolean moveTopActivityToPinnedStack(int,android.graphics.Rect)>": [
        "android.permission.MANAGE_ACTIVITY_STACKS"
    ],
    "<com.android.server.am.ActivityManagerService: boolean navigateUpTo(android.os.IBinder,android.content.Intent,int,android.content.Intent)>": [
        "android.permission.SET_DEBUG_APP",
        "android.permission.START_ANY_ACTIVITY",
        "android.permission.START_TASKS_FROM_RECENTS"
    ],
    "<com.android.server.am.ActivityManagerService: void performIdleMaintenance()>": [
        "android.permission.SET_ACTIVITY_WATCHER"
    ],
    "<com.android.server.am.ActivityManagerService: void positionTaskInStack(int,int,int)>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.MANAGE_ACTIVITY_STACKS"
    ],
    "<com.android.server.am.ActivityManagerService: boolean profileControl(java.lang.String,int,boolean,android.app.ProfilerInfo,int)>": [
        "android.permission.SET_ACTIVITY_WATCHER"
    ],
    "<com.android.server.am.ActivityManagerService: void registerProcessObserver(android.app.IProcessObserver)>": [
        "android.permission.SET_ACTIVITY_WATCHER"
    ],
    "<com.android.server.am.ActivityManagerService: void registerTaskStackListener(android.app.ITaskStackListener)>": [
        "android.permission.MANAGE_ACTIVITY_STACKS"
    ],
    "<com.android.server.am.ActivityManagerService: void registerUidObserver(android.app.IUidObserver,int)>": [
        "android.permission.SET_ACTIVITY_WATCHER"
    ],
    "<com.android.server.am.ActivityManagerService: void registerUserSwitchObserver(android.app.IUserSwitchObserver,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.am.ActivityManagerService: void removeContentProviderExternal(java.lang.String,android.os.IBinder)>": [
        "android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY"
    ],
    "<com.android.server.am.ActivityManagerService: void removeStack(int)>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.MANAGE_ACTIVITY_STACKS"
    ],
    "<com.android.server.am.ActivityManagerService: boolean removeTask(int)>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.REMOVE_TASKS"
    ],
    "<com.android.server.am.ActivityManagerService: boolean requestAssistContextExtras(int,com.android.internal.os.IResultReceiver,android.os.Bundle,android.os.IBinder,boolean,boolean)>": [
        "android.permission.GET_TOP_ACTIVITY_INFO"
    ],
    "<com.android.server.am.ActivityManagerService: void requestBugReport(int)>": [
        "android.permission.DUMP"
    ],
    "<com.android.server.am.ActivityManagerService: void resizeDockedStack(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.MANAGE_ACTIVITY_STACKS"
    ],
    "<com.android.server.am.ActivityManagerService: void resizePinnedStack(android.graphics.Rect,android.graphics.Rect)>": [
        "android.permission.MANAGE_ACTIVITY_STACKS"
    ],
    "<com.android.server.am.ActivityManagerService: void resizeStack(int,android.graphics.Rect,boolean,boolean,boolean,int)>": [
        "android.permission.MANAGE_ACTIVITY_STACKS"
    ],
    "<com.android.server.am.ActivityManagerService: void resizeTask(int,android.graphics.Rect,int)>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.MANAGE_ACTIVITY_STACKS"
    ],
    "<com.android.server.am.ActivityManagerService: void restart()>": [
        "android.permission.SET_ACTIVITY_WATCHER"
    ],
    "<com.android.server.am.ActivityManagerService: void resumeAppSwitches()>": [
        "android.permission.STOP_APP_SWITCHES"
    ],
    "<com.android.server.am.ActivityManagerService: void sendIdleJobTrigger()>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.SET_ACTIVITY_WATCHER"
    ],
    "<com.android.server.am.ActivityManagerService: void setActivityController(android.app.IActivityController,boolean)>": [
        "android.permission.SET_ACTIVITY_WATCHER"
    ],
    "<com.android.server.am.ActivityManagerService: void setAlwaysFinish(boolean)>": [
        "android.permission.SET_ALWAYS_FINISH"
    ],
    "<com.android.server.am.ActivityManagerService: void setDebugApp(java.lang.String,boolean,boolean)>": [
        "android.permission.SET_DEBUG_APP"
    ],
    "<com.android.server.am.ActivityManagerService: void setDumpHeapDebugLimit(java.lang.String,int,long,java.lang.String)>": [
        "android.permission.SET_DEBUG_APP"
    ],
    "<com.android.server.am.ActivityManagerService: void setFocusedStack(int)>": [
        "android.permission.MANAGE_ACTIVITY_STACKS"
    ],
    "<com.android.server.am.ActivityManagerService: void setFocusedTask(int)>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.MANAGE_ACTIVITY_STACKS"
    ],
    "<com.android.server.am.ActivityManagerService: void setFrontActivityScreenCompatMode(int)>": [
        "android.permission.SET_SCREEN_COMPATIBILITY"
    ],
    "<com.android.server.am.ActivityManagerService: void setHasTopUi(boolean)>": [
        "android.permission.INTERNAL_SYSTEM_WINDOW"
    ],
    "<com.android.server.am.ActivityManagerService: void setLenientBackgroundCheck(boolean)>": [
        "android.permission.SET_PROCESS_LIMIT"
    ],
    "<com.android.server.am.ActivityManagerService: void setLockScreenShown(boolean,boolean)>": [
        "android.permission.DEVICE_POWER"
    ],
    "<com.android.server.am.ActivityManagerService: void setPackageAskScreenCompat(java.lang.String,boolean)>": [
        "android.permission.SET_SCREEN_COMPATIBILITY"
    ],
    "<com.android.server.am.ActivityManagerService: void setPackageScreenCompatMode(java.lang.String,int)>": [
        "android.permission.SET_SCREEN_COMPATIBILITY"
    ],
    "<com.android.server.am.ActivityManagerService: void setProcessForeground(android.os.IBinder,int,boolean)>": [
        "android.permission.SET_PROCESS_LIMIT"
    ],
    "<com.android.server.am.ActivityManagerService: void setProcessLimit(int)>": [
        "android.permission.SET_PROCESS_LIMIT"
    ],
    "<com.android.server.am.ActivityManagerService: void setTaskDescription(android.os.IBinder,android.app.ActivityManager$TaskDescription)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.am.ActivityManagerService: boolean shutdown(int)>": [
        "android.permission.SHUTDOWN"
    ],
    "<com.android.server.am.ActivityManagerService: void signalPersistentProcesses(int)>": [
        "android.permission.SIGNAL_PERSISTENT_PROCESSES"
    ],
    "<com.android.server.am.ActivityManagerService: int startActivities(android.app.IApplicationThread,java.lang.String,[android.content.Intent,[java.lang.String,android.os.IBinder,android.os.Bundle,int)>": [
        "android.permission.SET_DEBUG_APP"
    ],
    "<com.android.server.am.ActivityManagerService: int startActivity(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle)>": [
        "android.permission.SET_DEBUG_APP"
    ],
    "<com.android.server.am.ActivityManagerService: android.app.IActivityManager$WaitResult startActivityAndWait(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>": [
        "android.permission.SET_DEBUG_APP"
    ],
    "<com.android.server.am.ActivityManagerService: int startActivityAsCaller(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,boolean,int)>": [
        "android.permission.SET_DEBUG_APP"
    ],
    "<com.android.server.am.ActivityManagerService: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.app.ProfilerInfo,android.os.Bundle,int)>": [
        "android.permission.SET_DEBUG_APP"
    ],
    "<com.android.server.am.ActivityManagerService: int startActivityFromRecents(int,android.os.Bundle)>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.START_TASKS_FROM_RECENTS"
    ],
    "<com.android.server.am.ActivityManagerService: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)>": [
        "android.permission.SET_DEBUG_APP"
    ],
    "<com.android.server.am.ActivityManagerService: boolean startBinderTracking()>": [
        "android.permission.SET_ACTIVITY_WATCHER"
    ],
    "<com.android.server.am.ActivityManagerService: void startConfirmDeviceCredentialIntent(android.content.Intent)>": [
        "android.permission.MANAGE_ACTIVITY_STACKS"
    ],
    "<com.android.server.am.ActivityManagerService: void startSystemLockTaskMode(int)>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.MANAGE_ACTIVITY_STACKS"
    ],
    "<com.android.server.am.ActivityManagerService: boolean startUserInBackground(int)>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.am.ActivityManagerService: int startVoiceActivity(java.lang.String,int,int,android.content.Intent,java.lang.String,android.service.voice.IVoiceInteractionSession,com.android.internal.app.IVoiceInteractor,int,android.app.ProfilerInfo,android.os.Bundle,int)>": [
        "android.permission.BIND_VOICE_INTERACTION"
    ],
    "<com.android.server.am.ActivityManagerService: void stopAppSwitches()>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.STOP_APP_SWITCHES"
    ],
    "<com.android.server.am.ActivityManagerService: boolean stopBinderTrackingAndDump(android.os.ParcelFileDescriptor)>": [
        "android.permission.SET_ACTIVITY_WATCHER"
    ],
    "<com.android.server.am.ActivityManagerService: void stopLockTaskMode()>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.MANAGE_ACTIVITY_STACKS"
    ],
    "<com.android.server.am.ActivityManagerService: int stopService(android.app.IApplicationThread,android.content.Intent,java.lang.String,int)>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.SET_DEBUG_APP",
        "android.permission.START_ANY_ACTIVITY",
        "android.permission.START_TASKS_FROM_RECENTS"
    ],
    "<com.android.server.am.ActivityManagerService: boolean stopServiceToken(android.content.ComponentName,android.os.IBinder,int)>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.SET_DEBUG_APP",
        "android.permission.START_ANY_ACTIVITY",
        "android.permission.START_TASKS_FROM_RECENTS"
    ],
    "<com.android.server.am.ActivityManagerService: void stopSystemLockTaskMode()>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.MANAGE_ACTIVITY_STACKS"
    ],
    "<com.android.server.am.ActivityManagerService: int stopUser(int,boolean,android.app.IStopUserCallback)>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.am.ActivityManagerService: void suppressResizeConfigChanges(boolean)>": [
        "android.permission.MANAGE_ACTIVITY_STACKS"
    ],
    "<com.android.server.am.ActivityManagerService: void swapDockedAndFullscreenStack()>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.MANAGE_ACTIVITY_STACKS"
    ],
    "<com.android.server.am.ActivityManagerService: boolean unbindService(android.app.IServiceConnection)>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.SET_DEBUG_APP",
        "android.permission.START_ANY_ACTIVITY",
        "android.permission.START_TASKS_FROM_RECENTS"
    ],
    "<com.android.server.am.ActivityManagerService: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<com.android.server.am.ActivityManagerService: void unhandledBack()>": [
        "android.permission.FORCE_BACK"
    ],
    "<com.android.server.am.ActivityManagerService: boolean unlockUser(int,[byte,[byte,android.os.IProgressListener)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.am.ActivityManagerService: void updateConfiguration(android.content.res.Configuration)>": [
        "android.permission.CHANGE_CONFIGURATION"
    ],
    "<com.android.server.am.ActivityManagerService: void updatePersistentConfiguration(android.content.res.Configuration)>": [
        "android.permission.CHANGE_CONFIGURATION"
    ],
    "<com.android.server.am.BatteryStatsService: long getAwakeTimeBattery()>": [
        "android.permission.BATTERY_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: long getAwakeTimePlugged()>": [
        "android.permission.BATTERY_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: B[] getStatistics()>": [
        "android.permission.BATTERY_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: android.os.ParcelFileDescriptor getStatisticsStream()>": [
        "android.permission.BATTERY_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteBleScanStarted(android.os.WorkSource)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteBleScanStopped(android.os.WorkSource)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteBluetoothControllerActivity(android.bluetooth.BluetoothActivityEnergyInfo)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteChangeWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteConnectivityChanged(int,java.lang.String)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteDeviceIdleMode(int,java.lang.String,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteEvent(int,java.lang.String,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteFlashlightOff(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteFlashlightOn(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteFullWifiLockAcquired(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteFullWifiLockAcquiredFromSource(android.os.WorkSource)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteFullWifiLockReleased(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteFullWifiLockReleasedFromSource(android.os.WorkSource)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteInteractive(boolean)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteJobFinish(java.lang.String,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteJobStart(java.lang.String,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteLongPartialWakelockFinish(java.lang.String,java.lang.String,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteLongPartialWakelockStart(java.lang.String,java.lang.String,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteMobileRadioPowerState(int,long,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteModemControllerActivity(android.telephony.ModemActivityInfo)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteNetworkInterfaceType(java.lang.String,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteNetworkStatsEnabled()>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void notePhoneDataConnectionState(int,boolean)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void notePhoneOff()>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void notePhoneOn()>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void notePhoneSignalStrength(android.telephony.SignalStrength)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void notePhoneState(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteResetAudio()>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteResetBleScan()>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteResetCamera()>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteResetFlashlight()>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteResetVideo()>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteScreenBrightness(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteScreenState(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteStartAudio(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteStartCamera(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteStartGps(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteStartSensor(int,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteStartVideo(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteStartWakelock(int,int,java.lang.String,java.lang.String,int,boolean)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteStartWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int,boolean)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteStopAudio(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteStopCamera(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteStopGps(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteStopSensor(int,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteStopVideo(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteStopWakelock(int,int,java.lang.String,java.lang.String,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteStopWakelockFromSource(android.os.WorkSource,int,java.lang.String,java.lang.String,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteSyncFinish(java.lang.String,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteSyncStart(java.lang.String,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteUserActivity(int,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteVibratorOff(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteVibratorOn(int,long)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWakeUp(java.lang.String,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiBatchedScanStartedFromSource(android.os.WorkSource,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiBatchedScanStoppedFromSource(android.os.WorkSource)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiControllerActivity(android.net.wifi.WifiActivityEnergyInfo)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiMulticastDisabled(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiMulticastDisabledFromSource(android.os.WorkSource)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiMulticastEnabled(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiMulticastEnabledFromSource(android.os.WorkSource)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiOff()>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiOn()>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiRadioPowerState(int,long,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiRssiChanged(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiRunning(android.os.WorkSource)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiRunningChanged(android.os.WorkSource,android.os.WorkSource)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiScanStarted(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiScanStartedFromSource(android.os.WorkSource)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiScanStopped(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiScanStoppedFromSource(android.os.WorkSource)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiState(int,java.lang.String)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiStopped(android.os.WorkSource)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiSupplicantStateChanged(int,boolean)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void setBatteryState(int,int,int,int,int,int,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: android.os.health.HealthStatsParceler takeUidSnapshot(int)>": [
        "android.permission.BATTERY_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: android.os.health.HealthStatsParceler[] takeUidSnapshots([int)>": [
        "android.permission.BATTERY_STATS"
    ],
    "<com.android.server.am.PendingIntentRecord: void send(int,android.content.Intent,java.lang.String,android.content.IIntentReceiver,java.lang.String,android.os.Bundle)>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.READ_EXTERNAL_STORAGE",
        "android.permission.START_ANY_ACTIVITY",
        "android.permission.START_TASKS_FROM_RECENTS"
    ],
    "<com.android.server.am.ProcessStatsService: B[] getCurrentStats(java.util.List)>": [
        "android.permission.PACKAGE_USAGE_STATS"
    ],
    "<com.android.server.am.ProcessStatsService: android.os.ParcelFileDescriptor getStatsOverTime(long)>": [
        "android.permission.PACKAGE_USAGE_STATS"
    ],
    "<com.android.server.appwidget.AppWidgetServiceImpl: boolean bindAppWidgetId(java.lang.String,int,int,android.content.ComponentName,android.os.Bundle)>": [
        "android.permission.BIND_APPWIDGET"
    ],
    "<com.android.server.appwidget.AppWidgetServiceImpl: void bindRemoteViewsService(java.lang.String,int,android.content.Intent,android.os.IBinder)>": [
        "android.permission.BIND_APPWIDGET"
    ],
    "<com.android.server.appwidget.AppWidgetServiceImpl: android.content.IntentSender createAppWidgetConfigIntentSender(java.lang.String,int,int)>": [
        "android.permission.BIND_APPWIDGET"
    ],
    "<com.android.server.appwidget.AppWidgetServiceImpl: void deleteAppWidgetId(java.lang.String,int)>": [
        "android.permission.BIND_APPWIDGET"
    ],
    "<com.android.server.appwidget.AppWidgetServiceImpl: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(java.lang.String,int)>": [
        "android.permission.BIND_APPWIDGET"
    ],
    "<com.android.server.appwidget.AppWidgetServiceImpl: android.os.Bundle getAppWidgetOptions(java.lang.String,int)>": [
        "android.permission.BIND_APPWIDGET"
    ],
    "<com.android.server.appwidget.AppWidgetServiceImpl: android.widget.RemoteViews getAppWidgetViews(java.lang.String,int)>": [
        "android.permission.BIND_APPWIDGET"
    ],
    "<com.android.server.appwidget.AppWidgetServiceImpl: boolean hasBindAppWidgetPermission(java.lang.String,int)>": [
        "android.permission.MODIFY_APPWIDGET_BIND_PERMISSIONS"
    ],
    "<com.android.server.appwidget.AppWidgetServiceImpl: void notifyAppWidgetViewDataChanged(java.lang.String,[int,int)>": [
        "android.permission.BIND_APPWIDGET"
    ],
    "<com.android.server.appwidget.AppWidgetServiceImpl: void partiallyUpdateAppWidgetIds(java.lang.String,[int,android.widget.RemoteViews)>": [
        "android.permission.BIND_APPWIDGET"
    ],
    "<com.android.server.appwidget.AppWidgetServiceImpl: void setBindAppWidgetPermission(java.lang.String,int,boolean)>": [
        "android.permission.MODIFY_APPWIDGET_BIND_PERMISSIONS"
    ],
    "<com.android.server.appwidget.AppWidgetServiceImpl: void unbindRemoteViewsService(java.lang.String,int,android.content.Intent)>": [
        "android.permission.BIND_APPWIDGET"
    ],
    "<com.android.server.appwidget.AppWidgetServiceImpl: void updateAppWidgetIds(java.lang.String,[int,android.widget.RemoteViews)>": [
        "android.permission.BIND_APPWIDGET"
    ],
    "<com.android.server.appwidget.AppWidgetServiceImpl: void updateAppWidgetOptions(java.lang.String,int,android.os.Bundle)>": [
        "android.permission.BIND_APPWIDGET"
    ],
    "<com.android.server.audio.AudioService: void disableSafeMediaVolume(java.lang.String)>": [
        "android.permission.STATUS_BAR_SERVICE"
    ],
    "<com.android.server.audio.AudioService: void forceRemoteSubmixFullVolume(boolean,android.os.IBinder)>": [
        "android.permission.CAPTURE_AUDIO_OUTPUT"
    ],
    "<com.android.server.audio.AudioService: void notifyVolumeControllerVisible(android.media.IVolumeController,boolean)>": [
        "android.permission.STATUS_BAR_SERVICE"
    ],
    "<com.android.server.audio.AudioService: java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig,android.media.audiopolicy.IAudioPolicyCallback,boolean)>": [
        "android.permission.MODIFY_AUDIO_ROUTING"
    ],
    "<com.android.server.audio.AudioService: int requestAudioFocus(android.media.AudioAttributes,int,android.os.IBinder,android.media.IAudioFocusDispatcher,java.lang.String,java.lang.String,int,android.media.audiopolicy.IAudioPolicyCallback)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.audio.AudioService: void setBluetoothScoOn(boolean)>": [
        "android.permission.MODIFY_AUDIO_SETTINGS"
    ],
    "<com.android.server.audio.AudioService: int setFocusPropertiesForPolicy(int,android.media.audiopolicy.IAudioPolicyCallback)>": [
        "android.permission.MODIFY_AUDIO_ROUTING"
    ],
    "<com.android.server.audio.AudioService: void setMasterMute(boolean,int,java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.audio.AudioService: void setMicrophoneMute(boolean,java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.MODIFY_AUDIO_SETTINGS"
    ],
    "<com.android.server.audio.AudioService: void setMode(int,android.os.IBinder,java.lang.String)>": [
        "android.permission.MODIFY_AUDIO_SETTINGS"
    ],
    "<com.android.server.audio.AudioService: void setRingerModeInternal(int,java.lang.String)>": [
        "android.permission.STATUS_BAR_SERVICE"
    ],
    "<com.android.server.audio.AudioService: void setRingtonePlayer(android.media.IRingtonePlayer)>": [
        "android.permission.REMOTE_AUDIO_PLAYBACK"
    ],
    "<com.android.server.audio.AudioService: void setSpeakerphoneOn(boolean)>": [
        "android.permission.MODIFY_AUDIO_SETTINGS"
    ],
    "<com.android.server.audio.AudioService: void setVolumeController(android.media.IVolumeController)>": [
        "android.permission.STATUS_BAR_SERVICE"
    ],
    "<com.android.server.audio.AudioService: void setVolumePolicy(android.media.VolumePolicy)>": [
        "android.permission.STATUS_BAR_SERVICE"
    ],
    "<com.android.server.audio.AudioService: void startBluetoothSco(android.os.IBinder,int)>": [
        "android.permission.MODIFY_AUDIO_SETTINGS"
    ],
    "<com.android.server.audio.AudioService: void startBluetoothScoVirtualCall(android.os.IBinder)>": [
        "android.permission.MODIFY_AUDIO_SETTINGS"
    ],
    "<com.android.server.audio.AudioService: void stopBluetoothSco(android.os.IBinder)>": [
        "android.permission.MODIFY_AUDIO_SETTINGS"
    ],
    "<com.android.server.backup.BackupManagerService$ActiveRestoreSession: int getAvailableRestoreSets(android.app.backup.IRestoreObserver)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.backup.BackupManagerService$ActiveRestoreSession: int restoreAll(long,android.app.backup.IRestoreObserver)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.backup.BackupManagerService$ActiveRestoreSession: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.backup.BackupManagerService$ActiveRestoreSession: int restoreSome(long,android.app.backup.IRestoreObserver,[java.lang.String)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.backup.Trampoline: void acknowledgeFullBackupOrRestore(int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.backup.Trampoline: void backupNow()>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.backup.Trampoline: android.app.backup.IRestoreSession beginRestoreSession(java.lang.String,java.lang.String)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.backup.Trampoline: void clearBackupData(java.lang.String,java.lang.String)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.backup.Trampoline: void dataChanged(java.lang.String)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.backup.Trampoline: void fullBackup(android.os.ParcelFileDescriptor,boolean,boolean,boolean,boolean,boolean,boolean,boolean,[java.lang.String)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.backup.Trampoline: void fullRestore(android.os.ParcelFileDescriptor)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.backup.Trampoline: void fullTransportBackup([java.lang.String)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.backup.Trampoline: long getAvailableRestoreToken(java.lang.String)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.backup.Trampoline: android.content.Intent getConfigurationIntent(java.lang.String)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.backup.Trampoline: java.lang.String getCurrentTransport()>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.backup.Trampoline: android.content.Intent getDataManagementIntent(java.lang.String)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.backup.Trampoline: java.lang.String getDataManagementLabel(java.lang.String)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.backup.Trampoline: java.lang.String getDestinationString(java.lang.String)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.backup.Trampoline: boolean hasBackupPassword()>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.backup.Trampoline: boolean isAppEligibleForBackup(java.lang.String)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.backup.Trampoline: boolean isBackupEnabled()>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.backup.Trampoline: java.lang.String[] listAllTransports()>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.backup.Trampoline: int requestBackup([java.lang.String,android.app.backup.IBackupObserver)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.backup.Trampoline: void restoreAtInstall(java.lang.String,int)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.backup.Trampoline: java.lang.String selectBackupTransport(java.lang.String)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.backup.Trampoline: void setAutoRestore(boolean)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.backup.Trampoline: void setBackupEnabled(boolean)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.backup.Trampoline: boolean setBackupPassword(java.lang.String,java.lang.String)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.backup.Trampoline: void setBackupProvisioned(boolean)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.connectivity.IpConnectivityMetrics$Impl: int logEvent(android.net.ConnectivityMetricsEvent)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.connectivity.MetricsLoggerService$MetricsLoggerImpl: android.net.ConnectivityMetricsEvent[] getEvents(android.net.ConnectivityMetricsEvent$Reference)>": [
        "android.permission.DUMP"
    ],
    "<com.android.server.connectivity.MetricsLoggerService$MetricsLoggerImpl: long logEvent(android.net.ConnectivityMetricsEvent)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.connectivity.MetricsLoggerService$MetricsLoggerImpl: long logEvents([android.net.ConnectivityMetricsEvent)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.connectivity.MetricsLoggerService$MetricsLoggerImpl: boolean register(android.app.PendingIntent)>": [
        "android.permission.DUMP"
    ],
    "<com.android.server.connectivity.MetricsLoggerService$MetricsLoggerImpl: void unregister(android.app.PendingIntent)>": [
        "android.permission.DUMP"
    ],
    "<com.android.server.content.ContentService: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>": [
        "android.permission.WRITE_SYNC_SETTINGS"
    ],
    "<com.android.server.content.ContentService: void cancelSync(android.accounts.Account,java.lang.String,android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.content.ContentService: void cancelSyncAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.content.ContentService: android.os.Bundle getCache(java.lang.String,android.net.Uri,int)>": [
        "android.permission.CACHE_CONTENT",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.content.ContentService: java.util.List getCurrentSyncs()>": [
        "android.permission.GET_ACCOUNTS",
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.READ_SYNC_STATS"
    ],
    "<com.android.server.content.ContentService: java.util.List getCurrentSyncsAsUser(int)>": [
        "android.permission.GET_ACCOUNTS",
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.READ_SYNC_STATS"
    ],
    "<com.android.server.content.ContentService: int getIsSyncable(android.accounts.Account,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.READ_SYNC_SETTINGS"
    ],
    "<com.android.server.content.ContentService: int getIsSyncableAsUser(android.accounts.Account,java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.READ_SYNC_SETTINGS"
    ],
    "<com.android.server.content.ContentService: boolean getMasterSyncAutomatically()>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.READ_SYNC_SETTINGS"
    ],
    "<com.android.server.content.ContentService: boolean getMasterSyncAutomaticallyAsUser(int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.READ_SYNC_SETTINGS"
    ],
    "<com.android.server.content.ContentService: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String,android.content.ComponentName)>": [
        "android.permission.READ_SYNC_SETTINGS"
    ],
    "<com.android.server.content.ContentService: java.lang.String[] getSyncAdapterPackagesForAuthorityAsUser(java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.content.ContentService: android.content.SyncAdapterType[] getSyncAdapterTypes()>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.content.ContentService: android.content.SyncAdapterType[] getSyncAdapterTypesAsUser(int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.content.ContentService: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.READ_SYNC_SETTINGS"
    ],
    "<com.android.server.content.ContentService: boolean getSyncAutomaticallyAsUser(android.accounts.Account,java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.READ_SYNC_SETTINGS"
    ],
    "<com.android.server.content.ContentService: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String,android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.READ_SYNC_STATS"
    ],
    "<com.android.server.content.ContentService: android.content.SyncStatusInfo getSyncStatusAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.READ_SYNC_STATS"
    ],
    "<com.android.server.content.ContentService: boolean isSyncActive(android.accounts.Account,java.lang.String,android.content.ComponentName)>": [
        "android.permission.READ_SYNC_STATS"
    ],
    "<com.android.server.content.ContentService: boolean isSyncPending(android.accounts.Account,java.lang.String,android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.READ_SYNC_STATS"
    ],
    "<com.android.server.content.ContentService: boolean isSyncPendingAsUser(android.accounts.Account,java.lang.String,android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.READ_SYNC_STATS"
    ],
    "<com.android.server.content.ContentService: void putCache(java.lang.String,android.net.Uri,android.os.Bundle,int)>": [
        "android.permission.CACHE_CONTENT",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.content.ContentService: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.content.ContentService: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>": [
        "android.permission.WRITE_SYNC_SETTINGS"
    ],
    "<com.android.server.content.ContentService: void setIsSyncable(android.accounts.Account,java.lang.String,int)>": [
        "android.permission.WRITE_SYNC_SETTINGS"
    ],
    "<com.android.server.content.ContentService: void setMasterSyncAutomatically(boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.WRITE_SYNC_SETTINGS"
    ],
    "<com.android.server.content.ContentService: void setMasterSyncAutomaticallyAsUser(boolean,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.WRITE_SYNC_SETTINGS"
    ],
    "<com.android.server.content.ContentService: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.WRITE_SYNC_SETTINGS"
    ],
    "<com.android.server.content.ContentService: void setSyncAutomaticallyAsUser(android.accounts.Account,java.lang.String,boolean,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.WRITE_SYNC_SETTINGS"
    ],
    "<com.android.server.content.ContentService: void sync(android.content.SyncRequest)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.content.ContentService: void syncAsUser(android.content.SyncRequest,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void addCrossProfileIntentFilter(android.content.ComponentName,android.content.IntentFilter,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean addCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void addPersistentPreferredActivity(android.content.ComponentName,android.content.IntentFilter,android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean approveCaCert(java.lang.String,int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.MANAGE_USERS"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void choosePrivateKeyAlias(int,android.net.Uri,java.lang.String,android.os.IBinder)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void clearCrossProfileIntentFilters(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void clearDeviceOwner(java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void clearPackagePersistentPreferredActivities(android.content.ComponentName,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void clearProfileOwner(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.UserHandle createAndManageUser(android.content.ComponentName,java.lang.String,android.content.ComponentName,android.os.PersistableBundle,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.MANAGE_DEVICE_ADMINS",
        "android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS",
        "android.permission.MANAGE_USERS"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void enableSystemApp(android.content.ComponentName,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: int enableSystemAppWithIntent(android.content.ComponentName,android.content.Intent)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void enforceCanManageCaCerts(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.MANAGE_CA_CERTIFICATES"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void forceRemoveActiveAdmin(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] getAccountTypesWithManagementDisabled()>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] getAccountTypesWithManagementDisabledAsUser(int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getActiveAdmins(int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getAlwaysOnVpnPackage(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Bundle getApplicationRestrictions(android.content.ComponentName,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getApplicationRestrictionsManagingPackage(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getAutoTimeRequired()>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getBluetoothContactSharingDisabled(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getBluetoothContactSharingDisabledForUser(int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCameraDisabled(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getCertInstallerPackage(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCrossProfileCallerIdDisabled(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCrossProfileCallerIdDisabledForUser(int)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCrossProfileContactsSearchDisabled(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getCrossProfileContactsSearchDisabledForUser(int)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getCrossProfileWidgetProviders(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: int getCurrentFailedPasswordAttempts(int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getDeviceOwnerComponent(boolean)>": [
        "android.permission.MANAGE_USERS"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getDeviceOwnerName()>": [
        "android.permission.MANAGE_USERS"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: int getDeviceOwnerUserId()>": [
        "android.permission.MANAGE_USERS"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getDoNotAskCredentialsOnBoot()>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.QUERY_DO_NOT_ASK_CREDENTIALS_ON_BOOT"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getForceEphemeralUsers(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getGlobalProxyAdmin(int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getKeepUninstalledPackages(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: int getKeyguardDisabledFeatures(android.content.ComponentName,int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] getLockTaskPackages(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getLongSupportMessage(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getLongSupportMessageForUser(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: long getMaximumTimeToLock(android.content.ComponentName,int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: long getMaximumTimeToLockForUserAndProfiles(int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: int getOrganizationColor(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: int getOrganizationColorForUser(int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getOrganizationName(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getOrganizationNameForUser(int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: long getPasswordExpiration(android.content.ComponentName,int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: long getPasswordExpirationTimeout(android.content.ComponentName,int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordHistoryLength(android.content.ComponentName,int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumLength(android.content.ComponentName,int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumLetters(android.content.ComponentName,int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumNumeric(android.content.ComponentName,int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumSymbols(android.content.ComponentName,int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: int getPasswordQuality(android.content.ComponentName,int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: int getPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: int getPermissionPolicy(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getPermittedAccessibilityServices(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getPermittedAccessibilityServicesForUser(int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getPermittedInputMethods(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getPermittedInputMethodsForCurrentUser()>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getProfileOwnerName(int)>": [
        "android.permission.MANAGE_USERS"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: int getProfileWithMinimumFailedPasswordsForWipe(int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>": [
        "android.permission.BIND_DEVICE_ADMIN",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: long getRequiredStrongAuthTimeout(android.content.ComponentName,int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName getRestrictionsProvider(int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getScreenCaptureDisabled(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getShortSupportMessage(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.CharSequence getShortSupportMessageForUser(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean getStorageEncryption(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: int getStorageEncryptionStatus(java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: java.util.List getTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: int getUserProvisioningState()>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: android.os.Bundle getUserRestrictions(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String getWifiMacAddress(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasGrantedPolicy(android.content.ComponentName,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean hasUserSetupCompleted()>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean installCaCert(android.content.ComponentName,[byte)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.MANAGE_CA_CERTIFICATES"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean installKeyPair(android.content.ComponentName,[byte,[byte,[byte,java.lang.String,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAccessibilityServicePermittedByAdmin(android.content.ComponentName,java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isActivePasswordSufficient(int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAdminActive(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isAffiliatedUser()>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isApplicationHidden(android.content.ComponentName,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isBackupServiceEnabled(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCaCertApproved(java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.MANAGE_USERS"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isCallerApplicationRestrictionsManagingPackage()>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isDeviceProvisioningConfigApplied()>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.MANAGE_USERS"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isInputMethodPermittedByAdmin(android.content.ComponentName,java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isLockTaskPermitted(java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isManagedProfile(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isMasterVolumeMuted(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isPackageSuspended(android.content.ComponentName,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProfileActivePasswordSufficientForParent(int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isProvisioningAllowed(java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isRemovingAdmin(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSecurityLoggingEnabled(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isSystemOnlyUser(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUninstallBlocked(android.content.ComponentName,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean isUninstallInQueue(java.lang.String)>": [
        "android.permission.MANAGE_DEVICE_ADMINS"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void lockNow(boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void notifyLockTaskModeChanged(boolean,java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void notifyPendingSystemUpdate(long)>": [
        "android.permission.NOTIFY_PENDING_SYSTEM_UPDATE"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean packageHasActiveAdmins(java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void reboot(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void removeActiveAdmin(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.MANAGE_DEVICE_ADMINS"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean removeCrossProfileWidgetProvider(android.content.ComponentName,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean removeKeyPair(android.content.ComponentName,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean removeUser(android.content.ComponentName,android.os.UserHandle)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void reportFailedFingerprintAttempt(int)>": [
        "android.permission.BIND_DEVICE_ADMIN",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void reportFailedPasswordAttempt(int)>": [
        "android.permission.BIND_DEVICE_ADMIN",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void reportKeyguardDismissed(int)>": [
        "android.permission.BIND_DEVICE_ADMIN",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void reportKeyguardSecured(int)>": [
        "android.permission.BIND_DEVICE_ADMIN",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void reportSuccessfulFingerprintAttempt(int)>": [
        "android.permission.BIND_DEVICE_ADMIN",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void reportSuccessfulPasswordAttempt(int)>": [
        "android.permission.BIND_DEVICE_ADMIN",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean requestBugreport(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean resetPassword(java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.ParceledListSlice retrievePreRebootSecurityLogs(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.pm.ParceledListSlice retrieveSecurityLogs(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setAccountManagementDisabled(android.content.ComponentName,java.lang.String,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setActiveAdmin(android.content.ComponentName,boolean,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.MANAGE_DEVICE_ADMINS"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setActivePasswordState(int,int,int,int,int,int,int,int,int)>": [
        "android.permission.BIND_DEVICE_ADMIN",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setAffiliationIds(android.content.ComponentName,java.util.List)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setAlwaysOnVpnPackage(android.content.ComponentName,java.lang.String,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setApplicationHidden(android.content.ComponentName,java.lang.String,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setApplicationRestrictions(android.content.ComponentName,java.lang.String,android.os.Bundle)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setApplicationRestrictionsManagingPackage(android.content.ComponentName,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setAutoTimeRequired(android.content.ComponentName,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setBackupServiceEnabled(android.content.ComponentName,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setBluetoothContactSharingDisabled(android.content.ComponentName,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setCameraDisabled(android.content.ComponentName,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setCertInstallerPackage(android.content.ComponentName,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setCrossProfileCallerIdDisabled(android.content.ComponentName,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setCrossProfileContactsSearchDisabled(android.content.ComponentName,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setDeviceOwner(android.content.ComponentName,java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setDeviceOwnerLockScreenInfo(android.content.ComponentName,java.lang.CharSequence)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setDeviceProvisioningConfigApplied()>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.MANAGE_USERS"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setForceEphemeralUsers(android.content.ComponentName,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setGlobalSetting(android.content.ComponentName,java.lang.String,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setKeepUninstalledPackages(android.content.ComponentName,java.util.List)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setKeyguardDisabled(android.content.ComponentName,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setKeyguardDisabledFeatures(android.content.ComponentName,int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setLockTaskPackages(android.content.ComponentName,[java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setLongSupportMessage(android.content.ComponentName,java.lang.CharSequence)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setMasterVolumeMuted(android.content.ComponentName,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setMaximumTimeToLock(android.content.ComponentName,long,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setOrganizationColor(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setOrganizationColorForUser(int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.MANAGE_USERS"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setOrganizationName(android.content.ComponentName,java.lang.CharSequence)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: java.lang.String[] setPackagesSuspended(android.content.ComponentName,[java.lang.String,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordExpirationTimeout(android.content.ComponentName,long,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordHistoryLength(android.content.ComponentName,int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumLength(android.content.ComponentName,int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumLetters(android.content.ComponentName,int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumLowerCase(android.content.ComponentName,int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumNonLetter(android.content.ComponentName,int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumNumeric(android.content.ComponentName,int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumSymbols(android.content.ComponentName,int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordMinimumUpperCase(android.content.ComponentName,int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setPasswordQuality(android.content.ComponentName,int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setPermissionGrantState(android.content.ComponentName,java.lang.String,java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setPermissionPolicy(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setPermittedAccessibilityServices(android.content.ComponentName,java.util.List)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setPermittedInputMethods(android.content.ComponentName,java.util.List)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setProfileEnabled(android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setProfileName(android.content.ComponentName,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setRecommendedGlobalProxy(android.content.ComponentName,android.net.ProxyInfo)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setRequiredStrongAuthTimeout(android.content.ComponentName,long,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setRestrictionsProvider(android.content.ComponentName,android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setScreenCaptureDisabled(android.content.ComponentName,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setSecureSetting(android.content.ComponentName,java.lang.String,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setSecurityLoggingEnabled(android.content.ComponentName,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setShortSupportMessage(android.content.ComponentName,java.lang.CharSequence)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean setStatusBarDisabled(android.content.ComponentName,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: int setStorageEncryption(android.content.ComponentName,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setSystemUpdatePolicy(android.content.ComponentName,android.app.admin.SystemUpdatePolicy)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setTrustAgentConfiguration(android.content.ComponentName,android.content.ComponentName,android.os.PersistableBundle,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setUninstallBlocked(android.content.ComponentName,java.lang.String,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setUserIcon(android.content.ComponentName,android.graphics.Bitmap)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setUserProvisioningState(int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void setUserRestriction(android.content.ComponentName,java.lang.String,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: boolean switchUser(android.content.ComponentName,android.os.UserHandle)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void uninstallCaCerts(android.content.ComponentName,[java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.MANAGE_CA_CERTIFICATES"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void uninstallPackageWithActiveAdmins(java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.MANAGE_DEVICE_ADMINS",
        "android.permission.MANAGE_USERS"
    ],
    "<com.android.server.devicepolicy.DevicePolicyManagerService: void wipeData(int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.display.DisplayManagerService$BinderService: void connectWifiDisplay(java.lang.String)>": [
        "android.permission.CONFIGURE_WIFI_DISPLAY"
    ],
    "<com.android.server.display.DisplayManagerService$BinderService: int createVirtualDisplay(android.hardware.display.IVirtualDisplayCallback,android.media.projection.IMediaProjection,java.lang.String,java.lang.String,int,int,int,android.view.Surface,int)>": [
        "android.permission.CAPTURE_SECURE_VIDEO_OUTPUT",
        "android.permission.CAPTURE_VIDEO_OUTPUT"
    ],
    "<com.android.server.display.DisplayManagerService$BinderService: void forgetWifiDisplay(java.lang.String)>": [
        "android.permission.CONFIGURE_WIFI_DISPLAY"
    ],
    "<com.android.server.display.DisplayManagerService$BinderService: void pauseWifiDisplay()>": [
        "android.permission.CONFIGURE_WIFI_DISPLAY"
    ],
    "<com.android.server.display.DisplayManagerService$BinderService: void renameWifiDisplay(java.lang.String,java.lang.String)>": [
        "android.permission.CONFIGURE_WIFI_DISPLAY"
    ],
    "<com.android.server.display.DisplayManagerService$BinderService: void requestColorMode(int,int)>": [
        "android.permission.CONFIGURE_DISPLAY_COLOR_MODE"
    ],
    "<com.android.server.display.DisplayManagerService$BinderService: void resumeWifiDisplay()>": [
        "android.permission.CONFIGURE_WIFI_DISPLAY"
    ],
    "<com.android.server.display.DisplayManagerService$BinderService: void startWifiDisplayScan()>": [
        "android.permission.CONFIGURE_WIFI_DISPLAY"
    ],
    "<com.android.server.display.DisplayManagerService$BinderService: void stopWifiDisplayScan()>": [
        "android.permission.CONFIGURE_WIFI_DISPLAY"
    ],
    "<com.android.server.dreams.DreamManagerService$BinderService: void awaken()>": [
        "android.permission.WRITE_DREAM_STATE"
    ],
    "<com.android.server.dreams.DreamManagerService$BinderService: void dream()>": [
        "android.permission.WRITE_DREAM_STATE"
    ],
    "<com.android.server.dreams.DreamManagerService$BinderService: android.content.ComponentName getDefaultDreamComponent()>": [
        "android.permission.READ_DREAM_STATE"
    ],
    "<com.android.server.dreams.DreamManagerService$BinderService: android.content.ComponentName[] getDreamComponents()>": [
        "android.permission.READ_DREAM_STATE"
    ],
    "<com.android.server.dreams.DreamManagerService$BinderService: boolean isDreaming()>": [
        "android.permission.READ_DREAM_STATE"
    ],
    "<com.android.server.dreams.DreamManagerService$BinderService: void setDreamComponents([android.content.ComponentName)>": [
        "android.permission.WRITE_DREAM_STATE"
    ],
    "<com.android.server.dreams.DreamManagerService$BinderService: void testDream(android.content.ComponentName)>": [
        "android.permission.WRITE_DREAM_STATE"
    ],
    "<com.android.server.ethernet.EthernetServiceImpl: void addListener(android.net.IEthernetServiceListener)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ethernet.EthernetServiceImpl: android.net.IpConfiguration getConfiguration()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ethernet.EthernetServiceImpl: boolean isAvailable()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ethernet.EthernetServiceImpl: void removeListener(android.net.IEthernetServiceListener)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ethernet.EthernetServiceImpl: void setConfiguration(android.net.IpConfiguration)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper: void authenticate(android.os.IBinder,long,int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String)>": [
        "android.permission.MANAGE_FINGERPRINT",
        "android.permission.USE_FINGERPRINT"
    ],
    "<com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper: void cancelAuthentication(android.os.IBinder,java.lang.String)>": [
        "android.permission.USE_FINGERPRINT"
    ],
    "<com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper: void cancelEnrollment(android.os.IBinder)>": [
        "android.permission.MANAGE_FINGERPRINT"
    ],
    "<com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper: void enroll(android.os.IBinder,[byte,int,android.hardware.fingerprint.IFingerprintServiceReceiver,int,java.lang.String)>": [
        "android.permission.MANAGE_FINGERPRINT"
    ],
    "<com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper: java.util.List getEnrolledFingerprints(int,java.lang.String)>": [
        "android.permission.USE_FINGERPRINT"
    ],
    "<com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper: boolean hasEnrolledFingerprints(int,java.lang.String)>": [
        "android.permission.USE_FINGERPRINT"
    ],
    "<com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper: boolean isHardwareDetected(long,java.lang.String)>": [
        "android.permission.USE_FINGERPRINT"
    ],
    "<com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper: int postEnroll(android.os.IBinder)>": [
        "android.permission.MANAGE_FINGERPRINT"
    ],
    "<com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper: long preEnroll(android.os.IBinder)>": [
        "android.permission.MANAGE_FINGERPRINT"
    ],
    "<com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper: void remove(android.os.IBinder,int,int,int,android.hardware.fingerprint.IFingerprintServiceReceiver)>": [
        "android.permission.MANAGE_FINGERPRINT"
    ],
    "<com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper: void rename(int,int,java.lang.String)>": [
        "android.permission.MANAGE_FINGERPRINT"
    ],
    "<com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper: void resetTimeout([byte)>": [
        "android.permission.RESET_FINGERPRINT_LOCKOUT"
    ],
    "<com.android.server.fingerprint.FingerprintService$FingerprintServiceWrapper: void setActiveUser(int)>": [
        "android.permission.MANAGE_FINGERPRINT"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: void addDeviceEventListener(android.hardware.hdmi.IHdmiDeviceEventListener)>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: void addHdmiMhlVendorCommandListener(android.hardware.hdmi.IHdmiMhlVendorCommandListener)>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: void addHotplugEventListener(android.hardware.hdmi.IHdmiHotplugEventListener)>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: void addSystemAudioModeChangeListener(android.hardware.hdmi.IHdmiSystemAudioModeChangeListener)>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: void addVendorCommandListener(android.hardware.hdmi.IHdmiVendorCommandListener,int)>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: boolean canChangeSystemAudioMode()>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: void clearTimerRecording(int,int,[byte)>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: void deviceSelect(int,android.hardware.hdmi.IHdmiControlCallback)>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: android.hardware.hdmi.HdmiDeviceInfo getActiveSource()>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: java.util.List getDeviceList()>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: java.util.List getInputDevices()>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: java.util.List getPortInfo()>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: int[] getSupportedTypes()>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: boolean getSystemAudioMode()>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: void oneTouchPlay(android.hardware.hdmi.IHdmiControlCallback)>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: void portSelect(int,android.hardware.hdmi.IHdmiControlCallback)>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: void queryDisplayStatus(android.hardware.hdmi.IHdmiControlCallback)>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: void removeHotplugEventListener(android.hardware.hdmi.IHdmiHotplugEventListener)>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: void removeSystemAudioModeChangeListener(android.hardware.hdmi.IHdmiSystemAudioModeChangeListener)>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: void sendKeyEvent(int,int,boolean)>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: void sendMhlVendorCommand(int,int,int,[byte)>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: void sendStandby(int,int)>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: void sendVendorCommand(int,int,[byte,boolean)>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: void setArcMode(boolean)>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: void setHdmiRecordListener(android.hardware.hdmi.IHdmiRecordListener)>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: void setInputChangeListener(android.hardware.hdmi.IHdmiInputChangeListener)>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: void setProhibitMode(boolean)>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: void setSystemAudioMode(boolean,android.hardware.hdmi.IHdmiControlCallback)>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: void setSystemAudioMute(boolean)>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: void setSystemAudioVolume(int,int,int)>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: void startOneTouchRecord(int,[byte)>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: void startTimerRecording(int,int,[byte)>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.hdmi.HdmiControlService$BinderService: void stopOneTouchRecord(int)>": [
        "android.permission.HDMI_CEC"
    ],
    "<com.android.server.input.InputManagerService: void addKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>": [
        "android.permission.SET_KEYBOARD_LAYOUT"
    ],
    "<com.android.server.input.InputManagerService: int isInTabletMode()>": [
        "android.permission.TABLET_MODE"
    ],
    "<com.android.server.input.InputManagerService: void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)>": [
        "android.permission.TABLET_MODE"
    ],
    "<com.android.server.input.InputManagerService: void removeKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>": [
        "android.permission.SET_KEYBOARD_LAYOUT"
    ],
    "<com.android.server.input.InputManagerService: void setCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,java.lang.String)>": [
        "android.permission.SET_KEYBOARD_LAYOUT"
    ],
    "<com.android.server.input.InputManagerService: void setKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier,android.view.inputmethod.InputMethodInfo,android.view.inputmethod.InputMethodSubtype,java.lang.String)>": [
        "android.permission.SET_KEYBOARD_LAYOUT"
    ],
    "<com.android.server.input.InputManagerService: void setTouchCalibrationForInputDevice(java.lang.String,int,android.hardware.input.TouchCalibration)>": [
        "android.permission.SET_INPUT_CALIBRATION"
    ],
    "<com.android.server.input.InputManagerService: void tryPointerSpeed(int)>": [
        "android.permission.SET_POINTER_SPEED"
    ],
    "<com.android.server.job.JobSchedulerService$JobSchedulerStub: int schedule(android.app.job.JobInfo)>": [
        "android.permission.CONNECTIVITY_INTERNAL",
        "android.permission.RECEIVE_BOOT_COMPLETED"
    ],
    "<com.android.server.job.JobSchedulerService$JobSchedulerStub: int scheduleAsPackage(android.app.job.JobInfo,java.lang.String,int,java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL",
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.media.MediaRouterService: void registerClientAsUser(android.media.IMediaRouterClient,java.lang.String,int)>": [
        "android.permission.CONFIGURE_WIFI_DISPLAY"
    ],
    "<com.android.server.media.MediaSessionRecord$SessionStub: void setFlags(int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.media.projection.MediaProjectionManagerService$BinderService: void addCallback(android.media.projection.IMediaProjectionWatcherCallback)>": [
        "android.permission.MANAGE_MEDIA_PROJECTION"
    ],
    "<com.android.server.media.projection.MediaProjectionManagerService$BinderService: android.media.projection.IMediaProjection createProjection(int,java.lang.String,int,boolean)>": [
        "android.permission.MANAGE_MEDIA_PROJECTION"
    ],
    "<com.android.server.media.projection.MediaProjectionManagerService$BinderService: android.media.projection.MediaProjectionInfo getActiveProjectionInfo()>": [
        "android.permission.MANAGE_MEDIA_PROJECTION"
    ],
    "<com.android.server.media.projection.MediaProjectionManagerService$BinderService: void removeCallback(android.media.projection.IMediaProjectionWatcherCallback)>": [
        "android.permission.MANAGE_MEDIA_PROJECTION"
    ],
    "<com.android.server.media.projection.MediaProjectionManagerService$BinderService: void stopActiveProjection()>": [
        "android.permission.MANAGE_MEDIA_PROJECTION"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: void addRestrictBackgroundWhitelistedUid(int)>": [
        "android.permission.MANAGE_NETWORK_POLICY"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: void addUidPolicy(int,int)>": [
        "android.permission.MANAGE_NETWORK_POLICY"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: void factoryReset(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL",
        "android.permission.MANAGE_NETWORK_POLICY",
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkPolicy[] getNetworkPolicies(java.lang.String)>": [
        "android.permission.MANAGE_NETWORK_POLICY",
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: boolean getRestrictBackground()>": [
        "android.permission.MANAGE_NETWORK_POLICY"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: int getRestrictBackgroundByCaller()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: int[] getRestrictBackgroundWhitelistedUids()>": [
        "android.permission.MANAGE_NETWORK_POLICY"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: int getUidPolicy(int)>": [
        "android.permission.MANAGE_NETWORK_POLICY"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: int[] getUidsWithPolicy(int)>": [
        "android.permission.MANAGE_NETWORK_POLICY"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: boolean isUidForeground(int)>": [
        "android.permission.MANAGE_NETWORK_POLICY"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: void onTetheringChanged(java.lang.String,boolean)>": [
        "android.permission.MANAGE_NETWORK_POLICY"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: void registerListener(android.net.INetworkPolicyListener)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: void removeRestrictBackgroundWhitelistedUid(int)>": [
        "android.permission.MANAGE_NETWORK_POLICY"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: void removeUidPolicy(int,int)>": [
        "android.permission.MANAGE_NETWORK_POLICY"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: void setConnectivityListener(android.net.INetworkPolicyListener)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: void setDeviceIdleMode(boolean)>": [
        "android.permission.MANAGE_NETWORK_POLICY"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: void setNetworkPolicies([android.net.NetworkPolicy)>": [
        "android.permission.MANAGE_NETWORK_POLICY"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: void setRestrictBackground(boolean)>": [
        "android.permission.MANAGE_NETWORK_POLICY"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: void setUidPolicy(int,int)>": [
        "android.permission.MANAGE_NETWORK_POLICY"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: void snoozeLimit(android.net.NetworkTemplate)>": [
        "android.permission.MANAGE_NETWORK_POLICY"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: void unregisterListener(android.net.INetworkPolicyListener)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.net.NetworkStatsService: void advisePersistThreshold(long)>": [
        "android.permission.MODIFY_NETWORK_ACCOUNTING"
    ],
    "<com.android.server.net.NetworkStatsService: void forceUpdate()>": [
        "android.permission.READ_NETWORK_USAGE_HISTORY"
    ],
    "<com.android.server.net.NetworkStatsService: void forceUpdateIfaces()>": [
        "android.permission.READ_NETWORK_USAGE_HISTORY"
    ],
    "<com.android.server.net.NetworkStatsService: android.net.NetworkStats getDataLayerSnapshotForUid(int)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.net.NetworkStatsService: long getNetworkTotalBytes(android.net.NetworkTemplate,long,long)>": [
        "android.permission.READ_NETWORK_USAGE_HISTORY"
    ],
    "<com.android.server.net.NetworkStatsService: void incrementOperationCount(int,int,int)>": [
        "android.permission.MODIFY_NETWORK_ACCOUNTING"
    ],
    "<com.android.server.net.NetworkStatsService: android.net.DataUsageRequest registerUsageCallback(java.lang.String,android.net.DataUsageRequest,android.os.Messenger,android.os.IBinder)>": [
        "android.permission.PACKAGE_USAGE_STATS",
        "android.permission.READ_NETWORK_USAGE_HISTORY"
    ],
    "<com.android.server.net.NetworkStatsService: void setUidForeground(int,boolean)>": [
        "android.permission.MODIFY_NETWORK_ACCOUNTING"
    ],
    "<com.android.server.pm.PackageInstallerService: int createSession(android.content.pm.PackageInstaller$SessionParams,java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageInstallerService: android.content.pm.ParceledListSlice getAllSessions(int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageInstallerService: android.content.pm.ParceledListSlice getMySessions(java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageInstallerService: void registerCallback(android.content.pm.IPackageInstallerCallback,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageInstallerService: void setPermissionsResult(int,boolean)>": [
        "android.permission.INSTALL_PACKAGES"
    ],
    "<com.android.server.pm.PackageInstallerService: void uninstall(java.lang.String,java.lang.String,int,android.content.IntentSender,int)>": [
        "android.permission.DELETE_PACKAGES",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: void addCrossProfileIntentFilter(android.content.IntentFilter,java.lang.String,int,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: void addOnPermissionsChangeListener(android.content.pm.IOnPermissionsChangeListener)>": [
        "android.permission.OBSERVE_GRANT_REVOKE_PERMISSIONS"
    ],
    "<com.android.server.pm.PackageManagerService: void addPreferredActivity(android.content.IntentFilter,int,[android.content.ComponentName,android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.SET_PREFERRED_APPLICATIONS"
    ],
    "<com.android.server.pm.PackageManagerService: boolean canForwardTo(android.content.Intent,java.lang.String,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: void clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)>": [
        "android.permission.CLEAR_APP_USER_DATA",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: void clearCrossProfileIntentFilters(int,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: void clearPackagePreferredActivities(java.lang.String)>": [
        "android.permission.SET_PREFERRED_APPLICATIONS"
    ],
    "<com.android.server.pm.PackageManagerService: void deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)>": [
        "android.permission.DELETE_CACHE_FILES",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: void deleteApplicationCacheFilesAsUser(java.lang.String,int,android.content.pm.IPackageDataObserver)>": [
        "android.permission.DELETE_CACHE_FILES",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: void deletePackage(java.lang.String,android.content.pm.IPackageDeleteObserver2,int,int)>": [
        "android.permission.DELETE_PACKAGES",
        "android.permission.GRANT_RUNTIME_PERMISSIONS",
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.REVOKE_RUNTIME_PERMISSIONS",
        "android.permission.SET_PREFERRED_APPLICATIONS"
    ],
    "<com.android.server.pm.PackageManagerService: void deletePackageAsUser(java.lang.String,android.content.pm.IPackageDeleteObserver,int,int)>": [
        "android.permission.DELETE_PACKAGES",
        "android.permission.GRANT_RUNTIME_PERMISSIONS",
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.REVOKE_RUNTIME_PERMISSIONS",
        "android.permission.SET_PREFERRED_APPLICATIONS"
    ],
    "<com.android.server.pm.PackageManagerService: void extendVerificationTimeout(int,int,long)>": [
        "android.permission.GRANT_RUNTIME_PERMISSIONS",
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.PACKAGE_VERIFICATION_AGENT",
        "android.permission.REVOKE_RUNTIME_PERMISSIONS",
        "android.permission.SET_PREFERRED_APPLICATIONS"
    ],
    "<com.android.server.pm.PackageManagerService: void flushPackageRestrictionsAsUser(int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: void freeStorage(java.lang.String,long,android.content.IntentSender)>": [
        "android.permission.CLEAR_APP_CACHE"
    ],
    "<com.android.server.pm.PackageManagerService: void freeStorageAndNotify(java.lang.String,long,android.content.pm.IPackageDataObserver)>": [
        "android.permission.CLEAR_APP_CACHE"
    ],
    "<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: int getApplicationEnabledSetting(java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: boolean getApplicationHiddenSettingAsUser(java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.MANAGE_USERS"
    ],
    "<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: int getComponentEnabledSetting(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: android.content.ComponentName getHomeActivities(java.util.List)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getInstalledPackages(int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo getLastChosenActivity(android.content.Intent,java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: int getMoveStatus(int)>": [
        "android.permission.MOUNT_UNMOUNT_FILESYSTEMS"
    ],
    "<com.android.server.pm.PackageManagerService: int[] getPackageGids(java.lang.String,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: void getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)>": [
        "android.permission.GET_PACKAGE_SIZE",
        "android.permission.GRANT_RUNTIME_PERMISSIONS",
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.REVOKE_RUNTIME_PERMISSIONS",
        "android.permission.SET_PREFERRED_APPLICATIONS"
    ],
    "<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: int getPermissionFlags(java.lang.String,java.lang.String,int)>": [
        "android.permission.GRANT_RUNTIME_PERMISSIONS",
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.REVOKE_RUNTIME_PERMISSIONS"
    ],
    "<com.android.server.pm.PackageManagerService: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()>": [
        "android.permission.PACKAGE_VERIFICATION_AGENT"
    ],
    "<com.android.server.pm.PackageManagerService: void grantRuntimePermission(java.lang.String,java.lang.String,int)>": [
        "android.permission.GRANT_RUNTIME_PERMISSIONS",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: int installExistingPackageAsUser(java.lang.String,int)>": [
        "android.permission.INSTALL_PACKAGES",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: void installPackageAsUser(java.lang.String,android.content.pm.IPackageInstallObserver2,int,java.lang.String,int)>": [
        "android.permission.GRANT_RUNTIME_PERMISSIONS",
        "android.permission.INSTALL_GRANT_RUNTIME_PERMISSIONS",
        "android.permission.INSTALL_PACKAGES",
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.REVOKE_RUNTIME_PERMISSIONS",
        "android.permission.SET_PREFERRED_APPLICATIONS"
    ],
    "<com.android.server.pm.PackageManagerService: boolean isEphemeralApplication(java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: boolean isPackageAvailable(java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: boolean isPackageSuspendedForUser(java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: boolean isPermissionRevokedByPolicy(java.lang.String,java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: int movePackage(java.lang.String,java.lang.String)>": [
        "android.permission.GRANT_RUNTIME_PERMISSIONS",
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.MOVE_PACKAGE",
        "android.permission.REVOKE_RUNTIME_PERMISSIONS",
        "android.permission.SET_PREFERRED_APPLICATIONS"
    ],
    "<com.android.server.pm.PackageManagerService: int movePrimaryStorage(java.lang.String)>": [
        "android.permission.MOVE_PACKAGE"
    ],
    "<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent,java.lang.String,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice queryIntentActivityOptions(android.content.ComponentName,[android.content.Intent,[java.lang.String,android.content.Intent,java.lang.String,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice queryIntentContentProviders(android.content.Intent,java.lang.String,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice queryIntentReceivers(android.content.Intent,java.lang.String,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice queryIntentServices(android.content.Intent,java.lang.String,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: void registerMoveCallback(android.content.pm.IPackageMoveObserver)>": [
        "android.permission.MOUNT_UNMOUNT_FILESYSTEMS"
    ],
    "<com.android.server.pm.PackageManagerService: void replacePreferredActivity(android.content.IntentFilter,int,[android.content.ComponentName,android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.SET_PREFERRED_APPLICATIONS"
    ],
    "<com.android.server.pm.PackageManagerService: void resetApplicationPreferences(int)>": [
        "android.permission.SET_PREFERRED_APPLICATIONS"
    ],
    "<com.android.server.pm.PackageManagerService: void resetRuntimePermissions()>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.REVOKE_RUNTIME_PERMISSIONS"
    ],
    "<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: void revokeRuntimePermission(java.lang.String,java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.REVOKE_RUNTIME_PERMISSIONS"
    ],
    "<com.android.server.pm.PackageManagerService: void setApplicationEnabledSetting(java.lang.String,int,int,int,java.lang.String)>": [
        "android.permission.CHANGE_COMPONENT_ENABLED_STATE",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: boolean setApplicationHiddenSettingAsUser(java.lang.String,boolean,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.MANAGE_USERS"
    ],
    "<com.android.server.pm.PackageManagerService: boolean setBlockUninstallForUser(java.lang.String,boolean,int)>": [
        "android.permission.DELETE_PACKAGES"
    ],
    "<com.android.server.pm.PackageManagerService: void setComponentEnabledSetting(android.content.ComponentName,int,int,int)>": [
        "android.permission.CHANGE_COMPONENT_ENABLED_STATE",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: boolean setDefaultBrowserPackageName(java.lang.String,int)>": [
        "android.permission.GRANT_RUNTIME_PERMISSIONS",
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.REVOKE_RUNTIME_PERMISSIONS",
        "android.permission.SET_PREFERRED_APPLICATIONS"
    ],
    "<com.android.server.pm.PackageManagerService: void setHomeActivity(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.SET_PREFERRED_APPLICATIONS"
    ],
    "<com.android.server.pm.PackageManagerService: boolean setInstallLocation(int)>": [
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.pm.PackageManagerService: void setLastChosenActivity(android.content.Intent,java.lang.String,int,android.content.IntentFilter,int,android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.SET_PREFERRED_APPLICATIONS"
    ],
    "<com.android.server.pm.PackageManagerService: void setPackageStoppedState(java.lang.String,boolean,int)>": [
        "android.permission.CHANGE_COMPONENT_ENABLED_STATE",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: java.lang.String[] setPackagesSuspendedAsUser([java.lang.String,boolean,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.MANAGE_USERS"
    ],
    "<com.android.server.pm.PackageManagerService: void setPermissionEnforced(java.lang.String,boolean)>": [
        "android.permission.GRANT_RUNTIME_PERMISSIONS"
    ],
    "<com.android.server.pm.PackageManagerService: boolean shouldShowRequestPermissionRationale(java.lang.String,java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: void systemReady()>": [
        "android.permission.CHANGE_COMPONENT_ENABLED_STATE",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: void unregisterMoveCallback(android.content.pm.IPackageMoveObserver)>": [
        "android.permission.MOUNT_UNMOUNT_FILESYSTEMS"
    ],
    "<com.android.server.pm.PackageManagerService: void updateExternalMediaStatus(boolean,boolean)>": [
        "android.permission.GRANT_RUNTIME_PERMISSIONS",
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.REVOKE_RUNTIME_PERMISSIONS",
        "android.permission.SET_PREFERRED_APPLICATIONS"
    ],
    "<com.android.server.pm.PackageManagerService: boolean updateIntentVerificationStatus(java.lang.String,int,int)>": [
        "android.permission.SET_PREFERRED_APPLICATIONS"
    ],
    "<com.android.server.pm.PackageManagerService: void updatePermissionFlags(java.lang.String,java.lang.String,int,int,int)>": [
        "android.permission.GRANT_RUNTIME_PERMISSIONS",
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.REVOKE_RUNTIME_PERMISSIONS"
    ],
    "<com.android.server.pm.PackageManagerService: void updatePermissionFlagsForAllApps(int,int,int)>": [
        "android.permission.GRANT_RUNTIME_PERMISSIONS",
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.REVOKE_RUNTIME_PERMISSIONS"
    ],
    "<com.android.server.pm.PackageManagerService: void verifyIntentFilter(int,int,java.util.List)>": [
        "android.permission.INTENT_FILTER_VERIFICATION_AGENT"
    ],
    "<com.android.server.pm.PackageManagerService: void verifyPendingInstall(int,int)>": [
        "android.permission.GRANT_RUNTIME_PERMISSIONS",
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.PACKAGE_VERIFICATION_AGENT",
        "android.permission.REVOKE_RUNTIME_PERMISSIONS",
        "android.permission.SET_PREFERRED_APPLICATIONS"
    ],
    "<com.android.server.pm.ShortcutService: void onApplicationActive(java.lang.String,int)>": [
        "android.permission.RESET_SHORTCUT_MANAGER_THROTTLING"
    ],
    "<com.android.server.power.PowerManagerService$BinderService: void acquireWakeLock(android.os.IBinder,int,java.lang.String,java.lang.String,android.os.WorkSource,java.lang.String)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<com.android.server.power.PowerManagerService$BinderService: void acquireWakeLockWithUid(android.os.IBinder,int,java.lang.String,java.lang.String,int)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<com.android.server.power.PowerManagerService$BinderService: void boostScreenBrightness(long)>": [
        "android.permission.DEVICE_POWER"
    ],
    "<com.android.server.power.PowerManagerService$BinderService: void crash(java.lang.String)>": [
        "android.permission.REBOOT"
    ],
    "<com.android.server.power.PowerManagerService$BinderService: void goToSleep(long,int,int)>": [
        "android.permission.DEVICE_POWER"
    ],
    "<com.android.server.power.PowerManagerService$BinderService: void nap(long)>": [
        "android.permission.DEVICE_POWER"
    ],
    "<com.android.server.power.PowerManagerService$BinderService: void powerHint(int,int)>": [
        "android.permission.DEVICE_POWER"
    ],
    "<com.android.server.power.PowerManagerService$BinderService: void reboot(boolean,java.lang.String,boolean)>": [
        "android.permission.REBOOT",
        "android.permission.RECOVERY"
    ],
    "<com.android.server.power.PowerManagerService$BinderService: void rebootSafeMode(boolean,boolean)>": [
        "android.permission.REBOOT"
    ],
    "<com.android.server.power.PowerManagerService$BinderService: void releaseWakeLock(android.os.IBinder,int)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<com.android.server.power.PowerManagerService$BinderService: void setAttentionLight(boolean,int)>": [
        "android.permission.DEVICE_POWER"
    ],
    "<com.android.server.power.PowerManagerService$BinderService: boolean setPowerSaveMode(boolean)>": [
        "android.permission.DEVICE_POWER"
    ],
    "<com.android.server.power.PowerManagerService$BinderService: void setTemporaryScreenAutoBrightnessAdjustmentSettingOverride(float)>": [
        "android.permission.DEVICE_POWER"
    ],
    "<com.android.server.power.PowerManagerService$BinderService: void setTemporaryScreenBrightnessSettingOverride(int)>": [
        "android.permission.DEVICE_POWER"
    ],
    "<com.android.server.power.PowerManagerService$BinderService: void shutdown(boolean,java.lang.String,boolean)>": [
        "android.permission.REBOOT"
    ],
    "<com.android.server.power.PowerManagerService$BinderService: void updateWakeLockUids(android.os.IBinder,[int)>": [
        "android.permission.UPDATE_DEVICE_STATS",
        "android.permission.WAKE_LOCK"
    ],
    "<com.android.server.power.PowerManagerService$BinderService: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource,java.lang.String)>": [
        "android.permission.UPDATE_DEVICE_STATS",
        "android.permission.WAKE_LOCK"
    ],
    "<com.android.server.power.PowerManagerService$BinderService: void userActivity(long,int,int)>": [
        "android.permission.DEVICE_POWER"
    ],
    "<com.android.server.power.PowerManagerService$BinderService: void wakeUp(long,java.lang.String,java.lang.String)>": [
        "android.permission.DEVICE_POWER"
    ],
    "<com.android.server.print.PrintManagerService$PrintManagerImpl: void addPrintJobStateChangeListener(android.print.IPrintJobStateChangeListener,int,int)>": [
        "com.android.printspooler.permission.ACCESS_ALL_PRINT_JOBS"
    ],
    "<com.android.server.print.PrintManagerService$PrintManagerImpl: void cancelPrintJob(android.print.PrintJobId,int,int)>": [
        "com.android.printspooler.permission.ACCESS_ALL_PRINT_JOBS"
    ],
    "<com.android.server.print.PrintManagerService$PrintManagerImpl: android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId,int,int)>": [
        "com.android.printspooler.permission.ACCESS_ALL_PRINT_JOBS"
    ],
    "<com.android.server.print.PrintManagerService$PrintManagerImpl: java.util.List getPrintJobInfos(int,int)>": [
        "com.android.printspooler.permission.ACCESS_ALL_PRINT_JOBS"
    ],
    "<com.android.server.print.PrintManagerService$PrintManagerImpl: android.os.Bundle print(java.lang.String,android.print.IPrintDocumentAdapter,android.print.PrintAttributes,java.lang.String,int,int)>": [
        "com.android.printspooler.permission.ACCESS_ALL_PRINT_JOBS"
    ],
    "<com.android.server.print.PrintManagerService$PrintManagerImpl: void restartPrintJob(android.print.PrintJobId,int,int)>": [
        "com.android.printspooler.permission.ACCESS_ALL_PRINT_JOBS"
    ],
    "<com.android.server.sip.SipService: void close(java.lang.String,java.lang.String)>": [
        "android.permission.USE_SIP"
    ],
    "<com.android.server.sip.SipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener,java.lang.String)>": [
        "android.permission.USE_SIP"
    ],
    "<com.android.server.sip.SipService: android.net.sip.SipProfile[] getListOfProfiles(java.lang.String)>": [
        "android.permission.USE_SIP"
    ],
    "<com.android.server.sip.SipService: android.net.sip.ISipSession getPendingSession(java.lang.String,java.lang.String)>": [
        "android.permission.USE_SIP"
    ],
    "<com.android.server.sip.SipService: boolean isOpened(java.lang.String,java.lang.String)>": [
        "android.permission.USE_SIP"
    ],
    "<com.android.server.sip.SipService: boolean isRegistered(java.lang.String,java.lang.String)>": [
        "android.permission.USE_SIP"
    ],
    "<com.android.server.sip.SipService: void open(android.net.sip.SipProfile,java.lang.String)>": [
        "android.permission.USE_SIP"
    ],
    "<com.android.server.sip.SipService: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener,java.lang.String)>": [
        "android.permission.USE_SIP"
    ],
    "<com.android.server.sip.SipService: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener,java.lang.String)>": [
        "android.permission.USE_SIP"
    ],
    "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: void deleteSoundModel(android.os.ParcelUuid)>": [
        "android.permission.MANAGE_SOUND_TRIGGER"
    ],
    "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: android.hardware.soundtrigger.SoundTrigger$GenericSoundModel getSoundModel(android.os.ParcelUuid)>": [
        "android.permission.MANAGE_SOUND_TRIGGER"
    ],
    "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: int startRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback,android.hardware.soundtrigger.SoundTrigger$RecognitionConfig)>": [
        "android.permission.MANAGE_SOUND_TRIGGER"
    ],
    "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: int stopRecognition(android.os.ParcelUuid,android.hardware.soundtrigger.IRecognitionStatusCallback)>": [
        "android.permission.MANAGE_SOUND_TRIGGER"
    ],
    "<com.android.server.soundtrigger.SoundTriggerService$SoundTriggerServiceStub: void updateSoundModel(android.hardware.soundtrigger.SoundTrigger$GenericSoundModel)>": [
        "android.permission.MANAGE_SOUND_TRIGGER"
    ],
    "<com.android.server.statusbar.StatusBarManagerService: void addTile(android.content.ComponentName)>": [
        "android.permission.STATUS_BAR"
    ],
    "<com.android.server.statusbar.StatusBarManagerService: void clearNotificationEffects()>": [
        "android.permission.STATUS_BAR_SERVICE"
    ],
    "<com.android.server.statusbar.StatusBarManagerService: void clickTile(android.content.ComponentName)>": [
        "android.permission.STATUS_BAR"
    ],
    "<com.android.server.statusbar.StatusBarManagerService: void collapsePanels()>": [
        "android.permission.EXPAND_STATUS_BAR"
    ],
    "<com.android.server.statusbar.StatusBarManagerService: void disable(int,android.os.IBinder,java.lang.String)>": [
        "android.permission.STATUS_BAR"
    ],
    "<com.android.server.statusbar.StatusBarManagerService: void disable2(int,android.os.IBinder,java.lang.String)>": [
        "android.permission.STATUS_BAR"
    ],
    "<com.android.server.statusbar.StatusBarManagerService: void disable2ForUser(int,android.os.IBinder,java.lang.String,int)>": [
        "android.permission.STATUS_BAR"
    ],
    "<com.android.server.statusbar.StatusBarManagerService: void disableForUser(int,android.os.IBinder,java.lang.String,int)>": [
        "android.permission.STATUS_BAR"
    ],
    "<com.android.server.statusbar.StatusBarManagerService: void expandNotificationsPanel()>": [
        "android.permission.EXPAND_STATUS_BAR"
    ],
    "<com.android.server.statusbar.StatusBarManagerService: void expandSettingsPanel(java.lang.String)>": [
        "android.permission.EXPAND_STATUS_BAR"
    ],
    "<com.android.server.statusbar.StatusBarManagerService: void handleSystemNavigationKey(int)>": [
        "android.permission.EXPAND_STATUS_BAR"
    ],
    "<com.android.server.statusbar.StatusBarManagerService: void onClearAllNotifications(int)>": [
        "android.permission.STATUS_BAR_SERVICE"
    ],
    "<com.android.server.statusbar.StatusBarManagerService: void onNotificationActionClick(java.lang.String,int)>": [
        "android.permission.STATUS_BAR_SERVICE"
    ],
    "<com.android.server.statusbar.StatusBarManagerService: void onNotificationClear(java.lang.String,java.lang.String,int,int)>": [
        "android.permission.STATUS_BAR_SERVICE"
    ],
    "<com.android.server.statusbar.StatusBarManagerService: void onNotificationClick(java.lang.String)>": [
        "android.permission.STATUS_BAR_SERVICE"
    ],
    "<com.android.server.statusbar.StatusBarManagerService: void onNotificationError(java.lang.String,java.lang.String,int,int,int,java.lang.String,int)>": [
        "android.permission.STATUS_BAR_SERVICE"
    ],
    "<com.android.server.statusbar.StatusBarManagerService: void onNotificationExpansionChanged(java.lang.String,boolean,boolean)>": [
        "android.permission.STATUS_BAR_SERVICE"
    ],
    "<com.android.server.statusbar.StatusBarManagerService: void onNotificationVisibilityChanged([com.android.internal.statusbar.NotificationVisibility,[com.android.internal.statusbar.NotificationVisibility)>": [
        "android.permission.STATUS_BAR_SERVICE"
    ],
    "<com.android.server.statusbar.StatusBarManagerService: void onPanelHidden()>": [
        "android.permission.STATUS_BAR_SERVICE"
    ],
    "<com.android.server.statusbar.StatusBarManagerService: void onPanelRevealed(boolean,int)>": [
        "android.permission.STATUS_BAR_SERVICE"
    ],
    "<com.android.server.statusbar.StatusBarManagerService: void registerStatusBar(com.android.internal.statusbar.IStatusBar,java.util.List,java.util.List,[int,java.util.List,android.graphics.Rect,android.graphics.Rect)>": [
        "android.permission.STATUS_BAR_SERVICE"
    ],
    "<com.android.server.statusbar.StatusBarManagerService: void remTile(android.content.ComponentName)>": [
        "android.permission.STATUS_BAR"
    ],
    "<com.android.server.statusbar.StatusBarManagerService: void removeIcon(java.lang.String)>": [
        "android.permission.STATUS_BAR"
    ],
    "<com.android.server.statusbar.StatusBarManagerService: void setIcon(java.lang.String,java.lang.String,int,int,java.lang.String)>": [
        "android.permission.STATUS_BAR"
    ],
    "<com.android.server.statusbar.StatusBarManagerService: void setIconVisibility(java.lang.String,boolean)>": [
        "android.permission.STATUS_BAR"
    ],
    "<com.android.server.statusbar.StatusBarManagerService: void setImeWindowStatus(android.os.IBinder,int,int,boolean)>": [
        "android.permission.STATUS_BAR"
    ],
    "<com.android.server.statusbar.StatusBarManagerService: void setSystemUiVisibility(int,int,java.lang.String)>": [
        "android.permission.STATUS_BAR_SERVICE"
    ],
    "<com.android.server.tv.TvInputManagerService$BinderService: android.media.tv.ITvInputHardware acquireTvInputHardware(int,android.media.tv.ITvInputHardwareCallback,android.media.tv.TvInputInfo,int)>": [
        "android.permission.TV_INPUT_HARDWARE"
    ],
    "<com.android.server.tv.TvInputManagerService$BinderService: void addBlockedRating(java.lang.String,int)>": [
        "android.permission.MODIFY_PARENTAL_CONTROLS"
    ],
    "<com.android.server.tv.TvInputManagerService$BinderService: boolean captureFrame(java.lang.String,android.view.Surface,android.media.tv.TvStreamConfig,int)>": [
        "android.permission.CAPTURE_TV_INPUT"
    ],
    "<com.android.server.tv.TvInputManagerService$BinderService: java.util.List getAvailableTvStreamConfigList(java.lang.String,int)>": [
        "android.permission.CAPTURE_TV_INPUT"
    ],
    "<com.android.server.tv.TvInputManagerService$BinderService: java.util.List getDvbDeviceList()>": [
        "android.permission.DVB_DEVICE"
    ],
    "<com.android.server.tv.TvInputManagerService$BinderService: java.util.List getHardwareList()>": [
        "android.permission.TV_INPUT_HARDWARE"
    ],
    "<com.android.server.tv.TvInputManagerService$BinderService: android.os.ParcelFileDescriptor openDvbDevice(android.media.tv.DvbDeviceInfo,int)>": [
        "android.permission.DVB_DEVICE"
    ],
    "<com.android.server.tv.TvInputManagerService$BinderService: void releaseTvInputHardware(int,android.media.tv.ITvInputHardware,int)>": [
        "android.permission.TV_INPUT_HARDWARE"
    ],
    "<com.android.server.tv.TvInputManagerService$BinderService: void removeBlockedRating(java.lang.String,int)>": [
        "android.permission.MODIFY_PARENTAL_CONTROLS"
    ],
    "<com.android.server.tv.TvInputManagerService$BinderService: void setParentalControlsEnabled(boolean,int)>": [
        "android.permission.MODIFY_PARENTAL_CONTROLS"
    ],
    "<com.android.server.tv.TvInputManagerService$BinderService: void unblockContent(android.os.IBinder,java.lang.String,int)>": [
        "android.permission.MODIFY_PARENTAL_CONTROLS"
    ],
    "<com.android.server.tv.TvInputManagerService$ServiceCallback: void addHardwareInput(int,android.media.tv.TvInputInfo)>": [
        "android.permission.TV_INPUT_HARDWARE"
    ],
    "<com.android.server.tv.TvInputManagerService$ServiceCallback: void addHdmiInput(int,android.media.tv.TvInputInfo)>": [
        "android.permission.TV_INPUT_HARDWARE"
    ],
    "<com.android.server.tv.TvInputManagerService$ServiceCallback: void removeHardwareInput(java.lang.String)>": [
        "android.permission.TV_INPUT_HARDWARE"
    ],
    "<com.android.server.usage.UsageStatsService$BinderService: void onCarrierPrivilegedAppsChanged()>": [
        "android.permission.BIND_CARRIER_SERVICES"
    ],
    "<com.android.server.usage.UsageStatsService$BinderService: android.content.pm.ParceledListSlice queryConfigurationStats(int,long,long,java.lang.String)>": [
        "android.permission.PACKAGE_USAGE_STATS"
    ],
    "<com.android.server.usage.UsageStatsService$BinderService: android.app.usage.UsageEvents queryEvents(long,long,java.lang.String)>": [
        "android.permission.PACKAGE_USAGE_STATS"
    ],
    "<com.android.server.usage.UsageStatsService$BinderService: android.content.pm.ParceledListSlice queryUsageStats(int,long,long,java.lang.String)>": [
        "android.permission.PACKAGE_USAGE_STATS"
    ],
    "<com.android.server.usage.UsageStatsService$BinderService: void setAppInactive(java.lang.String,boolean,int)>": [
        "android.permission.CHANGE_APP_IDLE_STATE"
    ],
    "<com.android.server.usb.UsbService: void allowUsbDebugging(boolean,java.lang.String)>": [
        "android.permission.MANAGE_USB"
    ],
    "<com.android.server.usb.UsbService: void clearDefaults(java.lang.String,int)>": [
        "android.permission.MANAGE_USB"
    ],
    "<com.android.server.usb.UsbService: void clearUsbDebuggingKeys()>": [
        "android.permission.MANAGE_USB"
    ],
    "<com.android.server.usb.UsbService: void denyUsbDebugging()>": [
        "android.permission.MANAGE_USB"
    ],
    "<com.android.server.usb.UsbService: android.hardware.usb.UsbPortStatus getPortStatus(java.lang.String)>": [
        "android.permission.MANAGE_USB"
    ],
    "<com.android.server.usb.UsbService: android.hardware.usb.UsbPort[] getPorts()>": [
        "android.permission.MANAGE_USB"
    ],
    "<com.android.server.usb.UsbService: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)>": [
        "android.permission.MANAGE_USB"
    ],
    "<com.android.server.usb.UsbService: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>": [
        "android.permission.MANAGE_USB"
    ],
    "<com.android.server.usb.UsbService: boolean hasDefaults(java.lang.String,int)>": [
        "android.permission.MANAGE_USB"
    ],
    "<com.android.server.usb.UsbService: boolean isFunctionEnabled(java.lang.String)>": [
        "android.permission.MANAGE_USB"
    ],
    "<com.android.server.usb.UsbService: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,int)>": [
        "android.permission.MANAGE_USB"
    ],
    "<com.android.server.usb.UsbService: void setCurrentFunction(java.lang.String)>": [
        "android.permission.MANAGE_USB"
    ],
    "<com.android.server.usb.UsbService: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,int)>": [
        "android.permission.MANAGE_USB"
    ],
    "<com.android.server.usb.UsbService: void setPortRoles(java.lang.String,int,int)>": [
        "android.permission.MANAGE_USB"
    ],
    "<com.android.server.usb.UsbService: void setUsbDataUnlocked(boolean)>": [
        "android.permission.MANAGE_USB"
    ],
    "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: boolean activeServiceSupportsAssist()>": [
        "android.permission.ACCESS_VOICE_INTERACTION_SERVICE"
    ],
    "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: boolean activeServiceSupportsLaunchFromKeyguard()>": [
        "android.permission.ACCESS_VOICE_INTERACTION_SERVICE"
    ],
    "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: int deleteKeyphraseSoundModel(int,java.lang.String)>": [
        "android.permission.MANAGE_VOICE_KEYPHRASES"
    ],
    "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: android.content.ComponentName getActiveServiceComponentName()>": [
        "android.permission.ACCESS_VOICE_INTERACTION_SERVICE"
    ],
    "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel getKeyphraseSoundModel(int,java.lang.String)>": [
        "android.permission.MANAGE_VOICE_KEYPHRASES"
    ],
    "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void hideCurrentSession()>": [
        "android.permission.ACCESS_VOICE_INTERACTION_SERVICE"
    ],
    "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: boolean isSessionRunning()>": [
        "android.permission.ACCESS_VOICE_INTERACTION_SERVICE"
    ],
    "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void launchVoiceAssistFromKeyguard()>": [
        "android.permission.ACCESS_VOICE_INTERACTION_SERVICE"
    ],
    "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void onLockscreenShown()>": [
        "android.permission.ACCESS_VOICE_INTERACTION_SERVICE"
    ],
    "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: void registerVoiceInteractionSessionListener(com.android.internal.app.IVoiceInteractionSessionListener)>": [
        "android.permission.ACCESS_VOICE_INTERACTION_SERVICE"
    ],
    "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: boolean showSessionForActiveService(android.os.Bundle,int,com.android.internal.app.IVoiceInteractionSessionShowCallback,android.os.IBinder)>": [
        "android.permission.ACCESS_VOICE_INTERACTION_SERVICE"
    ],
    "<com.android.server.voiceinteraction.VoiceInteractionManagerService$VoiceInteractionManagerServiceStub: int updateKeyphraseSoundModel(android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel)>": [
        "android.permission.MANAGE_VOICE_KEYPHRASES"
    ],
    "<com.android.server.wallpaper.WallpaperManagerService: void clearWallpaper(java.lang.String,int,int)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<com.android.server.wallpaper.WallpaperManagerService: void setDimensionHints(int,int,java.lang.String)>": [
        "android.permission.SET_WALLPAPER_HINTS"
    ],
    "<com.android.server.wallpaper.WallpaperManagerService: void setDisplayPadding(android.graphics.Rect,java.lang.String)>": [
        "android.permission.SET_WALLPAPER_HINTS"
    ],
    "<com.android.server.wallpaper.WallpaperManagerService: boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)>": [
        "android.permission.INTERNAL_SYSTEM_WINDOW"
    ],
    "<com.android.server.wallpaper.WallpaperManagerService: android.os.ParcelFileDescriptor setWallpaper(java.lang.String,java.lang.String,android.graphics.Rect,boolean,android.os.Bundle,int,android.app.IWallpaperManagerCallback,int)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<com.android.server.wallpaper.WallpaperManagerService: void setWallpaperComponent(android.content.ComponentName)>": [
        "android.permission.SET_WALLPAPER_COMPONENT"
    ],
    "<com.android.server.wallpaper.WallpaperManagerService: void setWallpaperComponentChecked(android.content.ComponentName,java.lang.String,int)>": [
        "android.permission.SET_WALLPAPER_COMPONENT"
    ],
    "<com.android.server.webkit.WebViewUpdateService$BinderService: java.lang.String changeProviderAndSetting(java.lang.String)>": [
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.webkit.WebViewUpdateService$BinderService: void enableFallbackLogic(boolean)>": [
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.wifi.WifiServiceImpl: void acquireMulticastLock(android.os.IBinder,java.lang.String)>": [
        "android.permission.CHANGE_WIFI_MULTICAST_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)>": [
        "android.permission.UPDATE_DEVICE_STATS",
        "android.permission.WAKE_LOCK"
    ],
    "<com.android.server.wifi.WifiServiceImpl: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: void addToBlacklist(java.lang.String)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: void clearBlacklist()>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: void disableEphemeralNetwork(java.lang.String)>": [
        "android.permission.ACCESS_WIFI_STATE",
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: boolean disableNetwork(int)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: void disconnect()>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: void enableAggressiveHandover(int)>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: boolean enableNetwork(int,boolean)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: void enableVerboseLogging(int)>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: void enableWifiConnectivityManager(boolean)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.wifi.WifiServiceImpl: void factoryReset()>": [
        "android.permission.CHANGE_WIFI_STATE",
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.wifi.WifiServiceImpl: int getAggressiveHandover()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: int getAllowScansWithTraffic()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: java.lang.String getConfigFile()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: java.util.List getConfiguredNetworks()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: android.net.wifi.WifiInfo getConnectionInfo()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: android.net.wifi.WifiConnectionStatistics getConnectionStatistics()>": [
        "android.permission.ACCESS_WIFI_STATE",
        "android.permission.READ_WIFI_CREDENTIAL"
    ],
    "<com.android.server.wifi.WifiServiceImpl: java.lang.String getCountryCode()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.wifi.WifiServiceImpl: android.net.Network getCurrentNetwork()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: android.net.DhcpInfo getDhcpInfo()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: boolean getEnableAutoJoinWhenAssociated()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: int getFrequencyBand()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: android.net.wifi.WifiConfiguration getMatchingWifiConfig(android.net.wifi.ScanResult)>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: java.util.List getPrivilegedConfiguredNetworks()>": [
        "android.permission.ACCESS_WIFI_STATE",
        "android.permission.READ_WIFI_CREDENTIAL"
    ],
    "<com.android.server.wifi.WifiServiceImpl: java.util.List getScanResults(java.lang.String)>": [
        "android.permission.ACCESS_WIFI_STATE",
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.PEERS_MAC_ADDRESS",
        "android.permission.SCORE_NETWORKS"
    ],
    "<com.android.server.wifi.WifiServiceImpl: int getSupportedFeatures()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: int getVerboseLoggingLevel()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: android.net.wifi.WifiConfiguration getWifiApConfiguration()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: int getWifiApEnabledState()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: int getWifiEnabledState()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: android.os.Messenger getWifiServiceMessenger()>": [
        "android.permission.ACCESS_WIFI_STATE",
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: java.lang.String getWpsNfcConfigurationToken(int)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.wifi.WifiServiceImpl: void initializeMulticastFiltering()>": [
        "android.permission.CHANGE_WIFI_MULTICAST_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: boolean isMulticastEnabled()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: boolean isScanAlwaysAvailable()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: boolean pingSupplicant()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: void reassociate()>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: void reconnect()>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: void releaseMulticastLock()>": [
        "android.permission.CHANGE_WIFI_MULTICAST_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: boolean releaseWifiLock(android.os.IBinder)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<com.android.server.wifi.WifiServiceImpl: boolean removeNetwork(int)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: android.net.wifi.WifiActivityEnergyInfo reportActivityInfo()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: void requestActivityInfo(android.os.ResultReceiver)>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: boolean saveConfiguration()>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: void setAllowScansWithTraffic(int)>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: void setCountryCode(java.lang.String,boolean)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.wifi.WifiServiceImpl: boolean setEnableAutoJoinWhenAssociated(boolean)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: void setFrequencyBand(int,boolean)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)>": [
        "android.permission.CHANGE_WIFI_STATE",
        "android.permission.TETHER_PRIVILEGED"
    ],
    "<com.android.server.wifi.WifiServiceImpl: boolean setWifiEnabled(boolean)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiServiceImpl: void startScan(android.net.wifi.ScanSettings,android.os.WorkSource)>": [
        "android.permission.CHANGE_WIFI_STATE",
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.wifi.WifiServiceImpl: void updateWifiLockWorkSource(android.os.IBinder,android.os.WorkSource)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.wifi.p2p.WifiP2pServiceImpl: android.os.Messenger getMessenger()>": [
        "android.permission.ACCESS_WIFI_STATE",
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.p2p.WifiP2pServiceImpl: android.os.Messenger getP2pStateMachineMessenger()>": [
        "android.permission.ACCESS_WIFI_STATE",
        "android.permission.CHANGE_WIFI_STATE",
        "android.permission.CONNECTIVITY_INTERNAL",
        "android.permission.LOCATION_HARDWARE"
    ],
    "<com.android.server.wifi.p2p.WifiP2pServiceImpl: void setMiracastMode(int)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.wm.WindowManagerService: void addAppToken(int,android.view.IApplicationToken,int,int,int,boolean,boolean,int,int,boolean,boolean,android.graphics.Rect,android.content.res.Configuration,int,boolean,boolean,int,int)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void addWindowToken(android.os.IBinder,int)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void clearForcedDisplayDensityForUser(int,int)>": [
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.wm.WindowManagerService: void clearForcedDisplaySize(int)>": [
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.wm.WindowManagerService: boolean clearWindowContentFrameStats(android.os.IBinder)>": [
        "android.permission.FRAME_STATS"
    ],
    "<com.android.server.wm.WindowManagerService: void disableKeyguard(android.os.IBinder,java.lang.String)>": [
        "android.permission.DISABLE_KEYGUARD"
    ],
    "<com.android.server.wm.WindowManagerService: void dismissKeyguard()>": [
        "android.permission.DISABLE_KEYGUARD"
    ],
    "<com.android.server.wm.WindowManagerService: void executeAppTransition()>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)>": [
        "android.permission.DISABLE_KEYGUARD"
    ],
    "<com.android.server.wm.WindowManagerService: void freezeRotation(int)>": [
        "android.permission.SET_ORIENTATION"
    ],
    "<com.android.server.wm.WindowManagerService: android.view.WindowContentFrameStats getWindowContentFrameStats(android.os.IBinder)>": [
        "android.permission.FRAME_STATS"
    ],
    "<com.android.server.wm.WindowManagerService: boolean isViewServerRunning()>": [
        "android.permission.DUMP"
    ],
    "<com.android.server.wm.WindowManagerService: void keyguardGoingAway(int)>": [
        "android.permission.DISABLE_KEYGUARD"
    ],
    "<com.android.server.wm.WindowManagerService: void lockNow(android.os.Bundle)>": [
        "android.permission.DEVICE_POWER"
    ],
    "<com.android.server.wm.WindowManagerService: void notifyAppResumed(android.os.IBinder,boolean,boolean)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void notifyAppStopped(android.os.IBinder)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void pauseKeyDispatching(android.os.IBinder)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void prepareAppTransition(int,boolean)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void reenableKeyguard(android.os.IBinder)>": [
        "android.permission.DISABLE_KEYGUARD"
    ],
    "<com.android.server.wm.WindowManagerService: void registerDockedStackListener(android.view.IDockedStackListener)>": [
        "android.permission.REGISTER_WINDOW_MANAGER_LISTENERS"
    ],
    "<com.android.server.wm.WindowManagerService: void registerShortcutKey(long,com.android.internal.policy.IShortcutService)>": [
        "android.permission.REGISTER_WINDOW_MANAGER_LISTENERS"
    ],
    "<com.android.server.wm.WindowManagerService: void removeAppToken(android.os.IBinder)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void removeWindowToken(android.os.IBinder)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: boolean requestAssistScreenshot(com.android.internal.app.IAssistScreenshotReceiver)>": [
        "android.permission.READ_FRAME_BUFFER"
    ],
    "<com.android.server.wm.WindowManagerService: void resumeKeyDispatching(android.os.IBinder)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: android.graphics.Bitmap screenshotApplications(android.os.IBinder,int,int,int,float)>": [
        "android.permission.READ_FRAME_BUFFER"
    ],
    "<com.android.server.wm.WindowManagerService: android.graphics.Bitmap screenshotWallpaper()>": [
        "android.permission.READ_FRAME_BUFFER"
    ],
    "<com.android.server.wm.WindowManagerService: void setAnimationScale(int,float)>": [
        "android.permission.SET_ANIMATION_SCALE"
    ],
    "<com.android.server.wm.WindowManagerService: void setAnimationScales([float)>": [
        "android.permission.SET_ANIMATION_SCALE"
    ],
    "<com.android.server.wm.WindowManagerService: void setAppOrientation(android.view.IApplicationToken,int)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: boolean setAppStartingWindow(android.os.IBinder,java.lang.String,int,android.content.res.CompatibilityInfo,java.lang.CharSequence,int,int,int,int,android.os.IBinder,boolean)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void setAppTask(android.os.IBinder,int,int,android.graphics.Rect,android.content.res.Configuration,int,boolean)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void setAppVisibility(android.os.IBinder,boolean)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void setEventDispatching(boolean)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void setFocusedApp(android.os.IBinder,boolean)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void setForcedDisplayDensityForUser(int,int,int)>": [
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.wm.WindowManagerService: void setForcedDisplayScalingMode(int,int)>": [
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.wm.WindowManagerService: void setForcedDisplaySize(int,int,int)>": [
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.wm.WindowManagerService: int[] setNewConfiguration(android.content.res.Configuration)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void setOverscan(int,int,int,int,int)>": [
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.wm.WindowManagerService: void setRecentsVisibility(boolean)>": [
        "android.permission.STATUS_BAR"
    ],
    "<com.android.server.wm.WindowManagerService: void setTvPipVisibility(boolean)>": [
        "android.permission.STATUS_BAR"
    ],
    "<com.android.server.wm.WindowManagerService: void startAppFreezingScreen(android.os.IBinder,int)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void startFreezingScreen(int,int)>": [
        "android.permission.FREEZE_SCREEN"
    ],
    "<com.android.server.wm.WindowManagerService: boolean startViewServer(int)>": [
        "android.permission.DUMP"
    ],
    "<com.android.server.wm.WindowManagerService: void statusBarVisibilityChanged(int)>": [
        "android.permission.STATUS_BAR"
    ],
    "<com.android.server.wm.WindowManagerService: void stopAppFreezingScreen(android.os.IBinder,boolean)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void stopFreezingScreen()>": [
        "android.permission.FREEZE_SCREEN"
    ],
    "<com.android.server.wm.WindowManagerService: boolean stopViewServer()>": [
        "android.permission.DUMP"
    ],
    "<com.android.server.wm.WindowManagerService: void thawRotation()>": [
        "android.permission.SET_ORIENTATION"
    ],
    "<com.android.server.wm.WindowManagerService: android.content.res.Configuration updateOrientationFromAppTokens(android.content.res.Configuration,android.os.IBinder)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<android.accounts.AccountAuthenticatorActivity: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.accounts.AccountAuthenticatorActivity: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.accounts.AccountAuthenticatorActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.accounts.AccountAuthenticatorActivity: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.accounts.AccountAuthenticatorActivity: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.accounts.AccountAuthenticatorActivity: boolean stopService(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.accounts.AccountAuthenticatorActivity: void unbindService(android.content.ServiceConnection)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.Activity: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.Activity: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.Activity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.Activity: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.Activity: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.Activity: void stopLockTask()>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.Activity: boolean stopService(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.Activity: void unbindService(android.content.ServiceConnection)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.ActivityGroup: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.ActivityGroup: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.ActivityGroup: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.ActivityGroup: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.ActivityGroup: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.ActivityGroup: boolean stopService(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.ActivityGroup: void unbindService(android.content.ServiceConnection)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.ActivityManager: java.util.List getRecentTasks(int,int)>": [
        "android.permission.GET_TASKS"
    ],
    "<android.app.ActivityManager: java.util.List getRunningAppProcesses()>": [
        "android.permission.GET_TASKS"
    ],
    "<android.app.ActivityManager: java.util.List getRunningTasks(int)>": [
        "android.permission.GET_TASKS"
    ],
    "<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)>": [
        "android.permission.KILL_BACKGROUND_PROCESSES"
    ],
    "<android.app.ActivityManager: void moveTaskToFront(int,int)>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.REORDER_TASKS"
    ],
    "<android.app.ActivityManager: void moveTaskToFront(int,int,android.os.Bundle)>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.REORDER_TASKS"
    ],
    "<android.app.ActivityManager: void restartPackage(java.lang.String)>": [
        "android.permission.KILL_BACKGROUND_PROCESSES"
    ],
    "<android.app.AliasActivity: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.AliasActivity: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.AliasActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.AliasActivity: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.AliasActivity: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.AliasActivity: boolean stopService(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.AliasActivity: void unbindService(android.content.ServiceConnection)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.Application: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.Application: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.Application: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.Application: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.Application: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.Application: boolean stopService(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.Application: void unbindService(android.content.ServiceConnection)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.ExpandableListActivity: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.ExpandableListActivity: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.ExpandableListActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.ExpandableListActivity: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.ExpandableListActivity: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.ExpandableListActivity: boolean stopService(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.ExpandableListActivity: void unbindService(android.content.ServiceConnection)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.JobSchedulerImpl: int schedule(android.app.job.JobInfo)>": [
        "android.permission.RECEIVE_BOOT_COMPLETED"
    ],
    "<android.app.KeyguardManager$KeyguardLock: void disableKeyguard()>": [
        "android.permission.DISABLE_KEYGUARD"
    ],
    "<android.app.KeyguardManager$KeyguardLock: void reenableKeyguard()>": [
        "android.permission.DISABLE_KEYGUARD"
    ],
    "<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)>": [
        "android.permission.DISABLE_KEYGUARD"
    ],
    "<android.app.ListActivity: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.ListActivity: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.ListActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.ListActivity: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.ListActivity: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.ListActivity: boolean stopService(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.ListActivity: void unbindService(android.content.ServiceConnection)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.NativeActivity: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.NativeActivity: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.NativeActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.NativeActivity: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.NativeActivity: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.NativeActivity: boolean stopService(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.NativeActivity: void unbindService(android.content.ServiceConnection)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.Service: void stopSelf()>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.Service: void stopSelf(int)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.Service: boolean stopSelfResult(int)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.TabActivity: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.TabActivity: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.TabActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.TabActivity: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.TabActivity: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.TabActivity: boolean stopService(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.TabActivity: void unbindService(android.content.ServiceConnection)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.WallpaperManager: void clear()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.WallpaperManager: void clear(int)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.WallpaperManager: void setBitmap(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.WallpaperManager: int setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.WallpaperManager: int setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean,int)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.WallpaperManager: void setResource(int)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.WallpaperManager: int setResource(int,int)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.WallpaperManager: void setStream(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.WallpaperManager: int setStream(java.io.InputStream,android.graphics.Rect,boolean)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.WallpaperManager: int setStream(java.io.InputStream,android.graphics.Rect,boolean,int)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.WallpaperManager: void suggestDesiredDimensions(int,int)>": [
        "android.permission.SET_WALLPAPER_HINTS"
    ],
    "<android.app.admin.DevicePolicyManager: java.lang.String getWifiMacAddress(android.content.ComponentName)>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<android.app.backup.BackupAgentHelper: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.backup.BackupAgentHelper: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.backup.BackupAgentHelper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.backup.BackupAgentHelper: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.backup.BackupAgentHelper: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.backup.BackupAgentHelper: boolean stopService(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.backup.BackupAgentHelper: void unbindService(android.content.ServiceConnection)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.backup.BackupManager: void dataChanged()>": [
        "android.permission.RECEIVE_BOOT_COMPLETED"
    ],
    "<android.app.backup.BackupManager: void dataChanged(java.lang.String)>": [
        "android.permission.RECEIVE_BOOT_COMPLETED"
    ],
    "<android.bluetooth.BluetoothA2dp: java.util.List getConnectedDevices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothA2dp: int getConnectionState(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothA2dp: java.util.List getDevicesMatchingConnectionStates([int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothA2dp: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: boolean cancelDiscovery()>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<android.bluetooth.BluetoothAdapter: void closeProfileProxy(int,android.bluetooth.BluetoothProfile)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.bluetooth.BluetoothAdapter: boolean disable()>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<android.bluetooth.BluetoothAdapter: boolean enable()>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: android.bluetooth.le.BluetoothLeAdvertiser getBluetoothLeAdvertiser()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: android.bluetooth.le.BluetoothLeScanner getBluetoothLeScanner()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: java.util.Set getBondedDevices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: java.lang.String getName()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: int getProfileConnectionState(int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: boolean getProfileProxy(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener,int)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.bluetooth.BluetoothAdapter: int getScanMode()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: int getState()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: boolean isDiscovering()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: boolean isEnabled()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: boolean isMultipleAdvertisementSupported()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: boolean isOffloadedFilteringSupported()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: boolean isOffloadedScanBatchingSupported()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: boolean setName(java.lang.String)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<android.bluetooth.BluetoothAdapter: boolean startDiscovery()>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<android.bluetooth.BluetoothAdapter: boolean startLeScan([java.util.UUID,android.bluetooth.BluetoothAdapter$LeScanCallback)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: boolean startLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: void stopLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothGatt connectGatt(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothGatt connectGatt(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothDevice: boolean createBond()>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createInsecureRfcommSocketToServiceRecord(java.util.UUID)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createRfcommSocketToServiceRecord(java.util.UUID)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothDevice: boolean fetchUuidsWithSdp()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothClass getBluetoothClass()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothDevice: int getBondState()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothDevice: java.lang.String getName()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothDevice: int getType()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothDevice: android.os.ParcelUuid[] getUuids()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothDevice: boolean setPin([byte)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<android.bluetooth.BluetoothGatt: void abortReliableWrite()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGatt: void abortReliableWrite(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGatt: boolean beginReliableWrite()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGatt: void close()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGatt: boolean connect()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGatt: void disconnect()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGatt: boolean discoverServices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGatt: boolean executeReliableWrite()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGatt: boolean readCharacteristic(android.bluetooth.BluetoothGattCharacteristic)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGatt: boolean readDescriptor(android.bluetooth.BluetoothGattDescriptor)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGatt: boolean readRemoteRssi()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGatt: boolean requestConnectionPriority(int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGatt: boolean requestMtu(int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGatt: boolean setCharacteristicNotification(android.bluetooth.BluetoothGattCharacteristic,boolean)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGatt: boolean writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGatt: boolean writeDescriptor(android.bluetooth.BluetoothGattDescriptor)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGattServer: boolean addService(android.bluetooth.BluetoothGattService)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGattServer: void cancelConnection(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGattServer: void clearServices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGattServer: void close()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGattServer: boolean connect(android.bluetooth.BluetoothDevice,boolean)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGattServer: boolean notifyCharacteristicChanged(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothGattCharacteristic,boolean)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGattServer: boolean removeService(android.bluetooth.BluetoothGattService)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGattServer: boolean sendResponse(android.bluetooth.BluetoothDevice,int,int,int,[byte)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothHeadset: java.util.List getConnectedDevices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothHeadset: java.util.List getDevicesMatchingConnectionStates([int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothHeadset: boolean isAudioConnected(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothHeadset: boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice,java.lang.String,java.lang.String)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<android.bluetooth.BluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<android.bluetooth.BluetoothHeadset: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<android.bluetooth.BluetoothHealth: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothHealth: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothHealth: java.util.List getConnectedDevices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothHealth: int getConnectionState(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothHealth: java.util.List getDevicesMatchingConnectionStates([int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothHealth: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothHealth: boolean registerSinkAppConfiguration(java.lang.String,int,android.bluetooth.BluetoothHealthCallback)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothHealth: boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothManager: java.util.List getConnectedDevices(int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothManager: int getConnectionState(android.bluetooth.BluetoothDevice,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothManager: java.util.List getDevicesMatchingConnectionStates(int,[int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothManager: android.bluetooth.BluetoothGattServer openGattServer(android.content.Context,android.bluetooth.BluetoothGattServerCallback)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothSocket: void connect()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.le.BluetoothLeAdvertiser: void startAdvertising(android.bluetooth.le.AdvertiseSettings,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseCallback)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.le.BluetoothLeAdvertiser: void startAdvertising(android.bluetooth.le.AdvertiseSettings,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseData,android.bluetooth.le.AdvertiseCallback)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.le.BluetoothLeAdvertiser: void stopAdvertising(android.bluetooth.le.AdvertiseCallback)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<android.bluetooth.le.BluetoothLeScanner: void flushPendingScanResults(android.bluetooth.le.ScanCallback)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.le.BluetoothLeScanner: void startScan(android.bluetooth.le.ScanCallback)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.le.BluetoothLeScanner: void startScan(java.util.List,android.bluetooth.le.ScanSettings,android.bluetooth.le.ScanCallback)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.le.BluetoothLeScanner: void stopScan(android.bluetooth.le.ScanCallback)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<android.content.ContextWrapper: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.content.ContextWrapper: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.content.ContextWrapper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.content.ContextWrapper: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.content.ContextWrapper: boolean stopService(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.content.ContextWrapper: void unbindService(android.content.ServiceConnection)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.content.MutableContextWrapper: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.content.MutableContextWrapper: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.content.MutableContextWrapper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.content.MutableContextWrapper: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.content.MutableContextWrapper: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.content.MutableContextWrapper: boolean stopService(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.content.MutableContextWrapper: void unbindService(android.content.ServiceConnection)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.hardware.ConsumerIrManager: android.hardware.ConsumerIrManager$CarrierFrequencyRange[] getCarrierFrequencies()>": [
        "android.permission.TRANSMIT_IR"
    ],
    "<android.hardware.ConsumerIrManager: void transmit(int,[int)>": [
        "android.permission.TRANSMIT_IR"
    ],
    "<android.hardware.fingerprint.FingerprintManager: void authenticate(android.hardware.fingerprint.FingerprintManager$CryptoObject,android.os.CancellationSignal,int,android.hardware.fingerprint.FingerprintManager$AuthenticationCallback,android.os.Handler)>": [
        "android.permission.USE_FINGERPRINT"
    ],
    "<android.hardware.fingerprint.FingerprintManager: boolean hasEnrolledFingerprints()>": [
        "android.permission.USE_FINGERPRINT"
    ],
    "<android.hardware.fingerprint.FingerprintManager: boolean isHardwareDetected()>": [
        "android.permission.USE_FINGERPRINT"
    ],
    "<android.inputmethodservice.InputMethodService: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.inputmethodservice.InputMethodService: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.inputmethodservice.InputMethodService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.inputmethodservice.InputMethodService: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.inputmethodservice.InputMethodService: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.inputmethodservice.InputMethodService: boolean stopService(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.inputmethodservice.InputMethodService: void unbindService(android.content.ServiceConnection)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: boolean addNmeaListener(android.location.OnNmeaMessageListener)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: boolean addNmeaListener(android.location.OnNmeaMessageListener,android.os.Handler)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: java.util.List getProviders(boolean)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: boolean registerGnssStatusCallback(android.location.GnssStatus$Callback)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: boolean registerGnssStatusCallback(android.location.GnssStatus$Callback,android.os.Handler)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: void removeUpdates(android.app.PendingIntent)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION",
        "android.permission.ACCESS_LOCATION_EXTRA_COMMANDS"
    ],
    "<android.media.AsyncPlayer: void play(android.content.Context,android.net.Uri,boolean,android.media.AudioAttributes)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.AsyncPlayer: void play(android.content.Context,android.net.Uri,boolean,int)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.AsyncPlayer: void stop()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.AudioManager: void adjustStreamVolume(int,int,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.media.AudioManager: void setBluetoothScoOn(boolean)>": [
        "android.permission.MODIFY_AUDIO_SETTINGS"
    ],
    "<android.media.AudioManager: void setMicrophoneMute(boolean)>": [
        "android.permission.MODIFY_AUDIO_SETTINGS"
    ],
    "<android.media.AudioManager: void setMode(int)>": [
        "android.permission.MODIFY_AUDIO_SETTINGS"
    ],
    "<android.media.AudioManager: void setSpeakerphoneOn(boolean)>": [
        "android.permission.MODIFY_AUDIO_SETTINGS"
    ],
    "<android.media.AudioManager: void setStreamMute(int,boolean)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.media.AudioManager: void setStreamVolume(int,int,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.media.AudioManager: void startBluetoothSco()>": [
        "android.permission.MODIFY_AUDIO_SETTINGS"
    ],
    "<android.media.AudioManager: void stopBluetoothSco()>": [
        "android.permission.BLUETOOTH",
        "android.permission.MODIFY_AUDIO_SETTINGS"
    ],
    "<android.media.MediaPlayer: void pause()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.MediaPlayer: void release()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.MediaPlayer: void reset()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.MediaPlayer: void setWakeMode(android.content.Context,int)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.MediaPlayer: void start()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.MediaPlayer: void stop()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.MediaRouter$RouteGroup: void requestSetVolume(int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.media.MediaRouter$RouteGroup: void requestUpdateVolume(int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.media.MediaRouter$RouteInfo: void requestSetVolume(int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.media.MediaRouter$RouteInfo: void requestUpdateVolume(int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.media.MediaScannerConnection: void disconnect()>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.media.Ringtone: void play()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.Ringtone: void setAudioAttributes(android.media.AudioAttributes)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.Ringtone: void setStreamType(int)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.Ringtone: void stop()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.RingtoneManager: android.media.Ringtone getRingtone(int)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.RingtoneManager: void stopPreviousRingtone()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.browse.MediaBrowser: void disconnect()>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.net.ConnectivityManager: android.net.Network getActiveNetwork()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.net.ConnectivityManager: android.net.Network[] getAllNetworks()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.net.ConnectivityManager: android.net.LinkProperties getLinkProperties(android.net.Network)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.net.ConnectivityManager: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(android.net.Network)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.net.ConnectivityManager: int getRestrictBackgroundStatus()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.net.ConnectivityManager: boolean isActiveNetworkMetered()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.net.ConnectivityManager: void registerDefaultNetworkCallback(android.net.ConnectivityManager$NetworkCallback)>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.ACCESS_WIFI_STATE",
        "android.permission.CHANGE_NETWORK_STATE"
    ],
    "<android.net.ConnectivityManager: void registerNetworkCallback(android.net.NetworkRequest,android.app.PendingIntent)>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<android.net.ConnectivityManager: void registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback)>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.ACCESS_WIFI_STATE",
        "android.permission.CHANGE_NETWORK_STATE"
    ],
    "<android.net.ConnectivityManager: void reportBadNetwork(android.net.Network)>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.INTERNET"
    ],
    "<android.net.ConnectivityManager: void reportNetworkConnectivity(android.net.Network,boolean)>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.INTERNET"
    ],
    "<android.net.ConnectivityManager: boolean requestBandwidthUpdate(android.net.Network)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,android.app.PendingIntent)>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.CHANGE_NETWORK_STATE"
    ],
    "<android.net.ConnectivityManager: void requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback)>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.ACCESS_WIFI_STATE",
        "android.permission.CHANGE_NETWORK_STATE"
    ],
    "<android.net.ConnectivityManager: boolean requestRouteToHost(int,int)>": [
        "android.permission.CHANGE_NETWORK_STATE"
    ],
    "<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.ACCESS_WIFI_STATE",
        "android.permission.CHANGE_NETWORK_STATE"
    ],
    "<android.net.VpnService: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.net.VpnService: void onRevoke()>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.net.VpnService: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.net.VpnService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.net.VpnService: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.net.VpnService: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.net.VpnService: boolean stopService(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.net.VpnService: void unbindService(android.content.ServiceConnection)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.net.sip.SipAudioCall: void close()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.net.sip.SipAudioCall: void endCall()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.net.sip.SipAudioCall: void setSpeakerMode(boolean)>": [
        "android.permission.MODIFY_AUDIO_SETTINGS"
    ],
    "<android.net.sip.SipAudioCall: void startAudio()>": [
        "android.permission.ACCESS_WIFI_STATE",
        "android.permission.WAKE_LOCK"
    ],
    "<android.net.sip.SipManager: void close(java.lang.String)>": [
        "android.permission.USE_SIP"
    ],
    "<android.net.sip.SipManager: android.net.sip.SipSession createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession$Listener)>": [
        "android.permission.USE_SIP"
    ],
    "<android.net.sip.SipManager: android.net.sip.SipSession getSessionFor(android.content.Intent)>": [
        "android.permission.USE_SIP"
    ],
    "<android.net.sip.SipManager: boolean isOpened(java.lang.String)>": [
        "android.permission.USE_SIP"
    ],
    "<android.net.sip.SipManager: boolean isRegistered(java.lang.String)>": [
        "android.permission.USE_SIP"
    ],
    "<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall$Listener,int)>": [
        "android.permission.USE_SIP"
    ],
    "<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(java.lang.String,java.lang.String,android.net.sip.SipAudioCall$Listener,int)>": [
        "android.permission.USE_SIP"
    ],
    "<android.net.sip.SipManager: void open(android.net.sip.SipProfile)>": [
        "android.permission.USE_SIP"
    ],
    "<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)>": [
        "android.permission.USE_SIP"
    ],
    "<android.net.sip.SipManager: void register(android.net.sip.SipProfile,int,android.net.sip.SipRegistrationListener)>": [
        "android.permission.USE_SIP"
    ],
    "<android.net.sip.SipManager: void setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)>": [
        "android.permission.USE_SIP"
    ],
    "<android.net.sip.SipManager: android.net.sip.SipAudioCall takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall$Listener)>": [
        "android.permission.USE_SIP"
    ],
    "<android.net.sip.SipManager: void unregister(android.net.sip.SipProfile,android.net.sip.SipRegistrationListener)>": [
        "android.permission.USE_SIP"
    ],
    "<android.net.wifi.WifiManager$MulticastLock: void acquire()>": [
        "android.permission.CHANGE_WIFI_MULTICAST_STATE"
    ],
    "<android.net.wifi.WifiManager$MulticastLock: void release()>": [
        "android.permission.CHANGE_WIFI_MULTICAST_STATE"
    ],
    "<android.net.wifi.WifiManager$WifiLock: void acquire()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.net.wifi.WifiManager$WifiLock: void release()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.net.wifi.WifiManager: int addNetwork(android.net.wifi.WifiConfiguration)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: void cancelWps(android.net.wifi.WifiManager$WpsCallback)>": [
        "android.permission.ACCESS_WIFI_STATE",
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean disableNetwork(int)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean disconnect()>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: android.net.DhcpInfo getDhcpInfo()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: java.util.List getScanResults()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: int getWifiState()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean is5GHzBandSupported()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean isDeviceToApRttSupported()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean isEnhancedPowerReportingSupported()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean isP2pSupported()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean isPreferredNetworkOffloadSupported()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean isScanAlwaysAvailable()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean isTdlsSupported()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean isWifiEnabled()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean pingSupplicant()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean reassociate()>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean reconnect()>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean removeNetwork(int)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean saveConfiguration()>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean startScan()>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: void startWps(android.net.wifi.WpsInfo,android.net.wifi.WifiManager$WpsCallback)>": [
        "android.permission.ACCESS_WIFI_STATE",
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: int updateNetwork(android.net.wifi.WifiConfiguration)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<android.net.wifi.p2p.WifiP2pManager: android.net.wifi.p2p.WifiP2pManager$Channel initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager$ChannelListener)>": [
        "android.permission.ACCESS_WIFI_STATE",
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<android.os.PowerManager$WakeLock: void acquire()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.os.PowerManager$WakeLock: void acquire(long)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.os.PowerManager$WakeLock: void release()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.os.PowerManager$WakeLock: void release(int)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.os.PowerManager$WakeLock: void setWorkSource(android.os.WorkSource)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.os.SystemVibrator: void cancel()>": [
        "android.permission.VIBRATE"
    ],
    "<android.os.SystemVibrator: void vibrate(int,java.lang.String,[long,int,android.media.AudioAttributes)>": [
        "android.permission.VIBRATE"
    ],
    "<android.os.SystemVibrator: void vibrate(int,java.lang.String,long,android.media.AudioAttributes)>": [
        "android.permission.VIBRATE"
    ],
    "<android.security.KeyChain: java.security.cert.X509Certificate[] getCertificateChain(android.content.Context,java.lang.String)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.security.KeyChain: java.security.PrivateKey getPrivateKey(android.content.Context,java.lang.String)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.service.dreams.DreamService: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.service.dreams.DreamService: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.service.dreams.DreamService: boolean dispatchKeyEvent(android.view.KeyEvent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.service.dreams.DreamService: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.service.dreams.DreamService: boolean dispatchTouchEvent(android.view.MotionEvent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.service.dreams.DreamService: boolean dispatchTrackballEvent(android.view.MotionEvent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.service.dreams.DreamService: void finish()>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.service.dreams.DreamService: void onWakeUp()>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.service.dreams.DreamService: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.service.dreams.DreamService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.service.dreams.DreamService: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.service.dreams.DreamService: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.service.dreams.DreamService: boolean stopService(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.service.dreams.DreamService: void unbindService(android.content.ServiceConnection)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.service.dreams.DreamService: void wakeUp()>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.service.quicksettings.TileService: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.service.quicksettings.TileService: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.service.quicksettings.TileService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.service.quicksettings.TileService: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.service.quicksettings.TileService: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.service.quicksettings.TileService: boolean stopService(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.service.quicksettings.TileService: void unbindService(android.content.ServiceConnection)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.service.voice.VoiceInteractionService: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.service.voice.VoiceInteractionService: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.service.voice.VoiceInteractionService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.service.voice.VoiceInteractionService: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.service.voice.VoiceInteractionService: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.service.voice.VoiceInteractionService: boolean stopService(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.service.voice.VoiceInteractionService: void unbindService(android.content.ServiceConnection)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.speech.SpeechRecognizer: void destroy()>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.speech.tts.TextToSpeech: java.util.Set getAvailableLanguages()>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.speech.tts.TextToSpeech: java.util.Locale getDefaultLanguage()>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.speech.tts.TextToSpeech: android.speech.tts.Voice getDefaultVoice()>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.speech.tts.TextToSpeech: java.util.Set getFeatures(java.util.Locale)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.speech.tts.TextToSpeech: java.util.Locale getLanguage()>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.speech.tts.TextToSpeech: android.speech.tts.Voice getVoice()>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.speech.tts.TextToSpeech: java.util.Set getVoices()>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.speech.tts.TextToSpeech: int isLanguageAvailable(java.util.Locale)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.speech.tts.TextToSpeech: boolean isSpeaking()>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.speech.tts.TextToSpeech: int playEarcon(java.lang.String,int,android.os.Bundle,java.lang.String)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.speech.tts.TextToSpeech: int playEarcon(java.lang.String,int,java.util.HashMap)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.speech.tts.TextToSpeech: int playSilence(long,int,java.util.HashMap)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.speech.tts.TextToSpeech: int playSilentUtterance(long,int,java.lang.String)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.speech.tts.TextToSpeech: int setLanguage(java.util.Locale)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.speech.tts.TextToSpeech: int setVoice(android.speech.tts.Voice)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.speech.tts.TextToSpeech: void shutdown()>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.speech.tts.TextToSpeech: int speak(java.lang.CharSequence,int,android.os.Bundle,java.lang.String)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.speech.tts.TextToSpeech: int speak(java.lang.String,int,java.util.HashMap)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.speech.tts.TextToSpeech: int stop()>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.speech.tts.TextToSpeech: int synthesizeToFile(java.lang.CharSequence,android.os.Bundle,java.io.File,java.lang.String)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.speech.tts.TextToSpeech: int synthesizeToFile(java.lang.String,java.util.HashMap,java.lang.String)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.telephony.PhoneNumberUtils: boolean isVoiceMailNumber(java.lang.String)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.telephony.SmsManager: java.util.ArrayList divideMessage(java.lang.String)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.telephony.SmsManager: void downloadMultimediaMessage(android.content.Context,java.lang.String,android.net.Uri,android.os.Bundle,android.app.PendingIntent)>": [
        "android.permission.RECEIVE_MMS"
    ],
    "<android.telephony.SmsManager: void injectSmsPdu([byte,java.lang.String,android.app.PendingIntent)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,[byte,android.app.PendingIntent,android.app.PendingIntent)>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.READ_EXTERNAL_STORAGE",
        "android.permission.SEND_SMS"
    ],
    "<android.telephony.SmsManager: void sendMultimediaMessage(android.content.Context,android.net.Uri,java.lang.String,android.os.Bundle,android.app.PendingIntent)>": [
        "android.permission.SEND_SMS"
    ],
    "<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>": [
        "android.permission.READ_EXTERNAL_STORAGE",
        "android.permission.SEND_SMS"
    ],
    "<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>": [
        "android.permission.READ_EXTERNAL_STORAGE",
        "android.permission.SEND_SMS"
    ],
    "<android.telephony.TelephonyManager: java.util.List getAllCellInfo()>": [
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>": [
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.telephony.TelephonyManager: java.lang.String getDeviceId(int)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.telephony.TelephonyManager: java.lang.String getGroupIdLevel1()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.telephony.TelephonyManager: java.lang.String getIccAuthentication(int,int,java.lang.String)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.telephony.TelephonyManager: java.lang.String getLine1Number()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()>": [
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.telephony.TelephonyManager: int getPhoneCount()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.telephony.TelephonyManager: int getSimState()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.READ_PHONE_STATE"
    ],
    "<android.telephony.gsm.SmsManager: java.util.ArrayList divideMessage(java.lang.String)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,[byte,android.app.PendingIntent,android.app.PendingIntent)>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.READ_EXTERNAL_STORAGE",
        "android.permission.SEND_SMS"
    ],
    "<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>": [
        "android.permission.READ_EXTERNAL_STORAGE",
        "android.permission.SEND_SMS"
    ],
    "<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>": [
        "android.permission.READ_EXTERNAL_STORAGE",
        "android.permission.SEND_SMS"
    ],
    "<android.test.IsolatedContext: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.test.IsolatedContext: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.test.IsolatedContext: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.test.IsolatedContext: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.test.IsolatedContext: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.test.IsolatedContext: boolean stopService(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.test.IsolatedContext: void unbindService(android.content.ServiceConnection)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.test.RenamingDelegatingContext: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.test.RenamingDelegatingContext: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.test.RenamingDelegatingContext: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.test.RenamingDelegatingContext: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.test.RenamingDelegatingContext: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.test.RenamingDelegatingContext: boolean stopService(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.test.RenamingDelegatingContext: void unbindService(android.content.ServiceConnection)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.test.mock.MockApplication: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.test.mock.MockApplication: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.test.mock.MockApplication: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.test.mock.MockApplication: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.test.mock.MockApplication: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.test.mock.MockApplication: boolean stopService(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.test.mock.MockApplication: void unbindService(android.content.ServiceConnection)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.view.ContextThemeWrapper: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.view.ContextThemeWrapper: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.view.ContextThemeWrapper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.view.ContextThemeWrapper: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.view.ContextThemeWrapper: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.view.ContextThemeWrapper: boolean stopService(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.view.ContextThemeWrapper: void unbindService(android.content.ServiceConnection)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.view.inputmethod.InputMethodManager: void showInputMethodAndSubtypeEnabler(java.lang.String)>": [
        "android.permission.READ_EXTERNAL_STORAGE"
    ],
    "<android.widget.VideoView: int getAudioSessionId()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.widget.VideoView: boolean onKeyDown(int,android.view.KeyEvent)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.widget.VideoView: void pause()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.widget.VideoView: void resume()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.widget.VideoView: void setVideoPath(java.lang.String)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.widget.VideoView: void setVideoURI(android.net.Uri)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.widget.VideoView: void setVideoURI(android.net.Uri,java.util.Map)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.widget.VideoView: void start()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.widget.VideoView: void stopPlayback()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.widget.VideoView: void suspend()>": [
        "android.permission.WAKE_LOCK"
    ]
}
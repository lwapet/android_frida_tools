{
    "<android.accounts.AbstractAccountAuthenticator$Transport: void addAccount(android.accounts.IAccountAuthenticatorResponse,java.lang.String,java.lang.String,[java.lang.String,android.os.Bundle)>": [
        "android.permission.ACCOUNT_MANAGER"
    ],
    "<android.accounts.AbstractAccountAuthenticator$Transport: void addAccountFromCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)>": [
        "android.permission.ACCOUNT_MANAGER"
    ],
    "<android.accounts.AbstractAccountAuthenticator$Transport: void confirmCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)>": [
        "android.permission.ACCOUNT_MANAGER"
    ],
    "<android.accounts.AbstractAccountAuthenticator$Transport: void editProperties(android.accounts.IAccountAuthenticatorResponse,java.lang.String)>": [
        "android.permission.ACCOUNT_MANAGER"
    ],
    "<android.accounts.AbstractAccountAuthenticator$Transport: void getAccountCredentialsForCloning(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account)>": [
        "android.permission.ACCOUNT_MANAGER"
    ],
    "<android.accounts.AbstractAccountAuthenticator$Transport: void getAccountRemovalAllowed(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account)>": [
        "android.permission.ACCOUNT_MANAGER"
    ],
    "<android.accounts.AbstractAccountAuthenticator$Transport: void getAuthToken(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>": [
        "android.permission.ACCOUNT_MANAGER"
    ],
    "<android.accounts.AbstractAccountAuthenticator$Transport: void getAuthTokenLabel(android.accounts.IAccountAuthenticatorResponse,java.lang.String)>": [
        "android.permission.ACCOUNT_MANAGER"
    ],
    "<android.accounts.AbstractAccountAuthenticator$Transport: void hasFeatures(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,[java.lang.String)>": [
        "android.permission.ACCOUNT_MANAGER"
    ],
    "<android.accounts.AbstractAccountAuthenticator$Transport: void updateCredentials(android.accounts.IAccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)>": [
        "android.permission.ACCOUNT_MANAGER"
    ],
    "<android.media.AudioService: void registerMediaButtonEventReceiverForCalls(android.content.ComponentName)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<android.media.AudioService: void setBluetoothScoOn(boolean)>": [
        "android.permission.MODIFY_AUDIO_SETTINGS"
    ],
    "<android.media.AudioService: void setMode(int,android.os.IBinder)>": [
        "android.permission.MODIFY_AUDIO_SETTINGS"
    ],
    "<android.media.AudioService: void setRingtonePlayer(android.media.IRingtonePlayer)>": [
        "android.permission.REMOTE_AUDIO_PLAYBACK"
    ],
    "<android.media.AudioService: void setSpeakerphoneOn(boolean)>": [
        "android.permission.MODIFY_AUDIO_SETTINGS"
    ],
    "<android.media.AudioService: void startBluetoothSco(android.os.IBinder,int)>": [
        "android.permission.MODIFY_AUDIO_SETTINGS"
    ],
    "<android.media.AudioService: void stopBluetoothSco(android.os.IBinder)>": [
        "android.permission.MODIFY_AUDIO_SETTINGS"
    ],
    "<android.media.AudioService: void unregisterMediaButtonEventReceiverForCalls()>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<android.net.wifi.p2p.WifiP2pService: android.os.Messenger getMessenger()>": [
        "android.permission.ACCESS_WIFI_STATE",
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<android.net.wifi.p2p.WifiP2pService: void setMiracastMode(int)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: boolean connect(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: boolean disconnect(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: java.util.List getConnectedDevices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: int getConnectionState(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: java.util.List getDevicesMatchingConnectionStates([int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: int getPriority(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.a2dp.A2dpService$BluetoothA2dpBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean cancelBondProcess(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean cancelDiscovery()>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelFileDescriptor connectSocket(android.bluetooth.BluetoothDevice,int,android.os.ParcelUuid,int,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean createBond(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelFileDescriptor createSocketChannel(int,java.lang.String,android.os.ParcelUuid,int,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean disable()>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean enable()>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean enableNoAutoConnect()>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean fetchRemoteUuids(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getAdapterConnectionState()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getAddress()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getBondState(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.bluetooth.BluetoothDevice[] getBondedDevices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getDiscoverableTimeout()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getName()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getProfileConnectionState(int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getRemoteAlias(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getRemoteClass(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: java.lang.String getRemoteName(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getRemoteType(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelUuid[] getRemoteUuids(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getScanMode()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: int getState()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: android.os.ParcelUuid[] getUuids()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean isDiscovering()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean isEnabled()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean removeBond(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: void sendConnectionStateChange(android.bluetooth.BluetoothDevice,int,int,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setDiscoverableTimeout(int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setName(java.lang.String)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setPairingConfirmation(android.bluetooth.BluetoothDevice,boolean)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setPasskey(android.bluetooth.BluetoothDevice,boolean,int,[byte)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setPin(android.bluetooth.BluetoothDevice,boolean,int,[byte)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean setScanMode(int,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.btservice.AdapterService$AdapterServiceBinder: boolean startDiscovery()>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void addCharacteristic(int,android.os.ParcelUuid,int,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void addDescriptor(int,android.os.ParcelUuid,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void addIncludedService(int,int,int,android.os.ParcelUuid)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void beginReliableWrite(int,java.lang.String)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void beginServiceDeclaration(int,int,int,int,android.os.ParcelUuid)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void clearServices(int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void clientConnect(int,java.lang.String,boolean)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void clientDisconnect(int,java.lang.String)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void discoverServices(int,java.lang.String)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void endReliableWrite(int,java.lang.String,boolean)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void endServiceDeclaration(int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: java.util.List getDevicesMatchingConnectionStates([int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void readCharacteristic(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void readDescriptor(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,android.os.ParcelUuid,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void readRemoteRssi(int,java.lang.String)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void refreshDevice(int,java.lang.String)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void registerClient(android.os.ParcelUuid,android.bluetooth.IBluetoothGattCallback)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void registerForNotification(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,boolean)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void registerServer(android.os.ParcelUuid,android.bluetooth.IBluetoothGattServerCallback)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void removeService(int,int,int,android.os.ParcelUuid)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void sendNotification(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,boolean,[byte)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void sendResponse(int,java.lang.String,int,int,int,[byte)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void serverConnect(int,java.lang.String,boolean)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void serverDisconnect(int,java.lang.String)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void startScan(int,boolean)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void startScanWithUuids(int,boolean,[android.os.ParcelUuid)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void stopScan(int,boolean)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void unregisterClient(int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void unregisterServer(int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void writeCharacteristic(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,int,int,[byte)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.gatt.GattService$BluetoothGattBinder: void writeDescriptor(int,java.lang.String,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid,android.os.ParcelUuid,int,int,[byte)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean connectChannelToSink(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: java.util.List getConnectedHealthDevices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: java.util.List getHealthDevicesMatchingConnectionStates([int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hdp.HealthService$BluetoothHealthBinder: boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: void clccResponse(int,int,int,int,boolean,java.lang.String,int)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN",
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean connect(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean connectAudio()>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean disconnect(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean disconnectAudio()>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: java.util.List getConnectedDevices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: int getConnectionState(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: java.util.List getDevicesMatchingConnectionStates([int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: int getPriority(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean isAudioConnected(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean isAudioOn()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: void phoneStateChanged(int,int,int,java.lang.String,int)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN",
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: void roamChanged(boolean)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN",
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hfp.HeadsetService$BluetoothHeadsetBinder: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean connect(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean disconnect(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: java.util.List getConnectedDevices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: java.util.List getDevicesMatchingConnectionStates([int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: int getPriority(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean getProtocolMode(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean getReport(android.bluetooth.BluetoothDevice,byte,byte,int)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean sendData(android.bluetooth.BluetoothDevice,java.lang.String)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean setPriority(android.bluetooth.BluetoothDevice,int)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean setProtocolMode(android.bluetooth.BluetoothDevice,int)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean setReport(android.bluetooth.BluetoothDevice,byte,java.lang.String)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.hid.HidService$BluetoothInputDeviceBinder: boolean virtualUnplug(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.bluetooth.pan.PanService$BluetoothPanBinder: boolean connect(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.pan.PanService$BluetoothPanBinder: boolean disconnect(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.pan.PanService$BluetoothPanBinder: java.util.List getConnectedDevices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.pan.PanService$BluetoothPanBinder: java.util.List getDevicesMatchingConnectionStates([int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.bluetooth.pan.PanService$BluetoothPanBinder: void setBluetoothTethering(boolean)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.internal.telephony.IccPhoneBookInterfaceManager: java.util.List getAdnRecordsInEf(int)>": [
        "android.permission.READ_CONTACTS",
        "android.permission.READ_CONTACTS"
    ],
    "<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)>": [
        "android.permission.WRITE_CONTACTS",
        "android.permission.WRITE_CONTACTS"
    ],
    "<com.android.internal.telephony.IccPhoneBookInterfaceManager: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>": [
        "android.permission.WRITE_CONTACTS",
        "android.permission.WRITE_CONTACTS"
    ],
    "<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: java.util.List getAdnRecordsInEf(int)>": [
        "android.permission.READ_CONTACTS"
    ],
    "<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfByIndex(int,java.lang.String,java.lang.String,int,java.lang.String)>": [
        "android.permission.WRITE_CONTACTS"
    ],
    "<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: boolean updateAdnRecordsInEfBySearch(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>": [
        "android.permission.WRITE_CONTACTS"
    ],
    "<com.android.internal.telephony.IccSmsInterfaceManager: boolean copyMessageToIccEf(java.lang.String,int,[byte,[byte)>": [
        "android.permission.RECEIVE_SMS",
        "android.permission.SEND_SMS",
        "android.permission.RECEIVE_SMS",
        "android.permission.SEND_SMS"
    ],
    "<com.android.internal.telephony.IccSmsInterfaceManager: java.util.List getAllMessagesFromIccEf(java.lang.String)>": [
        "android.permission.RECEIVE_SMS",
        "android.permission.RECEIVE_SMS"
    ],
    "<com.android.internal.telephony.IccSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,java.lang.String,int,[byte,android.app.PendingIntent,android.app.PendingIntent)>": [
        "android.permission.SEND_SMS",
        "android.permission.SEND_SMS_NO_CONFIRMATION",
        "android.permission.SEND_SMS",
        "android.permission.SEND_SMS_NO_CONFIRMATION"
    ],
    "<com.android.internal.telephony.IccSmsInterfaceManager: void sendMultipartText(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)>": [
        "android.permission.SEND_SMS",
        "android.permission.SEND_SMS_NO_CONFIRMATION",
        "android.permission.SEND_SMS",
        "android.permission.SEND_SMS_NO_CONFIRMATION"
    ],
    "<com.android.internal.telephony.IccSmsInterfaceManager: void sendText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>": [
        "android.permission.SEND_SMS",
        "android.permission.SEND_SMS_NO_CONFIRMATION",
        "android.permission.SEND_SMS",
        "android.permission.SEND_SMS_NO_CONFIRMATION"
    ],
    "<com.android.internal.telephony.IccSmsInterfaceManager: boolean updateMessageOnIccEf(java.lang.String,int,int,[byte)>": [
        "android.permission.RECEIVE_SMS",
        "android.permission.SEND_SMS",
        "android.permission.RECEIVE_SMS",
        "android.permission.SEND_SMS"
    ],
    "<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean copyMessageToIccEf(java.lang.String,int,[byte,[byte)>": [
        "android.permission.RECEIVE_SMS",
        "android.permission.SEND_SMS"
    ],
    "<com.android.internal.telephony.IccSmsInterfaceManagerProxy: java.util.List getAllMessagesFromIccEf(java.lang.String)>": [
        "android.permission.RECEIVE_SMS"
    ],
    "<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendData(java.lang.String,java.lang.String,java.lang.String,int,[byte,android.app.PendingIntent,android.app.PendingIntent)>": [
        "android.permission.SEND_SMS"
    ],
    "<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendMultipartText(java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)>": [
        "android.permission.SEND_SMS"
    ],
    "<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void sendText(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>": [
        "android.permission.SEND_SMS"
    ],
    "<com.android.internal.telephony.IccSmsInterfaceManagerProxy: boolean updateMessageOnIccEf(java.lang.String,int,int,[byte)>": [
        "android.permission.RECEIVE_SMS",
        "android.permission.SEND_SMS"
    ],
    "<com.android.internal.telephony.PhoneSubInfo: java.lang.String getCompleteVoiceMailNumber()>": [
        "android.permission.CALL_PRIVILEGED"
    ],
    "<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceId()>": [
        "android.permission.READ_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfo: java.lang.String getDeviceSvn()>": [
        "android.permission.READ_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfo: java.lang.String getGroupIdLevel1()>": [
        "android.permission.READ_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIccSerialNumber()>": [
        "android.permission.READ_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIsimDomain()>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfo: java.lang.String getIsimImpi()>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfo: java.lang.String[] getIsimImpu()>": [
        "android.permission.READ_PRIVILEGED_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1AlphaTag()>": [
        "android.permission.READ_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfo: java.lang.String getLine1Number()>": [
        "android.permission.READ_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfo: java.lang.String getMsisdn()>": [
        "android.permission.READ_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfo: java.lang.String getSubscriberId()>": [
        "android.permission.READ_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailAlphaTag()>": [
        "android.permission.READ_PHONE_STATE"
    ],
    "<com.android.internal.telephony.PhoneSubInfo: java.lang.String getVoiceMailNumber()>": [
        "android.permission.READ_PHONE_STATE"
    ],
    "<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean disableCellBroadcast(int)>": [
        "android.permission.RECEIVE_SMS"
    ],
    "<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean disableCellBroadcastRange(int,int)>": [
        "android.permission.RECEIVE_SMS"
    ],
    "<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean enableCellBroadcast(int)>": [
        "android.permission.RECEIVE_SMS"
    ],
    "<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)>": [
        "android.permission.RECEIVE_SMS"
    ],
    "<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean disableCellBroadcast(int)>": [
        "android.permission.RECEIVE_SMS"
    ],
    "<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean disableCellBroadcastRange(int,int)>": [
        "android.permission.RECEIVE_SMS"
    ],
    "<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcast(int)>": [
        "android.permission.RECEIVE_SMS"
    ],
    "<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)>": [
        "android.permission.RECEIVE_SMS"
    ],
    "<com.android.nfc.NfcService$NfcAdapterExtrasService: void authenticate(java.lang.String,[byte)>": [
        "android.permission.NFC"
    ],
    "<com.android.nfc.NfcService$NfcAdapterExtrasService: android.os.Bundle close(java.lang.String,android.os.IBinder)>": [
        "android.permission.NFC"
    ],
    "<com.android.nfc.NfcService$NfcAdapterExtrasService: int getCardEmulationRoute(java.lang.String)>": [
        "android.permission.NFC"
    ],
    "<com.android.nfc.NfcService$NfcAdapterExtrasService: java.lang.String getDriverName(java.lang.String)>": [
        "android.permission.NFC"
    ],
    "<com.android.nfc.NfcService$NfcAdapterExtrasService: android.os.Bundle open(java.lang.String,android.os.IBinder)>": [
        "android.permission.NFC"
    ],
    "<com.android.nfc.NfcService$NfcAdapterExtrasService: void setCardEmulationRoute(java.lang.String,int)>": [
        "android.permission.NFC"
    ],
    "<com.android.nfc.NfcService$NfcAdapterExtrasService: android.os.Bundle transceive(java.lang.String,[byte)>": [
        "android.permission.NFC"
    ],
    "<com.android.nfc.NfcService$NfcAdapterService: boolean disable(boolean)>": [
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.nfc.NfcService$NfcAdapterService: boolean disableNdefPush()>": [
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.nfc.NfcService$NfcAdapterService: void dispatch(android.nfc.Tag)>": [
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.nfc.NfcService$NfcAdapterService: boolean enable()>": [
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.nfc.NfcService$NfcAdapterService: boolean enableNdefPush()>": [
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.nfc.NfcService$NfcAdapterService: android.nfc.INfcAdapterExtras getNfcAdapterExtrasInterface(java.lang.String)>": [
        "android.permission.NFC"
    ],
    "<com.android.nfc.NfcService$NfcAdapterService: void setForegroundDispatch(android.app.PendingIntent,[android.content.IntentFilter,android.nfc.TechListParcel)>": [
        "android.permission.NFC"
    ],
    "<com.android.nfc.NfcService$NfcAdapterService: void setNdefPushCallback(android.nfc.INdefPushCallback)>": [
        "android.permission.NFC"
    ],
    "<com.android.nfc.NfcService$NfcAdapterService: void setP2pModes(int,int)>": [
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.nfc.NfcService$TagService: int close(int)>": [
        "android.permission.NFC"
    ],
    "<com.android.nfc.NfcService$TagService: int connect(int,int)>": [
        "android.permission.NFC"
    ],
    "<com.android.nfc.NfcService$TagService: int formatNdef(int,[byte)>": [
        "android.permission.NFC"
    ],
    "<com.android.nfc.NfcService$TagService: int[] getTechList(int)>": [
        "android.permission.NFC"
    ],
    "<com.android.nfc.NfcService$TagService: int getTimeout(int)>": [
        "android.permission.NFC"
    ],
    "<com.android.nfc.NfcService$TagService: boolean isNdef(int)>": [
        "android.permission.NFC"
    ],
    "<com.android.nfc.NfcService$TagService: int ndefMakeReadOnly(int)>": [
        "android.permission.NFC"
    ],
    "<com.android.nfc.NfcService$TagService: android.nfc.NdefMessage ndefRead(int)>": [
        "android.permission.NFC"
    ],
    "<com.android.nfc.NfcService$TagService: int ndefWrite(int,android.nfc.NdefMessage)>": [
        "android.permission.NFC"
    ],
    "<com.android.nfc.NfcService$TagService: int reconnect(int)>": [
        "android.permission.NFC"
    ],
    "<com.android.nfc.NfcService$TagService: android.nfc.Tag rediscover(int)>": [
        "android.permission.NFC"
    ],
    "<com.android.nfc.NfcService$TagService: void resetTimeouts()>": [
        "android.permission.NFC"
    ],
    "<com.android.nfc.NfcService$TagService: int setTimeout(int,int)>": [
        "android.permission.NFC"
    ],
    "<com.android.nfc.NfcService$TagService: android.nfc.TransceiveResult transceive(int,[byte,boolean)>": [
        "android.permission.NFC"
    ],
    "<com.android.phone.PhoneInterfaceManager: void answerRingingCall()>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: void call(java.lang.String,java.lang.String)>": [
        "android.permission.CALL_PHONE"
    ],
    "<com.android.phone.PhoneInterfaceManager: void cancelMissedCallsNotification()>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: int disableApnType(java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean disableDataConnectivity()>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: void disableLocationUpdates()>": [
        "android.permission.CONTROL_LOCATION_UPDATES"
    ],
    "<com.android.phone.PhoneInterfaceManager: int enableApnType(java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean enableDataConnectivity()>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: void enableLocationUpdates()>": [
        "android.permission.CONTROL_LOCATION_UPDATES"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean endCall()>": [
        "android.permission.CALL_PHONE"
    ],
    "<com.android.phone.PhoneInterfaceManager: java.util.List getAllCellInfo()>": [
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<com.android.phone.PhoneInterfaceManager: android.os.Bundle getCellLocation()>": [
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<com.android.phone.PhoneInterfaceManager: java.util.List getNeighboringCellInfo(java.lang.String)>": [
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean handlePinMmi(java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean isSimPinEnabled()>": [
        "android.permission.READ_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean setRadio(boolean)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean setRadioPower(boolean)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: void silenceRinger()>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean supplyPin(java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: boolean supplyPuk(java.lang.String,java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.phone.PhoneInterfaceManager: void toggleRadioOnOff()>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.providers.contacts.ContactsProvider2: java.lang.String getType(android.net.Uri)>": [
        "android.permission.READ_SOCIAL_STREAM"
    ],
    "<com.android.server.AlarmManagerService: void setTime(long)>": [
        "android.permission.SET_TIME"
    ],
    "<com.android.server.AlarmManagerService: void setTimeZone(java.lang.String)>": [
        "android.permission.SET_TIME_ZONE"
    ],
    "<com.android.server.AppOpsService: int checkOperation(int,int,java.lang.String)>": [
        "android.permission.UPDATE_APP_OPS_STATS"
    ],
    "<com.android.server.AppOpsService: void finishOperation(int,int,java.lang.String)>": [
        "android.permission.UPDATE_APP_OPS_STATS"
    ],
    "<com.android.server.AppOpsService: java.util.List getOpsForPackage(int,java.lang.String,[int)>": [
        "android.permission.GET_APP_OPS_STATS"
    ],
    "<com.android.server.AppOpsService: java.util.List getPackagesForOps([int)>": [
        "android.permission.GET_APP_OPS_STATS"
    ],
    "<com.android.server.AppOpsService: int noteOperation(int,int,java.lang.String)>": [
        "android.permission.UPDATE_APP_OPS_STATS"
    ],
    "<com.android.server.AppOpsService: void resetAllModes()>": [
        "android.permission.UPDATE_APP_OPS_STATS"
    ],
    "<com.android.server.AppOpsService: void setMode(int,int,java.lang.String,int)>": [
        "android.permission.UPDATE_APP_OPS_STATS"
    ],
    "<com.android.server.AppOpsService: int startOperation(int,int,java.lang.String)>": [
        "android.permission.UPDATE_APP_OPS_STATS"
    ],
    "<com.android.server.AppWidgetService: void bindAppWidgetId(int,android.content.ComponentName,android.os.Bundle,int)>": [
        "android.permission.BIND_APPWIDGET"
    ],
    "<com.android.server.AppWidgetService: boolean bindAppWidgetIdIfAllowed(java.lang.String,int,android.content.ComponentName,android.os.Bundle,int)>": [
        "android.permission.BIND_APPWIDGET"
    ],
    "<com.android.server.AppWidgetService: void bindRemoteViewsService(int,android.content.Intent,android.os.IBinder,int)>": [
        "android.permission.BIND_APPWIDGET"
    ],
    "<com.android.server.AppWidgetService: void deleteAppWidgetId(int,int)>": [
        "android.permission.BIND_APPWIDGET"
    ],
    "<com.android.server.AppWidgetService: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(int,int)>": [
        "android.permission.BIND_APPWIDGET"
    ],
    "<com.android.server.AppWidgetService: android.os.Bundle getAppWidgetOptions(int,int)>": [
        "android.permission.BIND_APPWIDGET"
    ],
    "<com.android.server.AppWidgetService: android.widget.RemoteViews getAppWidgetViews(int,int)>": [
        "android.permission.BIND_APPWIDGET"
    ],
    "<com.android.server.AppWidgetService: boolean hasBindAppWidgetPermission(java.lang.String,int)>": [
        "android.permission.MODIFY_APPWIDGET_BIND_PERMISSIONS"
    ],
    "<com.android.server.AppWidgetService: void notifyAppWidgetViewDataChanged([int,int,int)>": [
        "android.permission.BIND_APPWIDGET"
    ],
    "<com.android.server.AppWidgetService: void partiallyUpdateAppWidgetIds([int,android.widget.RemoteViews,int)>": [
        "android.permission.BIND_APPWIDGET"
    ],
    "<com.android.server.AppWidgetService: void setBindAppWidgetPermission(java.lang.String,boolean,int)>": [
        "android.permission.MODIFY_APPWIDGET_BIND_PERMISSIONS"
    ],
    "<com.android.server.AppWidgetService: void unbindRemoteViewsService(int,android.content.Intent,int)>": [
        "android.permission.BIND_APPWIDGET"
    ],
    "<com.android.server.AppWidgetService: void updateAppWidgetIds([int,android.widget.RemoteViews,int)>": [
        "android.permission.BIND_APPWIDGET"
    ],
    "<com.android.server.AppWidgetService: void updateAppWidgetOptions(int,android.os.Bundle,int)>": [
        "android.permission.BIND_APPWIDGET"
    ],
    "<com.android.server.AppWidgetService: void updateAppWidgetProvider(android.content.ComponentName,android.widget.RemoteViews,int)>": [
        "android.permission.BIND_APPWIDGET"
    ],
    "<com.android.server.BackupManagerService$ActiveRestoreSession: int getAvailableRestoreSets(android.app.backup.IRestoreObserver)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.BackupManagerService$ActiveRestoreSession: int restoreAll(long,android.app.backup.IRestoreObserver)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.BackupManagerService$ActiveRestoreSession: int restorePackage(java.lang.String,android.app.backup.IRestoreObserver)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.BackupManagerService$ActiveRestoreSession: int restoreSome(long,android.app.backup.IRestoreObserver,[java.lang.String)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.BackupManagerService: void acknowledgeFullBackupOrRestore(int,boolean,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.BackupManagerService: void backupNow()>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.BackupManagerService: android.app.backup.IRestoreSession beginRestoreSession(java.lang.String,java.lang.String)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.BackupManagerService: void clearBackupData(java.lang.String)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.BackupManagerService: void dataChanged(java.lang.String)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.BackupManagerService: void fullBackup(android.os.ParcelFileDescriptor,boolean,boolean,boolean,boolean,boolean,[java.lang.String)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.BackupManagerService: void fullRestore(android.os.ParcelFileDescriptor)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.BackupManagerService: android.content.Intent getConfigurationIntent(java.lang.String)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.BackupManagerService: java.lang.String getCurrentTransport()>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.BackupManagerService: java.lang.String getDestinationString(java.lang.String)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.BackupManagerService: boolean hasBackupPassword()>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.BackupManagerService: boolean isBackupEnabled()>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.BackupManagerService: java.lang.String[] listAllTransports()>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.BackupManagerService: java.lang.String selectBackupTransport(java.lang.String)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.BackupManagerService: void setAutoRestore(boolean)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.BackupManagerService: void setBackupEnabled(boolean)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.BackupManagerService: boolean setBackupPassword(java.lang.String,java.lang.String)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.BackupManagerService: void setBackupProvisioned(boolean)>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.BluetoothManagerService: boolean disable(boolean)>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.server.BluetoothManagerService: boolean enable()>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.server.BluetoothManagerService: boolean enableNoAutoConnect()>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<com.android.server.BluetoothManagerService: java.lang.String getAddress()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.server.BluetoothManagerService: java.lang.String getName()>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.server.BluetoothManagerService: void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.server.BluetoothManagerService: void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.server.BluetoothManagerService: void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)>": [
        "android.permission.BLUETOOTH"
    ],
    "<com.android.server.ConnectivityService: void captivePortalCheckComplete(android.net.NetworkInfo)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConnectivityService: int findConnectionTypeForIface(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConnectivityService: android.net.LinkProperties getActiveLinkProperties()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfo()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: android.net.NetworkInfo getActiveNetworkInfoForUid(int)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConnectivityService: android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: android.net.NetworkInfo[] getAllNetworkInfo()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: android.net.NetworkState[] getAllNetworkState()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: int getLastTetherError(java.lang.String)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: android.net.LinkProperties getLinkProperties(int)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: boolean getMobileDataEnabled()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: android.net.NetworkInfo getNetworkInfo(int)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: int getNetworkPreference()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: java.lang.String[] getTetherableBluetoothRegexs()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: java.lang.String[] getTetherableIfaces()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: java.lang.String[] getTetherableUsbRegexs()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: java.lang.String[] getTetherableWifiRegexs()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: java.lang.String[] getTetheredIfacePairs()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: java.lang.String[] getTetheredIfaces()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: java.lang.String[] getTetheringErroredIfaces()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: boolean isActiveNetworkMetered()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: boolean isNetworkSupported(int)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: boolean isTetheringSupported()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: void reportInetCondition(int,int)>": [
        "android.permission.STATUS_BAR"
    ],
    "<com.android.server.ConnectivityService: void requestNetworkTransitionWakelock(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConnectivityService: boolean requestRouteToHost(int,int)>": [
        "android.permission.CHANGE_NETWORK_STATE",
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConnectivityService: boolean requestRouteToHostAddress(int,[byte)>": [
        "android.permission.CHANGE_NETWORK_STATE",
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConnectivityService: void setDataDependency(int,boolean)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConnectivityService: void setGlobalProxy(android.net.ProxyProperties)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConnectivityService: void setMobileDataEnabled(boolean)>": [
        "android.permission.CHANGE_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: void setNetworkPreference(int)>": [
        "android.permission.CHANGE_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: void setPolicyDataEnable(int,boolean)>": [
        "android.permission.MANAGE_NETWORK_POLICY"
    ],
    "<com.android.server.ConnectivityService: boolean setRadio(int,boolean)>": [
        "android.permission.CHANGE_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: boolean setRadios(boolean)>": [
        "android.permission.CHANGE_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: int setUsbTethering(boolean)>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.CHANGE_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: void startLegacyVpn(com.android.internal.net.VpnProfile)>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConnectivityService: int startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)>": [
        "android.permission.CHANGE_NETWORK_STATE",
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConnectivityService: int stopUsingNetworkFeature(int,java.lang.String)>": [
        "android.permission.CHANGE_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: void supplyMessenger(int,android.os.Messenger)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.ConnectivityService: int tether(java.lang.String)>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.CHANGE_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: int untether(java.lang.String)>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.CHANGE_NETWORK_STATE"
    ],
    "<com.android.server.ConnectivityService: boolean updateLockdownVpn()>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.DevicePolicyManagerService: java.util.List getActiveAdmins(int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: boolean getCameraDisabled(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: int getCurrentFailedPasswordAttempts(int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: android.content.ComponentName getGlobalProxyAdmin(int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: int getKeyguardDisabledFeatures(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: long getMaximumTimeToLock(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: long getPasswordExpiration(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: long getPasswordExpirationTimeout(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: int getPasswordHistoryLength(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLength(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLetters(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLowerCase(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: int getPasswordMinimumNonLetter(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: int getPasswordMinimumNumeric(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: int getPasswordMinimumSymbols(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: int getPasswordMinimumUpperCase(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: int getPasswordQuality(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: void getRemoveWarning(android.content.ComponentName,android.os.RemoteCallback,int)>": [
        "android.permission.BIND_DEVICE_ADMIN",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: boolean getStorageEncryption(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: int getStorageEncryptionStatus(int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: boolean hasGrantedPolicy(android.content.ComponentName,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: boolean isActivePasswordSufficient(int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: boolean isAdminActive(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: void lockNow()>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: boolean packageHasActiveAdmins(java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: void removeActiveAdmin(android.content.ComponentName,int)>": [
        "android.permission.BIND_DEVICE_ADMIN",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: void reportFailedPasswordAttempt(int)>": [
        "android.permission.BIND_DEVICE_ADMIN",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: void reportSuccessfulPasswordAttempt(int)>": [
        "android.permission.BIND_DEVICE_ADMIN",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: boolean resetPassword(java.lang.String,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: void setActiveAdmin(android.content.ComponentName,boolean,int)>": [
        "android.permission.BIND_DEVICE_ADMIN",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: void setActivePasswordState(int,int,int,int,int,int,int,int,int)>": [
        "android.permission.BIND_DEVICE_ADMIN",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: void setCameraDisabled(android.content.ComponentName,boolean,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: android.content.ComponentName setGlobalProxy(android.content.ComponentName,java.lang.String,java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: void setKeyguardDisabledFeatures(android.content.ComponentName,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: void setMaximumFailedPasswordsForWipe(android.content.ComponentName,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: void setMaximumTimeToLock(android.content.ComponentName,long,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: void setPasswordExpirationTimeout(android.content.ComponentName,long,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: void setPasswordHistoryLength(android.content.ComponentName,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: void setPasswordMinimumLength(android.content.ComponentName,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: void setPasswordMinimumLetters(android.content.ComponentName,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: void setPasswordMinimumLowerCase(android.content.ComponentName,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: void setPasswordMinimumNonLetter(android.content.ComponentName,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: void setPasswordMinimumNumeric(android.content.ComponentName,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: void setPasswordMinimumSymbols(android.content.ComponentName,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: void setPasswordMinimumUpperCase(android.content.ComponentName,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: void setPasswordQuality(android.content.ComponentName,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: int setStorageEncryption(android.content.ComponentName,boolean,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DevicePolicyManagerService: void wipeData(int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.DropBoxManagerService: android.os.DropBoxManager$Entry getNextEntry(java.lang.String,long)>": [
        "android.permission.READ_LOGS"
    ],
    "<com.android.server.InputMethodManagerService: void addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: java.util.List getEnabledInputMethodList()>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: java.util.List getInputMethodList()>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: void hideMySoftInput(android.os.IBinder,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: boolean notifySuggestionPicked(android.text.style.SuggestionSpan,java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: void registerSuggestionSpansForNotification([android.text.style.SuggestionSpan)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: void removeClient(com.android.internal.view.IInputMethodClient)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: void setAdditionalInputMethodSubtypes(java.lang.String,[android.view.inputmethod.InputMethodSubtype)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: void setInputMethod(android.os.IBinder,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.InputMethodManagerService: void setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.InputMethodManagerService: boolean setInputMethodEnabled(java.lang.String,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.InputMethodManagerService: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: void showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: void showMySoftInput(android.os.IBinder,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: boolean showSoftInput(com.android.internal.view.IInputMethodClient,int,android.os.ResultReceiver)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: com.android.internal.view.InputBindResult startInput(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,android.view.inputmethod.EditorInfo,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.InputMethodManagerService: boolean switchToLastInputMethod(android.os.IBinder)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.InputMethodManagerService: boolean switchToNextInputMethod(android.os.IBinder,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.InputMethodManagerService: com.android.internal.view.InputBindResult windowGainedFocus(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.LocationManagerService: boolean addGpsStatusListener(android.location.IGpsStatusListener,java.lang.String)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<com.android.server.LocationManagerService: void addTestProvider(java.lang.String,com.android.internal.location.ProviderProperties)>": [
        "android.permission.ACCESS_MOCK_LOCATION"
    ],
    "<com.android.server.LocationManagerService: void clearTestProviderEnabled(java.lang.String)>": [
        "android.permission.ACCESS_MOCK_LOCATION"
    ],
    "<com.android.server.LocationManagerService: void clearTestProviderLocation(java.lang.String)>": [
        "android.permission.ACCESS_MOCK_LOCATION"
    ],
    "<com.android.server.LocationManagerService: void clearTestProviderStatus(java.lang.String)>": [
        "android.permission.ACCESS_MOCK_LOCATION"
    ],
    "<com.android.server.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<com.android.server.LocationManagerService: android.location.Location getLastLocation(android.location.LocationRequest,java.lang.String)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<com.android.server.LocationManagerService: com.android.internal.location.ProviderProperties getProviderProperties(java.lang.String)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<com.android.server.LocationManagerService: boolean isProviderEnabled(java.lang.String)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<com.android.server.LocationManagerService: void removeGeofence(android.location.Geofence,android.app.PendingIntent,java.lang.String)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<com.android.server.LocationManagerService: void removeTestProvider(java.lang.String)>": [
        "android.permission.ACCESS_MOCK_LOCATION"
    ],
    "<com.android.server.LocationManagerService: void removeUpdates(android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<com.android.server.LocationManagerService: void reportLocation(android.location.Location,boolean)>": [
        "android.permission.INSTALL_LOCATION_PROVIDER"
    ],
    "<com.android.server.LocationManagerService: void requestGeofence(android.location.LocationRequest,android.location.Geofence,android.app.PendingIntent,java.lang.String)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<com.android.server.LocationManagerService: void requestLocationUpdates(android.location.LocationRequest,android.location.ILocationListener,android.app.PendingIntent,java.lang.String)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<com.android.server.LocationManagerService: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION",
        "android.permission.ACCESS_LOCATION_EXTRA_COMMANDS"
    ],
    "<com.android.server.LocationManagerService: void setTestProviderEnabled(java.lang.String,boolean)>": [
        "android.permission.ACCESS_MOCK_LOCATION"
    ],
    "<com.android.server.LocationManagerService: void setTestProviderLocation(java.lang.String,android.location.Location)>": [
        "android.permission.ACCESS_MOCK_LOCATION"
    ],
    "<com.android.server.LocationManagerService: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)>": [
        "android.permission.ACCESS_MOCK_LOCATION"
    ],
    "<com.android.server.LockSettingsService: boolean getBoolean(java.lang.String,boolean,int)>": [
        "android.permission.READ_PROFILE"
    ],
    "<com.android.server.LockSettingsService: long getLong(java.lang.String,long,int)>": [
        "android.permission.READ_PROFILE"
    ],
    "<com.android.server.LockSettingsService: java.lang.String getString(java.lang.String,java.lang.String,int)>": [
        "android.permission.READ_PROFILE"
    ],
    "<com.android.server.MountService: int changeEncryptionPassword(java.lang.String)>": [
        "android.permission.CRYPT_KEEPER"
    ],
    "<com.android.server.MountService: int createSecureContainer(java.lang.String,int,java.lang.String,java.lang.String,int,boolean)>": [
        "android.permission.ASEC_CREATE"
    ],
    "<com.android.server.MountService: int decryptStorage(java.lang.String)>": [
        "android.permission.CRYPT_KEEPER"
    ],
    "<com.android.server.MountService: int destroySecureContainer(java.lang.String,boolean)>": [
        "android.permission.ASEC_DESTROY"
    ],
    "<com.android.server.MountService: int encryptStorage(java.lang.String)>": [
        "android.permission.CRYPT_KEEPER"
    ],
    "<com.android.server.MountService: int finalizeSecureContainer(java.lang.String)>": [
        "android.permission.ASEC_CREATE"
    ],
    "<com.android.server.MountService: int fixPermissionsSecureContainer(java.lang.String,int,java.lang.String)>": [
        "android.permission.ASEC_CREATE"
    ],
    "<com.android.server.MountService: int formatVolume(java.lang.String)>": [
        "android.permission.MOUNT_FORMAT_FILESYSTEMS"
    ],
    "<com.android.server.MountService: int getEncryptionState()>": [
        "android.permission.CRYPT_KEEPER"
    ],
    "<com.android.server.MountService: java.lang.String getSecureContainerFilesystemPath(java.lang.String)>": [
        "android.permission.ASEC_ACCESS"
    ],
    "<com.android.server.MountService: java.lang.String[] getSecureContainerList()>": [
        "android.permission.ASEC_ACCESS"
    ],
    "<com.android.server.MountService: java.lang.String getSecureContainerPath(java.lang.String)>": [
        "android.permission.ASEC_ACCESS"
    ],
    "<com.android.server.MountService: int[] getStorageUsers(java.lang.String)>": [
        "android.permission.MOUNT_UNMOUNT_FILESYSTEMS"
    ],
    "<com.android.server.MountService: android.os.storage.StorageVolume[] getVolumeList()>": [
        "android.permission.ACCESS_ALL_EXTERNAL_STORAGE"
    ],
    "<com.android.server.MountService: boolean isSecureContainerMounted(java.lang.String)>": [
        "android.permission.ASEC_ACCESS"
    ],
    "<com.android.server.MountService: int mountSecureContainer(java.lang.String,java.lang.String,int)>": [
        "android.permission.ASEC_MOUNT_UNMOUNT"
    ],
    "<com.android.server.MountService: int mountVolume(java.lang.String)>": [
        "android.permission.MOUNT_UNMOUNT_FILESYSTEMS"
    ],
    "<com.android.server.MountService: int renameSecureContainer(java.lang.String,java.lang.String)>": [
        "android.permission.ASEC_RENAME"
    ],
    "<com.android.server.MountService: void setUsbMassStorageEnabled(boolean)>": [
        "android.permission.MOUNT_UNMOUNT_FILESYSTEMS"
    ],
    "<com.android.server.MountService: void shutdown(android.os.storage.IMountShutdownObserver)>": [
        "android.permission.SHUTDOWN"
    ],
    "<com.android.server.MountService: int unmountSecureContainer(java.lang.String,boolean)>": [
        "android.permission.ASEC_MOUNT_UNMOUNT"
    ],
    "<com.android.server.MountService: void unmountVolume(java.lang.String,boolean,boolean)>": [
        "android.permission.MOUNT_UNMOUNT_FILESYSTEMS"
    ],
    "<com.android.server.MountService: int verifyEncryptionPassword(java.lang.String)>": [
        "android.permission.CRYPT_KEEPER"
    ],
    "<com.android.server.NetworkManagementService: void addIdleTimer(java.lang.String,int,java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void addRoute(java.lang.String,android.net.RouteInfo)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void addSecondaryRoute(java.lang.String,android.net.RouteInfo)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void attachPppd(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void clearDnsInterfaceForPid(int)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void clearInterfaceAddresses(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void detachPppd(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void disableIpv6(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void disableNat(java.lang.String,java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void enableIpv6(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void enableNat(java.lang.String,java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void flushDefaultDnsCache()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void flushInterfaceDnsCache(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: java.lang.String[] getDnsForwarders()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: boolean getIpForwardingEnabled()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsDetail()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsSummaryDev()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsSummaryXt()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsTethering([java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: android.net.NetworkStats getNetworkStatsUidDetail(int)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: android.net.RouteInfo[] getRoutes(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: boolean isBandwidthControlEnabled()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: boolean isClatdStarted()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: boolean isTetheringStarted()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: java.lang.String[] listInterfaces()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: java.lang.String[] listTetheredInterfaces()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: java.lang.String[] listTtys()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void removeIdleTimer(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void removeInterfaceAlert(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void removeInterfaceQuota(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void removeRoute(java.lang.String,android.net.RouteInfo)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void removeSecondaryRoute(java.lang.String,android.net.RouteInfo)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setDefaultInterfaceForDns(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setDnsForwarders([java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setDnsInterfaceForPid(java.lang.String,int)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setDnsServersForInterface(java.lang.String,[java.lang.String,java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setGlobalAlert(long)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setInterfaceAlert(java.lang.String,long)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setInterfaceConfig(java.lang.String,android.net.InterfaceConfiguration)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setInterfaceDown(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setInterfaceIpv6PrivacyExtensions(java.lang.String,boolean)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setInterfaceQuota(java.lang.String,long)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setInterfaceUp(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setIpForwardingEnabled(boolean)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void setUidNetworkRules(int,boolean)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void shutdown()>": [
        "android.permission.SHUTDOWN"
    ],
    "<com.android.server.NetworkManagementService: void startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void startClatd(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void startTethering([java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void stopAccessPoint(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void stopClatd()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void stopTethering()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void tetherInterface(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void unregisterObserver(android.net.INetworkManagementEventObserver)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void untetherInterface(java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NetworkManagementService: void wifiFirmwareReload(java.lang.String,java.lang.String)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.NotificationManagerService: android.service.notification.StatusBarNotification[] getActiveNotifications(java.lang.String)>": [
        "android.permission.ACCESS_NOTIFICATIONS"
    ],
    "<com.android.server.NotificationManagerService: android.service.notification.StatusBarNotification[] getHistoricalNotifications(java.lang.String,int)>": [
        "android.permission.ACCESS_NOTIFICATIONS"
    ],
    "<com.android.server.NsdService: android.os.Messenger getMessenger()>": [
        "android.permission.INTERNET"
    ],
    "<com.android.server.NsdService: void setEnabled(boolean)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.SerialService: java.lang.String[] getSerialPorts()>": [
        "android.permission.SERIAL_PORT"
    ],
    "<com.android.server.SerialService: android.os.ParcelFileDescriptor openSerialPort(java.lang.String)>": [
        "android.permission.SERIAL_PORT"
    ],
    "<com.android.server.StatusBarManagerService: void collapsePanels()>": [
        "android.permission.EXPAND_STATUS_BAR"
    ],
    "<com.android.server.StatusBarManagerService: void disable(int,android.os.IBinder,java.lang.String)>": [
        "android.permission.STATUS_BAR"
    ],
    "<com.android.server.StatusBarManagerService: void expandNotificationsPanel()>": [
        "android.permission.EXPAND_STATUS_BAR"
    ],
    "<com.android.server.StatusBarManagerService: void expandSettingsPanel()>": [
        "android.permission.EXPAND_STATUS_BAR"
    ],
    "<com.android.server.StatusBarManagerService: void onClearAllNotifications()>": [
        "android.permission.STATUS_BAR_SERVICE"
    ],
    "<com.android.server.StatusBarManagerService: void onNotificationClear(java.lang.String,java.lang.String,int)>": [
        "android.permission.STATUS_BAR_SERVICE"
    ],
    "<com.android.server.StatusBarManagerService: void onNotificationClick(java.lang.String,java.lang.String,int)>": [
        "android.permission.STATUS_BAR_SERVICE"
    ],
    "<com.android.server.StatusBarManagerService: void onNotificationError(java.lang.String,java.lang.String,int,int,int,java.lang.String)>": [
        "android.permission.STATUS_BAR_SERVICE"
    ],
    "<com.android.server.StatusBarManagerService: void onPanelRevealed()>": [
        "android.permission.STATUS_BAR_SERVICE"
    ],
    "<com.android.server.StatusBarManagerService: void registerStatusBar(com.android.internal.statusbar.IStatusBar,com.android.internal.statusbar.StatusBarIconList,java.util.List,java.util.List,[int,java.util.List)>": [
        "android.permission.STATUS_BAR_SERVICE"
    ],
    "<com.android.server.StatusBarManagerService: void removeIcon(java.lang.String)>": [
        "android.permission.STATUS_BAR"
    ],
    "<com.android.server.StatusBarManagerService: void setIcon(java.lang.String,java.lang.String,int,int,java.lang.String)>": [
        "android.permission.STATUS_BAR"
    ],
    "<com.android.server.StatusBarManagerService: void setIconVisibility(java.lang.String,boolean)>": [
        "android.permission.STATUS_BAR"
    ],
    "<com.android.server.StatusBarManagerService: void setImeWindowStatus(android.os.IBinder,int,int)>": [
        "android.permission.STATUS_BAR"
    ],
    "<com.android.server.StatusBarManagerService: void setSystemUiVisibility(int,int)>": [
        "android.permission.STATUS_BAR_SERVICE"
    ],
    "<com.android.server.StatusBarManagerService: void topAppWindowChanged(boolean)>": [
        "android.permission.STATUS_BAR"
    ],
    "<com.android.server.TelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.READ_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyCallForwardingChanged(boolean)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyCallState(int,java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyCellInfo(java.util.List)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyCellLocation(android.os.Bundle)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyDataActivity(int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyDataConnection(int,boolean,java.lang.String,java.lang.String,java.lang.String,android.net.LinkProperties,android.net.LinkCapabilities,int,boolean)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyDataConnectionFailed(java.lang.String,java.lang.String)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyMessageWaitingChanged(boolean)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyOtaspChanged(int)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifyServiceState(android.telephony.ServiceState)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TelephonyRegistry: void notifySignalStrength(android.telephony.SignalStrength)>": [
        "android.permission.MODIFY_PHONE_STATE"
    ],
    "<com.android.server.TextServicesManagerService: void setCurrentSpellChecker(java.lang.String,java.lang.String)>": [
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.TextServicesManagerService: void setCurrentSpellCheckerSubtype(java.lang.String,int)>": [
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.TextServicesManagerService: void setSpellCheckerEnabled(boolean)>": [
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.UpdateLockService: void acquireUpdateLock(android.os.IBinder,java.lang.String)>": [
        "android.permission.UPDATE_LOCK"
    ],
    "<com.android.server.UpdateLockService: void releaseUpdateLock(android.os.IBinder)>": [
        "android.permission.UPDATE_LOCK"
    ],
    "<com.android.server.VibratorService: void cancelVibrate(android.os.IBinder)>": [
        "android.permission.VIBRATE"
    ],
    "<com.android.server.VibratorService: void vibrate(int,java.lang.String,long,android.os.IBinder)>": [
        "android.permission.UPDATE_APP_OPS_STATS",
        "android.permission.VIBRATE"
    ],
    "<com.android.server.VibratorService: void vibratePattern(int,java.lang.String,[long,int,android.os.IBinder)>": [
        "android.permission.UPDATE_APP_OPS_STATS",
        "android.permission.VIBRATE"
    ],
    "<com.android.server.WallpaperManagerService: void setDimensionHints(int,int)>": [
        "android.permission.SET_WALLPAPER_HINTS"
    ],
    "<com.android.server.WallpaperManagerService: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<com.android.server.WallpaperManagerService: void setWallpaperComponent(android.content.ComponentName)>": [
        "android.permission.SET_WALLPAPER_COMPONENT"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService$Service: boolean findAccessibilityNodeInfoByAccessibilityId(int,long,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,long)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService$Service: boolean findAccessibilityNodeInfosByText(int,long,java.lang.String,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService$Service: boolean findAccessibilityNodeInfosByViewId(int,long,java.lang.String,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService$Service: boolean findFocus(int,long,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService$Service: boolean focusSearch(int,long,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService$Service: boolean performAccessibilityAction(int,long,int,android.os.Bundle,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService$Service: boolean performGlobalAction(int)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService: int addAccessibilityInteractionConnection(android.view.IWindow,android.view.accessibility.IAccessibilityInteractionConnection,int)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService: int addClient(android.view.accessibility.IAccessibilityManagerClient,int)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService: java.util.List getEnabledAccessibilityServiceList(int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService: java.util.List getInstalledAccessibilityServiceList(int)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService: void interrupt(int)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService: void removeAccessibilityInteractionConnection(android.view.IWindow)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService: boolean sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accessibility.AccessibilityManagerService: void temporaryEnableAccessibilityStateUntilKeyguardRemoved(android.content.ComponentName,boolean)>": [
        "temporaryEnableAccessibilityStateUntilKeyguardRemoved"
    ],
    "<com.android.server.accounts.AccountManagerService: void addAccount(android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String,[java.lang.String,boolean,android.os.Bundle)>": [
        "android.permission.MANAGE_ACCOUNTS"
    ],
    "<com.android.server.accounts.AccountManagerService: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>": [
        "android.permission.AUTHENTICATE_ACCOUNTS"
    ],
    "<com.android.server.accounts.AccountManagerService: void clearPassword(android.accounts.Account)>": [
        "android.permission.MANAGE_ACCOUNTS"
    ],
    "<com.android.server.accounts.AccountManagerService: void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse,android.accounts.Account,android.os.Bundle,boolean,int)>": [
        "android.permission.MANAGE_ACCOUNTS"
    ],
    "<com.android.server.accounts.AccountManagerService: void editProperties(android.accounts.IAccountManagerResponse,java.lang.String,boolean)>": [
        "android.permission.MANAGE_ACCOUNTS"
    ],
    "<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccounts(java.lang.String)>": [
        "android.permission.GET_ACCOUNTS"
    ],
    "<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsAsUser(java.lang.String,int)>": [
        "android.permission.GET_ACCOUNTS"
    ],
    "<com.android.server.accounts.AccountManagerService: void getAccountsByFeatures(android.accounts.IAccountManagerResponse,java.lang.String,[java.lang.String)>": [
        "android.permission.GET_ACCOUNTS"
    ],
    "<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsByTypeForPackage(java.lang.String,java.lang.String)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.accounts.AccountManagerService: android.accounts.Account[] getAccountsForPackage(java.lang.String,int)>": [
        "android.permission.GET_ACCOUNTS"
    ],
    "<com.android.server.accounts.AccountManagerService: void getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)>": [
        "android.permission.USE_CREDENTIALS"
    ],
    "<com.android.server.accounts.AccountManagerService: java.lang.String getPassword(android.accounts.Account)>": [
        "android.permission.AUTHENTICATE_ACCOUNTS"
    ],
    "<com.android.server.accounts.AccountManagerService: java.lang.String getUserData(android.accounts.Account,java.lang.String)>": [
        "android.permission.AUTHENTICATE_ACCOUNTS"
    ],
    "<com.android.server.accounts.AccountManagerService: void hasFeatures(android.accounts.IAccountManagerResponse,android.accounts.Account,[java.lang.String)>": [
        "android.permission.GET_ACCOUNTS"
    ],
    "<com.android.server.accounts.AccountManagerService: void invalidateAuthToken(java.lang.String,java.lang.String)>": [
        "android.permission.MANAGE_ACCOUNTS",
        "android.permission.USE_CREDENTIALS"
    ],
    "<com.android.server.accounts.AccountManagerService: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>": [
        "android.permission.AUTHENTICATE_ACCOUNTS"
    ],
    "<com.android.server.accounts.AccountManagerService: void removeAccount(android.accounts.IAccountManagerResponse,android.accounts.Account)>": [
        "android.permission.MANAGE_ACCOUNTS"
    ],
    "<com.android.server.accounts.AccountManagerService: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>": [
        "android.permission.AUTHENTICATE_ACCOUNTS"
    ],
    "<com.android.server.accounts.AccountManagerService: void setPassword(android.accounts.Account,java.lang.String)>": [
        "android.permission.AUTHENTICATE_ACCOUNTS"
    ],
    "<com.android.server.accounts.AccountManagerService: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>": [
        "android.permission.AUTHENTICATE_ACCOUNTS"
    ],
    "<com.android.server.accounts.AccountManagerService: void updateCredentials(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>": [
        "android.permission.MANAGE_ACCOUNTS"
    ],
    "<com.android.server.am.ActivityManagerService: void activitySlept(android.os.IBinder)>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.START_ANY_ACTIVITY"
    ],
    "<com.android.server.am.ActivityManagerService: void activityStopped(android.os.IBinder,android.os.Bundle,android.graphics.Bitmap,java.lang.CharSequence)>": [
        "android.permission.START_ANY_ACTIVITY"
    ],
    "<com.android.server.am.ActivityManagerService: boolean bindBackupAgent(android.content.pm.ApplicationInfo,int)>": [
        "android.permission.BACKUP",
        "android.permission.START_ANY_ACTIVITY"
    ],
    "<com.android.server.am.ActivityManagerService: int bindService(android.app.IApplicationThread,android.os.IBinder,android.content.Intent,java.lang.String,android.app.IServiceConnection,int,int)>": [
        "android.permission.START_ANY_ACTIVITY"
    ],
    "<com.android.server.am.ActivityManagerService: void clearPendingBackup()>": [
        "android.permission.BACKUP"
    ],
    "<com.android.server.am.ActivityManagerService: void crashApplication(int,int,java.lang.String,java.lang.String)>": [
        "android.permission.FORCE_STOP_PACKAGES"
    ],
    "<com.android.server.am.ActivityManagerService: void dismissKeyguardOnNextActivity()>": [
        "android.permission.START_ANY_ACTIVITY"
    ],
    "<com.android.server.am.ActivityManagerService: boolean dumpHeap(java.lang.String,int,boolean,java.lang.String,android.os.ParcelFileDescriptor)>": [
        "android.permission.SET_ACTIVITY_WATCHER"
    ],
    "<com.android.server.am.ActivityManagerService: void finishHeavyWeightApp()>": [
        "android.permission.FORCE_STOP_PACKAGES",
        "android.permission.START_ANY_ACTIVITY"
    ],
    "<com.android.server.am.ActivityManagerService: void finishReceiver(android.os.IBinder,int,java.lang.String,android.os.Bundle,boolean)>": [
        "android.permission.START_ANY_ACTIVITY"
    ],
    "<com.android.server.am.ActivityManagerService: void forceStopPackage(java.lang.String,int)>": [
        "android.permission.FORCE_STOP_PACKAGES",
        "android.permission.START_ANY_ACTIVITY"
    ],
    "<com.android.server.am.ActivityManagerService: android.app.IActivityManager$ContentProviderHolder getContentProviderExternal(java.lang.String,int,android.os.IBinder)>": [
        "android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY"
    ],
    "<com.android.server.am.ActivityManagerService: android.content.pm.UserInfo getCurrentUser()>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.am.ActivityManagerService: java.util.List getRecentTasks(int,int,int)>": [
        "android.permission.GET_TASKS"
    ],
    "<com.android.server.am.ActivityManagerService: int[] getRunningUserIds()>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.am.ActivityManagerService: android.app.ActivityManager$TaskThumbnails getTaskThumbnails(int)>": [
        "android.permission.READ_FRAME_BUFFER"
    ],
    "<com.android.server.am.ActivityManagerService: android.graphics.Bitmap getTaskTopThumbnail(int)>": [
        "android.permission.READ_FRAME_BUFFER"
    ],
    "<com.android.server.am.ActivityManagerService: java.util.List getTasks(int,int,android.app.IThumbnailReceiver)>": [
        "android.permission.GET_TASKS"
    ],
    "<com.android.server.am.ActivityManagerService: android.os.Bundle getTopActivityExtras(int)>": [
        "android.permission.GET_TOP_ACTIVITY_INFO"
    ],
    "<com.android.server.am.ActivityManagerService: void goingToSleep()>": [
        "android.permission.DEVICE_POWER",
        "android.permission.START_ANY_ACTIVITY"
    ],
    "<com.android.server.am.ActivityManagerService: void handleApplicationCrash(android.os.IBinder,android.app.ApplicationErrorReport$CrashInfo)>": [
        "android.permission.START_ANY_ACTIVITY"
    ],
    "<com.android.server.am.ActivityManagerService: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,android.app.ApplicationErrorReport$CrashInfo)>": [
        "android.permission.START_ANY_ACTIVITY"
    ],
    "<com.android.server.am.ActivityManagerService: void hang(android.os.IBinder,boolean)>": [
        "android.permission.SET_ACTIVITY_WATCHER"
    ],
    "<com.android.server.am.ActivityManagerService: long inputDispatchingTimedOut(int,boolean)>": [
        "android.permission.FILTER_EVENTS",
        "android.permission.START_ANY_ACTIVITY"
    ],
    "<com.android.server.am.ActivityManagerService: boolean isUserRunning(int,boolean)>": [
        "android.permission.INTERACT_ACROSS_USERS"
    ],
    "<com.android.server.am.ActivityManagerService: void killAllBackgroundProcesses()>": [
        "android.permission.KILL_BACKGROUND_PROCESSES",
        "android.permission.START_ANY_ACTIVITY"
    ],
    "<com.android.server.am.ActivityManagerService: void killBackgroundProcesses(java.lang.String,int)>": [
        "android.permission.KILL_BACKGROUND_PROCESSES"
    ],
    "<com.android.server.am.ActivityManagerService: void killUid(int,java.lang.String)>": [
        "android.permission.START_ANY_ACTIVITY"
    ],
    "<com.android.server.am.ActivityManagerService: boolean moveActivityTaskToBack(android.os.IBinder,boolean)>": [
        "android.permission.START_ANY_ACTIVITY"
    ],
    "<com.android.server.am.ActivityManagerService: void moveTaskBackwards(int)>": [
        "android.permission.REORDER_TASKS"
    ],
    "<com.android.server.am.ActivityManagerService: void moveTaskToBack(int)>": [
        "android.permission.REORDER_TASKS"
    ],
    "<com.android.server.am.ActivityManagerService: void moveTaskToFront(int,int,android.os.Bundle)>": [
        "android.permission.REORDER_TASKS",
        "android.permission.START_ANY_ACTIVITY"
    ],
    "<com.android.server.am.ActivityManagerService: boolean navigateUpTo(android.os.IBinder,android.content.Intent,int,android.content.Intent)>": [
        "android.permission.START_ANY_ACTIVITY"
    ],
    "<com.android.server.am.ActivityManagerService: boolean profileControl(java.lang.String,int,boolean,java.lang.String,android.os.ParcelFileDescriptor,int)>": [
        "android.permission.SET_ACTIVITY_WATCHER"
    ],
    "<com.android.server.am.ActivityManagerService: void registerProcessObserver(android.app.IProcessObserver)>": [
        "android.permission.SET_ACTIVITY_WATCHER"
    ],
    "<com.android.server.am.ActivityManagerService: void registerUserSwitchObserver(android.app.IUserSwitchObserver)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.am.ActivityManagerService: void removeContentProviderExternal(java.lang.String,android.os.IBinder)>": [
        "android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY",
        "android.permission.START_ANY_ACTIVITY"
    ],
    "<com.android.server.am.ActivityManagerService: boolean removeSubTask(int,int)>": [
        "android.permission.REMOVE_TASKS"
    ],
    "<com.android.server.am.ActivityManagerService: boolean removeTask(int,int)>": [
        "android.permission.REMOVE_TASKS"
    ],
    "<com.android.server.am.ActivityManagerService: void requestBugReport()>": [
        "android.permission.DUMP"
    ],
    "<com.android.server.am.ActivityManagerService: void resumeAppSwitches()>": [
        "android.permission.STOP_APP_SWITCHES"
    ],
    "<com.android.server.am.ActivityManagerService: void setActivityController(android.app.IActivityController)>": [
        "android.permission.SET_ACTIVITY_WATCHER"
    ],
    "<com.android.server.am.ActivityManagerService: void setAlwaysFinish(boolean)>": [
        "android.permission.SET_ALWAYS_FINISH"
    ],
    "<com.android.server.am.ActivityManagerService: void setDebugApp(java.lang.String,boolean,boolean)>": [
        "android.permission.SET_DEBUG_APP"
    ],
    "<com.android.server.am.ActivityManagerService: void setFrontActivityScreenCompatMode(int)>": [
        "android.permission.SET_SCREEN_COMPATIBILITY",
        "android.permission.START_ANY_ACTIVITY"
    ],
    "<com.android.server.am.ActivityManagerService: void setLockScreenShown(boolean)>": [
        "android.permission.DEVICE_POWER",
        "android.permission.START_ANY_ACTIVITY"
    ],
    "<com.android.server.am.ActivityManagerService: void setPackageAskScreenCompat(java.lang.String,boolean)>": [
        "android.permission.SET_SCREEN_COMPATIBILITY"
    ],
    "<com.android.server.am.ActivityManagerService: void setPackageScreenCompatMode(java.lang.String,int)>": [
        "android.permission.SET_SCREEN_COMPATIBILITY",
        "android.permission.START_ANY_ACTIVITY"
    ],
    "<com.android.server.am.ActivityManagerService: void setProcessForeground(android.os.IBinder,int,boolean)>": [
        "android.permission.SET_PROCESS_LIMIT",
        "android.permission.START_ANY_ACTIVITY"
    ],
    "<com.android.server.am.ActivityManagerService: void setProcessLimit(int)>": [
        "android.permission.SET_PROCESS_LIMIT",
        "android.permission.START_ANY_ACTIVITY"
    ],
    "<com.android.server.am.ActivityManagerService: void setRequestedOrientation(android.os.IBinder,int)>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.START_ANY_ACTIVITY"
    ],
    "<com.android.server.am.ActivityManagerService: boolean shutdown(int)>": [
        "android.permission.SHUTDOWN",
        "android.permission.START_ANY_ACTIVITY"
    ],
    "<com.android.server.am.ActivityManagerService: void signalPersistentProcesses(int)>": [
        "android.permission.SIGNAL_PERSISTENT_PROCESSES"
    ],
    "<com.android.server.am.ActivityManagerService: int startActivities(android.app.IApplicationThread,java.lang.String,[android.content.Intent,[java.lang.String,android.os.IBinder,android.os.Bundle,int)>": [
        "android.permission.SET_DEBUG_APP"
    ],
    "<com.android.server.am.ActivityManagerService: int startActivity(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,java.lang.String,android.os.ParcelFileDescriptor,android.os.Bundle)>": [
        "android.permission.SET_DEBUG_APP"
    ],
    "<com.android.server.am.ActivityManagerService: android.app.IActivityManager$WaitResult startActivityAndWait(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,java.lang.String,android.os.ParcelFileDescriptor,android.os.Bundle,int)>": [
        "android.permission.SET_DEBUG_APP"
    ],
    "<com.android.server.am.ActivityManagerService: int startActivityAsUser(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,java.lang.String,android.os.ParcelFileDescriptor,android.os.Bundle,int)>": [
        "android.permission.SET_DEBUG_APP"
    ],
    "<com.android.server.am.ActivityManagerService: int startActivityWithConfig(android.app.IApplicationThread,java.lang.String,android.content.Intent,java.lang.String,android.os.IBinder,java.lang.String,int,int,android.content.res.Configuration,android.os.Bundle,int)>": [
        "android.permission.SET_DEBUG_APP"
    ],
    "<com.android.server.am.ActivityManagerService: void startRunning(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.START_ANY_ACTIVITY"
    ],
    "<com.android.server.am.ActivityManagerService: void stopAppSwitches()>": [
        "android.permission.START_ANY_ACTIVITY",
        "android.permission.STOP_APP_SWITCHES"
    ],
    "<com.android.server.am.ActivityManagerService: int stopUser(int,android.app.IStopUserCallback)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.am.ActivityManagerService: boolean switchUser(int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.am.ActivityManagerService: void unbroadcastIntent(android.app.IApplicationThread,android.content.Intent,int)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<com.android.server.am.ActivityManagerService: void unhandledBack()>": [
        "android.permission.FORCE_BACK"
    ],
    "<com.android.server.am.ActivityManagerService: void unregisterReceiver(android.content.IIntentReceiver)>": [
        "android.permission.BROADCAST_STICKY",
        "android.permission.START_ANY_ACTIVITY"
    ],
    "<com.android.server.am.ActivityManagerService: void updateConfiguration(android.content.res.Configuration)>": [
        "android.permission.CHANGE_CONFIGURATION"
    ],
    "<com.android.server.am.ActivityManagerService: void updatePersistentConfiguration(android.content.res.Configuration)>": [
        "android.permission.CHANGE_CONFIGURATION"
    ],
    "<com.android.server.am.ActivityManagerService: void wakingUp()>": [
        "android.permission.DEVICE_POWER",
        "android.permission.START_ANY_ACTIVITY"
    ],
    "<com.android.server.am.BatteryStatsService: long getAwakeTimeBattery()>": [
        "android.permission.BATTERY_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: long getAwakeTimePlugged()>": [
        "android.permission.BATTERY_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: B[] getStatistics()>": [
        "android.permission.BATTERY_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteBluetoothOff()>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteBluetoothOn()>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteFullWifiLockAcquired(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteFullWifiLockAcquiredFromSource(android.os.WorkSource)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteFullWifiLockReleased(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteFullWifiLockReleasedFromSource(android.os.WorkSource)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteInputEvent()>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteNetworkInterfaceType(java.lang.String,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void notePhoneDataConnectionState(int,boolean)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void notePhoneOff()>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void notePhoneOn()>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void notePhoneSignalStrength(android.telephony.SignalStrength)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void notePhoneState(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteScreenBrightness(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteScreenOff()>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteScreenOn()>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteStartGps(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteStartSensor(int,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteStartWakelock(int,int,java.lang.String,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteStartWakelockFromSource(android.os.WorkSource,int,java.lang.String,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteStopGps(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteStopSensor(int,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteStopWakelock(int,int,java.lang.String,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteStopWakelockFromSource(android.os.WorkSource,int,java.lang.String,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteUserActivity(int,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteVibratorOff(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteVibratorOn(int,long)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiMulticastDisabled(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiMulticastDisabledFromSource(android.os.WorkSource)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiMulticastEnabled(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiMulticastEnabledFromSource(android.os.WorkSource)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiOff()>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiOn()>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiRunning(android.os.WorkSource)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiRunningChanged(android.os.WorkSource,android.os.WorkSource)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiScanStarted(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiScanStartedFromSource(android.os.WorkSource)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiScanStopped(int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiScanStoppedFromSource(android.os.WorkSource)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void noteWifiStopped(android.os.WorkSource)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.BatteryStatsService: void setBatteryState(int,int,int,int,int,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.UsageStatsService: com.android.internal.os.PkgUsageStats[] getAllPkgUsageStats()>": [
        "android.permission.PACKAGE_USAGE_STATS"
    ],
    "<com.android.server.am.UsageStatsService: com.android.internal.os.PkgUsageStats getPkgUsageStats(android.content.ComponentName)>": [
        "android.permission.PACKAGE_USAGE_STATS"
    ],
    "<com.android.server.am.UsageStatsService: void noteLaunchTime(android.content.ComponentName,int)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.UsageStatsService: void notePauseComponent(android.content.ComponentName)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.am.UsageStatsService: void noteResumeComponent(android.content.ComponentName)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.content.ContentService: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>": [
        "android.permission.WRITE_SYNC_SETTINGS"
    ],
    "<com.android.server.content.ContentService: java.util.List getCurrentSyncs()>": [
        "android.permission.READ_SYNC_STATS"
    ],
    "<com.android.server.content.ContentService: int getIsSyncable(android.accounts.Account,java.lang.String)>": [
        "android.permission.READ_SYNC_SETTINGS"
    ],
    "<com.android.server.content.ContentService: boolean getMasterSyncAutomatically()>": [
        "android.permission.READ_SYNC_SETTINGS"
    ],
    "<com.android.server.content.ContentService: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>": [
        "android.permission.READ_SYNC_SETTINGS"
    ],
    "<com.android.server.content.ContentService: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>": [
        "android.permission.READ_SYNC_SETTINGS"
    ],
    "<com.android.server.content.ContentService: android.content.SyncStatusInfo getSyncStatus(android.accounts.Account,java.lang.String)>": [
        "android.permission.READ_SYNC_STATS"
    ],
    "<com.android.server.content.ContentService: boolean isSyncActive(android.accounts.Account,java.lang.String)>": [
        "android.permission.READ_SYNC_STATS"
    ],
    "<com.android.server.content.ContentService: boolean isSyncPending(android.accounts.Account,java.lang.String)>": [
        "android.permission.READ_SYNC_STATS"
    ],
    "<com.android.server.content.ContentService: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.content.ContentService: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>": [
        "android.permission.WRITE_SYNC_SETTINGS"
    ],
    "<com.android.server.content.ContentService: void setIsSyncable(android.accounts.Account,java.lang.String,int)>": [
        "android.permission.WRITE_SYNC_SETTINGS"
    ],
    "<com.android.server.content.ContentService: void setMasterSyncAutomatically(boolean)>": [
        "android.permission.WRITE_SYNC_SETTINGS"
    ],
    "<com.android.server.content.ContentService: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)>": [
        "android.permission.WRITE_SYNC_SETTINGS"
    ],
    "<com.android.server.display.DisplayManagerService: void connectWifiDisplay(java.lang.String)>": [
        "android.permission.CONFIGURE_WIFI_DISPLAY"
    ],
    "<com.android.server.display.DisplayManagerService: void forgetWifiDisplay(java.lang.String)>": [
        "android.permission.CONFIGURE_WIFI_DISPLAY"
    ],
    "<com.android.server.display.DisplayManagerService: void renameWifiDisplay(java.lang.String,java.lang.String)>": [
        "android.permission.CONFIGURE_WIFI_DISPLAY"
    ],
    "<com.android.server.dreams.DreamManagerService: void awaken()>": [
        "android.permission.WRITE_DREAM_STATE"
    ],
    "<com.android.server.dreams.DreamManagerService: void dream()>": [
        "android.permission.WRITE_DREAM_STATE"
    ],
    "<com.android.server.dreams.DreamManagerService: android.content.ComponentName getDefaultDreamComponent()>": [
        "android.permission.READ_DREAM_STATE"
    ],
    "<com.android.server.dreams.DreamManagerService: android.content.ComponentName[] getDreamComponents()>": [
        "android.permission.READ_DREAM_STATE"
    ],
    "<com.android.server.dreams.DreamManagerService: boolean isDreaming()>": [
        "android.permission.READ_DREAM_STATE"
    ],
    "<com.android.server.dreams.DreamManagerService: void setDreamComponents([android.content.ComponentName)>": [
        "android.permission.WRITE_DREAM_STATE"
    ],
    "<com.android.server.dreams.DreamManagerService: void testDream(android.content.ComponentName)>": [
        "android.permission.WRITE_DREAM_STATE"
    ],
    "<com.android.server.input.InputManagerService: void addKeyboardLayoutForInputDevice(java.lang.String,java.lang.String)>": [
        "android.permission.SET_KEYBOARD_LAYOUT"
    ],
    "<com.android.server.input.InputManagerService: void removeKeyboardLayoutForInputDevice(java.lang.String,java.lang.String)>": [
        "android.permission.SET_KEYBOARD_LAYOUT"
    ],
    "<com.android.server.input.InputManagerService: void setCurrentKeyboardLayoutForInputDevice(java.lang.String,java.lang.String)>": [
        "android.permission.SET_KEYBOARD_LAYOUT"
    ],
    "<com.android.server.input.InputManagerService: void tryPointerSpeed(int)>": [
        "android.permission.SET_POINTER_SPEED"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkPolicy[] getNetworkPolicies()>": [
        "android.permission.MANAGE_NETWORK_POLICY",
        "android.permission.READ_PHONE_STATE"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: android.net.NetworkQuotaInfo getNetworkQuotaInfo(android.net.NetworkState)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: boolean getRestrictBackground()>": [
        "android.permission.MANAGE_NETWORK_POLICY"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: int getUidPolicy(int)>": [
        "android.permission.MANAGE_NETWORK_POLICY"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: int[] getUidsWithPolicy(int)>": [
        "android.permission.MANAGE_NETWORK_POLICY"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: boolean isUidForeground(int)>": [
        "android.permission.MANAGE_NETWORK_POLICY"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: void registerListener(android.net.INetworkPolicyListener)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: void setNetworkPolicies([android.net.NetworkPolicy)>": [
        "android.permission.MANAGE_NETWORK_POLICY"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: void setRestrictBackground(boolean)>": [
        "android.permission.MANAGE_NETWORK_POLICY"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: void setUidPolicy(int,int)>": [
        "android.permission.MANAGE_NETWORK_POLICY"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: void snoozeLimit(android.net.NetworkTemplate)>": [
        "android.permission.MANAGE_NETWORK_POLICY"
    ],
    "<com.android.server.net.NetworkPolicyManagerService: void unregisterListener(android.net.INetworkPolicyListener)>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.net.NetworkStatsService: void advisePersistThreshold(long)>": [
        "android.permission.MODIFY_NETWORK_ACCOUNTING"
    ],
    "<com.android.server.net.NetworkStatsService: void forceUpdate()>": [
        "android.permission.READ_NETWORK_USAGE_HISTORY"
    ],
    "<com.android.server.net.NetworkStatsService: android.net.NetworkStats getDataLayerSnapshotForUid(int)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<com.android.server.net.NetworkStatsService: long getNetworkTotalBytes(android.net.NetworkTemplate,long,long)>": [
        "android.permission.READ_NETWORK_USAGE_HISTORY"
    ],
    "<com.android.server.net.NetworkStatsService: void incrementOperationCount(int,int,int)>": [
        "android.permission.MODIFY_NETWORK_ACCOUNTING"
    ],
    "<com.android.server.net.NetworkStatsService: android.net.INetworkStatsSession openSession()>": [
        "android.permission.READ_NETWORK_USAGE_HISTORY"
    ],
    "<com.android.server.net.NetworkStatsService: void setUidForeground(int,boolean)>": [
        "android.permission.MODIFY_NETWORK_ACCOUNTING"
    ],
    "<com.android.server.pm.PackageManagerService: void addPreferredActivity(android.content.IntentFilter,int,[android.content.ComponentName,android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.SET_PREFERRED_APPLICATIONS"
    ],
    "<com.android.server.pm.PackageManagerService: void clearApplicationUserData(java.lang.String,android.content.pm.IPackageDataObserver,int)>": [
        "android.permission.CLEAR_APP_USER_DATA",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: void clearPackagePreferredActivities(java.lang.String)>": [
        "android.permission.SET_PREFERRED_APPLICATIONS"
    ],
    "<com.android.server.pm.PackageManagerService: void deleteApplicationCacheFiles(java.lang.String,android.content.pm.IPackageDataObserver)>": [
        "android.permission.DELETE_CACHE_FILES"
    ],
    "<com.android.server.pm.PackageManagerService: void deletePackageAsUser(java.lang.String,android.content.pm.IPackageDeleteObserver,int,int)>": [
        "android.permission.DELETE_PACKAGES",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: void extendVerificationTimeout(int,int,long)>": [
        "android.permission.PACKAGE_VERIFICATION_AGENT"
    ],
    "<com.android.server.pm.PackageManagerService: void freeStorage(long,android.content.IntentSender)>": [
        "android.permission.CLEAR_APP_CACHE"
    ],
    "<com.android.server.pm.PackageManagerService: void freeStorageAndNotify(long,android.content.pm.IPackageDataObserver)>": [
        "android.permission.CLEAR_APP_CACHE"
    ],
    "<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: int getApplicationEnabledSetting(java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: int getComponentEnabledSetting(android.content.ComponentName,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: android.content.pm.ParceledListSlice getInstalledPackages(int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: void getPackageSizeInfo(java.lang.String,int,android.content.pm.IPackageStatsObserver)>": [
        "android.permission.GET_PACKAGE_SIZE"
    ],
    "<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()>": [
        "android.permission.PACKAGE_VERIFICATION_AGENT"
    ],
    "<com.android.server.pm.PackageManagerService: void grantPermission(java.lang.String,java.lang.String)>": [
        "android.permission.GRANT_REVOKE_PERMISSIONS"
    ],
    "<com.android.server.pm.PackageManagerService: int installExistingPackageAsUser(java.lang.String,int)>": [
        "android.permission.INSTALL_PACKAGES",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: void installPackage(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String)>": [
        "android.permission.INSTALL_PACKAGES"
    ],
    "<com.android.server.pm.PackageManagerService: void installPackageWithVerification(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String,android.net.Uri,android.content.pm.ManifestDigest,android.content.pm.ContainerEncryptionParams)>": [
        "android.permission.INSTALL_PACKAGES"
    ],
    "<com.android.server.pm.PackageManagerService: void installPackageWithVerificationAndEncryption(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String,android.content.pm.VerificationParams,android.content.pm.ContainerEncryptionParams)>": [
        "android.permission.INSTALL_PACKAGES"
    ],
    "<com.android.server.pm.PackageManagerService: void movePackage(java.lang.String,android.content.pm.IPackageMoveObserver,int)>": [
        "android.permission.MOVE_PACKAGE"
    ],
    "<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivityOptions(android.content.ComponentName,[android.content.Intent,[java.lang.String,android.content.Intent,java.lang.String,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: java.util.List queryIntentReceivers(android.content.Intent,java.lang.String,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: java.util.List queryIntentServices(android.content.Intent,java.lang.String,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: void replacePreferredActivity(android.content.IntentFilter,int,[android.content.ComponentName,android.content.ComponentName)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL",
        "android.permission.SET_PREFERRED_APPLICATIONS"
    ],
    "<com.android.server.pm.PackageManagerService: void resetPreferredActivities(int)>": [
        "android.permission.SET_PREFERRED_APPLICATIONS"
    ],
    "<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int,int)>": [
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: void revokePermission(java.lang.String,java.lang.String)>": [
        "android.permission.GRANT_REVOKE_PERMISSIONS"
    ],
    "<com.android.server.pm.PackageManagerService: void setApplicationEnabledSetting(java.lang.String,int,int,int,java.lang.String)>": [
        "android.permission.CHANGE_COMPONENT_ENABLED_STATE",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: void setComponentEnabledSetting(android.content.ComponentName,int,int,int)>": [
        "android.permission.CHANGE_COMPONENT_ENABLED_STATE",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: boolean setInstallLocation(int)>": [
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.pm.PackageManagerService: void setPackageStoppedState(java.lang.String,boolean,int)>": [
        "android.permission.CHANGE_COMPONENT_ENABLED_STATE",
        "android.permission.INTERACT_ACROSS_USERS_FULL"
    ],
    "<com.android.server.pm.PackageManagerService: void setPermissionEnforced(java.lang.String,boolean)>": [
        "android.permission.GRANT_REVOKE_PERMISSIONS"
    ],
    "<com.android.server.pm.PackageManagerService: void verifyPendingInstall(int,int)>": [
        "android.permission.PACKAGE_VERIFICATION_AGENT"
    ],
    "<com.android.server.power.PowerManagerService: void acquireWakeLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)>": [
        "android.permission.UPDATE_DEVICE_STATS",
        "android.permission.WAKE_LOCK"
    ],
    "<com.android.server.power.PowerManagerService: void crash(java.lang.String)>": [
        "android.permission.REBOOT"
    ],
    "<com.android.server.power.PowerManagerService: void goToSleep(long,int)>": [
        "android.permission.DEVICE_POWER"
    ],
    "<com.android.server.power.PowerManagerService: void nap(long)>": [
        "android.permission.DEVICE_POWER"
    ],
    "<com.android.server.power.PowerManagerService: void reboot(boolean,java.lang.String,boolean)>": [
        "android.permission.REBOOT"
    ],
    "<com.android.server.power.PowerManagerService: void releaseWakeLock(android.os.IBinder,int)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<com.android.server.power.PowerManagerService: void setAttentionLight(boolean,int)>": [
        "android.permission.DEVICE_POWER"
    ],
    "<com.android.server.power.PowerManagerService: void setStayOnSetting(int)>": [
        "android.permission.WRITE_SETTINGS"
    ],
    "<com.android.server.power.PowerManagerService: void setTemporaryScreenAutoBrightnessAdjustmentSettingOverride(float)>": [
        "android.permission.DEVICE_POWER"
    ],
    "<com.android.server.power.PowerManagerService: void setTemporaryScreenBrightnessSettingOverride(int)>": [
        "android.permission.DEVICE_POWER"
    ],
    "<com.android.server.power.PowerManagerService: void shutdown(boolean,boolean)>": [
        "android.permission.REBOOT"
    ],
    "<com.android.server.power.PowerManagerService: void updateWakeLockWorkSource(android.os.IBinder,android.os.WorkSource)>": [
        "android.permission.UPDATE_DEVICE_STATS",
        "android.permission.WAKE_LOCK"
    ],
    "<com.android.server.power.PowerManagerService: void userActivity(long,int,int)>": [
        "android.permission.DEVICE_POWER"
    ],
    "<com.android.server.power.PowerManagerService: void wakeUp(long)>": [
        "android.permission.DEVICE_POWER"
    ],
    "<com.android.server.sip.SipService: void close(java.lang.String)>": [
        "android.permission.USE_SIP"
    ],
    "<com.android.server.sip.SipService: android.net.sip.ISipSession createSession(android.net.sip.SipProfile,android.net.sip.ISipSessionListener)>": [
        "android.permission.USE_SIP"
    ],
    "<com.android.server.sip.SipService: android.net.sip.SipProfile[] getListOfProfiles()>": [
        "android.permission.USE_SIP"
    ],
    "<com.android.server.sip.SipService: android.net.sip.ISipSession getPendingSession(java.lang.String)>": [
        "android.permission.USE_SIP"
    ],
    "<com.android.server.sip.SipService: boolean isOpened(java.lang.String)>": [
        "android.permission.USE_SIP"
    ],
    "<com.android.server.sip.SipService: boolean isRegistered(java.lang.String)>": [
        "android.permission.USE_SIP"
    ],
    "<com.android.server.sip.SipService: void open(android.net.sip.SipProfile)>": [
        "android.permission.USE_SIP"
    ],
    "<com.android.server.sip.SipService: void open3(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.ISipSessionListener)>": [
        "android.permission.USE_SIP"
    ],
    "<com.android.server.sip.SipService: void setRegistrationListener(java.lang.String,android.net.sip.ISipSessionListener)>": [
        "android.permission.USE_SIP"
    ],
    "<com.android.server.usb.UsbService: void allowUsbDebugging(boolean,java.lang.String)>": [
        "android.permission.MANAGE_USB"
    ],
    "<com.android.server.usb.UsbService: void clearDefaults(java.lang.String,int)>": [
        "android.permission.MANAGE_USB"
    ],
    "<com.android.server.usb.UsbService: void clearUsbDebuggingKeys()>": [
        "android.permission.MANAGE_USB"
    ],
    "<com.android.server.usb.UsbService: void denyUsbDebugging()>": [
        "android.permission.MANAGE_USB"
    ],
    "<com.android.server.usb.UsbService: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)>": [
        "android.permission.MANAGE_USB"
    ],
    "<com.android.server.usb.UsbService: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>": [
        "android.permission.MANAGE_USB"
    ],
    "<com.android.server.usb.UsbService: boolean hasDefaults(java.lang.String,int)>": [
        "android.permission.MANAGE_USB"
    ],
    "<com.android.server.usb.UsbService: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String,int)>": [
        "android.permission.MANAGE_USB"
    ],
    "<com.android.server.usb.UsbService: void setCurrentFunction(java.lang.String,boolean)>": [
        "android.permission.MANAGE_USB"
    ],
    "<com.android.server.usb.UsbService: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String,int)>": [
        "android.permission.MANAGE_USB"
    ],
    "<com.android.server.usb.UsbService: void setMassStorageBackingFile(java.lang.String)>": [
        "android.permission.MANAGE_USB"
    ],
    "<com.android.server.wifi.WifiService: void acquireMulticastLock(android.os.IBinder,java.lang.String)>": [
        "android.permission.CHANGE_WIFI_MULTICAST_STATE"
    ],
    "<com.android.server.wifi.WifiService: boolean acquireWifiLock(android.os.IBinder,int,java.lang.String,android.os.WorkSource)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<com.android.server.wifi.WifiService: int addOrUpdateNetwork(android.net.wifi.WifiConfiguration)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: void addToBlacklist(java.lang.String)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: void captivePortalCheckComplete()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.wifi.WifiService: void clearBlacklist()>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: boolean disableNetwork(int)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: void disconnect()>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: boolean enableNetwork(int,boolean)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: java.lang.String getConfigFile()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: java.util.List getConfiguredNetworks()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: android.net.wifi.WifiInfo getConnectionInfo()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: android.net.DhcpInfo getDhcpInfo()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: int getFrequencyBand()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: java.util.List getScanResults(java.lang.String)>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: android.net.wifi.WifiConfiguration getWifiApConfiguration()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: int getWifiApEnabledState()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: int getWifiEnabledState()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: android.os.Messenger getWifiServiceMessenger()>": [
        "android.permission.ACCESS_WIFI_STATE",
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: android.os.Messenger getWifiStateMachineMessenger()>": [
        "android.permission.ACCESS_WIFI_STATE",
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: void initializeMulticastFiltering()>": [
        "android.permission.CHANGE_WIFI_MULTICAST_STATE"
    ],
    "<com.android.server.wifi.WifiService: boolean isMulticastEnabled()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: boolean isScanAlwaysAvailable()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: boolean pingSupplicant()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: void reassociate()>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: void reconnect()>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: void releaseMulticastLock()>": [
        "android.permission.CHANGE_WIFI_MULTICAST_STATE"
    ],
    "<com.android.server.wifi.WifiService: boolean releaseWifiLock(android.os.IBinder)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<com.android.server.wifi.WifiService: boolean removeNetwork(int)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: boolean saveConfiguration()>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: void setCountryCode(java.lang.String,boolean)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: void setFrequencyBand(int,boolean)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: boolean setWifiEnabled(boolean)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: void startScan()>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<com.android.server.wifi.WifiService: void startWifi()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.wifi.WifiService: void stopWifi()>": [
        "android.permission.CONNECTIVITY_INTERNAL"
    ],
    "<com.android.server.wifi.WifiService: void updateWifiLockWorkSource(android.os.IBinder,android.os.WorkSource)>": [
        "android.permission.UPDATE_DEVICE_STATS"
    ],
    "<com.android.server.wm.WindowManagerService: void addAppToken(int,android.view.IApplicationToken,int,int,boolean,boolean)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void addWindowToken(android.os.IBinder,int)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void clearForcedDisplayDensity(int)>": [
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.wm.WindowManagerService: void clearForcedDisplaySize(int)>": [
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.wm.WindowManagerService: void disableKeyguard(android.os.IBinder,java.lang.String)>": [
        "android.permission.DISABLE_KEYGUARD"
    ],
    "<com.android.server.wm.WindowManagerService: void dismissKeyguard()>": [
        "android.permission.DISABLE_KEYGUARD"
    ],
    "<com.android.server.wm.WindowManagerService: void executeAppTransition()>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)>": [
        "android.permission.DISABLE_KEYGUARD"
    ],
    "<com.android.server.wm.WindowManagerService: void freezeRotation(int)>": [
        "android.permission.SET_ORIENTATION"
    ],
    "<com.android.server.wm.WindowManagerService: android.view.MagnificationSpec getCompatibleMagnificationSpecForWindow(android.os.IBinder)>": [
        "android.permission.MAGNIFY_DISPLAY"
    ],
    "<com.android.server.wm.WindowManagerService: android.os.IBinder getFocusedWindowToken()>": [
        "android.permission.RETRIEVE_WINDOW_INFO"
    ],
    "<com.android.server.wm.WindowManagerService: void getWindowFrame(android.os.IBinder,android.graphics.Rect)>": [
        "android.permission.RETRIEVE_WINDOW_INFO"
    ],
    "<com.android.server.wm.WindowManagerService: boolean isViewServerRunning()>": [
        "android.permission.DUMP"
    ],
    "<com.android.server.wm.WindowManagerService: void moveAppToken(int,android.os.IBinder)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void moveAppTokensToBottom(java.util.List)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void moveAppTokensToTop(java.util.List)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void pauseKeyDispatching(android.os.IBinder)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void prepareAppTransition(int,boolean)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void reenableKeyguard(android.os.IBinder)>": [
        "android.permission.DISABLE_KEYGUARD"
    ],
    "<com.android.server.wm.WindowManagerService: void removeAppToken(android.os.IBinder)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void removeWindowToken(android.os.IBinder)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void resumeKeyDispatching(android.os.IBinder)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: android.graphics.Bitmap screenshotApplications(android.os.IBinder,int,int,int)>": [
        "android.permission.READ_FRAME_BUFFER"
    ],
    "<com.android.server.wm.WindowManagerService: void setAnimationScale(int,float)>": [
        "android.permission.SET_ANIMATION_SCALE"
    ],
    "<com.android.server.wm.WindowManagerService: void setAnimationScales([float)>": [
        "android.permission.SET_ANIMATION_SCALE"
    ],
    "<com.android.server.wm.WindowManagerService: void setAppGroupId(android.os.IBinder,int)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void setAppOrientation(android.view.IApplicationToken,int)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void setAppStartingWindow(android.os.IBinder,java.lang.String,int,android.content.res.CompatibilityInfo,java.lang.CharSequence,int,int,int,android.os.IBinder,boolean)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void setAppVisibility(android.os.IBinder,boolean)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void setAppWillBeHidden(android.os.IBinder)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void setEventDispatching(boolean)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void setFocusedApp(android.os.IBinder,boolean)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void setForcedDisplayDensity(int,int)>": [
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.wm.WindowManagerService: void setForcedDisplaySize(int,int,int)>": [
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.wm.WindowManagerService: void setInputFilter(android.view.IInputFilter)>": [
        "android.permission.FILTER_EVENTS"
    ],
    "<com.android.server.wm.WindowManagerService: void setMagnificationCallbacks(android.view.IMagnificationCallbacks)>": [
        "android.permission.MAGNIFY_DISPLAY"
    ],
    "<com.android.server.wm.WindowManagerService: void setMagnificationSpec(android.view.MagnificationSpec)>": [
        "android.permission.MAGNIFY_DISPLAY"
    ],
    "<com.android.server.wm.WindowManagerService: void setNewConfiguration(android.content.res.Configuration)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void setOverscan(int,int,int,int,int)>": [
        "android.permission.WRITE_SECURE_SETTINGS"
    ],
    "<com.android.server.wm.WindowManagerService: void showAssistant()>": [
        "android.permission.DEVICE_POWER"
    ],
    "<com.android.server.wm.WindowManagerService: void startAppFreezingScreen(android.os.IBinder,int)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void startFreezingScreen(int,int)>": [
        "android.permission.FREEZE_SCREEN"
    ],
    "<com.android.server.wm.WindowManagerService: boolean startViewServer(int)>": [
        "android.permission.DUMP"
    ],
    "<com.android.server.wm.WindowManagerService: void statusBarVisibilityChanged(int)>": [
        "android.permission.STATUS_BAR"
    ],
    "<com.android.server.wm.WindowManagerService: void stopAppFreezingScreen(android.os.IBinder,boolean)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.android.server.wm.WindowManagerService: void stopFreezingScreen()>": [
        "android.permission.FREEZE_SCREEN"
    ],
    "<com.android.server.wm.WindowManagerService: boolean stopViewServer()>": [
        "android.permission.DUMP"
    ],
    "<com.android.server.wm.WindowManagerService: void thawRotation()>": [
        "android.permission.SET_ORIENTATION"
    ],
    "<com.android.server.wm.WindowManagerService: android.content.res.Configuration updateOrientationFromAppTokens(android.content.res.Configuration,android.os.IBinder)>": [
        "android.permission.MANAGE_APP_TOKENS"
    ],
    "<com.ti.server.StubFmService: boolean resumeFm()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxChangeAudioTarget(int,int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxChangeDigitalTargetConfiguration(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxCompleteScan_nb()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxDisable()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxDisableAudioRouting()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxDisableRds()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxDisableRds_nb()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxEnable()>": [
        "ti.permission.FMRX",
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxEnableAudioRouting()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxEnableRds()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxEnableRds_nb()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: int rxGetBand()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxGetBand_nb()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: int rxGetChannelSpacing()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxGetChannelSpacing_nb()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: int rxGetCompleteScanProgress()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxGetCompleteScanProgress_nb()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: int rxGetDeEmphasisFilter()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxGetDeEmphasisFilter_nb()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: int rxGetFMState()>": [
        "ti.permission.FMRX"
    ],
    "<com.ti.server.StubFmService: double rxGetFwVersion()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: int rxGetMonoStereoMode()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxGetMonoStereoMode_nb()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: int rxGetMuteMode()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxGetMuteMode_nb()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: int rxGetRdsAfSwitchMode()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxGetRdsAfSwitchMode_nb()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: long rxGetRdsGroupMask()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxGetRdsGroupMask_nb()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: int rxGetRdsSystem()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxGetRdsSystem_nb()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: int rxGetRfDependentMuteMode()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxGetRfDependentMuteMode_nb()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: int rxGetRssi()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: int rxGetRssiThreshold()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxGetRssiThreshold_nb()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxGetRssi_nb()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: int rxGetTunedFrequency()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxGetTunedFrequency_nb()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: int rxGetVolume()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxGetVolume_nb()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxIsEnabled()>": [
        "ti.permission.FMRX"
    ],
    "<com.ti.server.StubFmService: boolean rxIsFMPaused()>": [
        "ti.permission.FMRX"
    ],
    "<com.ti.server.StubFmService: boolean rxIsValidChannel()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxSeek_nb(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxSetBand(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxSetBand_nb(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxSetChannelSpacing(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxSetChannelSpacing_nb(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxSetDeEmphasisFilter(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxSetDeEmphasisFilter_nb(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxSetMonoStereoMode(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxSetMonoStereoMode_nb(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxSetMuteMode(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxSetMuteMode_nb(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxSetRdsAfSwitchMode(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxSetRdsAfSwitchMode_nb(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxSetRdsGroupMask(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxSetRdsGroupMask_nb(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxSetRdsSystem(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxSetRdsSystem_nb(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxSetRfDependentMuteMode(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxSetRfDependentMuteMode_nb(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxSetRssiThreshold(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxSetRssiThreshold_nb(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxSetVolume(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: int rxStopCompleteScan()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxStopCompleteScan_nb()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxStopSeek()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxStopSeek_nb()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean rxTune_nb(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean txChangeAudioSource(int,int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean txChangeDigitalSourceConfiguration(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean txDisable()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean txDisableRds()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean txEnable()>": [
        "ti.permission.FMRX",
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean txEnableRds()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: int txGetFMState()>": [
        "ti.permission.FMRX"
    ],
    "<com.ti.server.StubFmService: boolean txSetMonoStereoMode(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean txSetMuteMode(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean txSetPowerLevel(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean txSetPreEmphasisFilter(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean txSetRdsAfCode(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean txSetRdsECC(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean txSetRdsMusicSpeechFlag(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean txSetRdsPiCode(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean txSetRdsPsDisplayMode(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean txSetRdsPsScrollSpeed(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean txSetRdsPtyCode(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean txSetRdsTextPsMsg(java.lang.String)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean txSetRdsTextRepertoire(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean txSetRdsTextRtMsg(int,java.lang.String,int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean txSetRdsTrafficCodes(int,int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean txSetRdsTransmissionMode(int)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean txSetRdsTransmittedGroupsMask(long)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean txStartTransmission()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean txStopTransmission()>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean txTune(long)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<com.ti.server.StubFmService: boolean txWriteRdsRawData(java.lang.String)>": [
        "ti.permission.FMRX_ADMIN"
    ],
    "<android.accounts.AccountAuthenticatorActivity: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.accounts.AccountAuthenticatorActivity: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.accounts.AccountAuthenticatorActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.accounts.AccountAuthenticatorActivity: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.accounts.AccountAuthenticatorActivity: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.accounts.AccountAuthenticatorActivity: void unregisterReceiver(android.content.BroadcastReceiver)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>": [
        "android.permission.AUTHENTICATE_ACCOUNTS"
    ],
    "<android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)>": [
        "android.permission.GET_ACCOUNTS"
    ],
    "<android.accounts.AccountManager: void clearPassword(android.accounts.Account)>": [
        "android.permission.MANAGE_ACCOUNTS"
    ],
    "<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>": [
        "android.permission.GET_ACCOUNTS"
    ],
    "<android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)>": [
        "android.permission.GET_ACCOUNTS"
    ],
    "<android.accounts.AccountManager: java.lang.String getPassword(android.accounts.Account)>": [
        "android.permission.AUTHENTICATE_ACCOUNTS"
    ],
    "<android.accounts.AccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)>": [
        "android.permission.AUTHENTICATE_ACCOUNTS"
    ],
    "<android.accounts.AccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)>": [
        "android.permission.MANAGE_ACCOUNTS",
        "android.permission.USE_CREDENTIALS"
    ],
    "<android.accounts.AccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>": [
        "android.permission.AUTHENTICATE_ACCOUNTS"
    ],
    "<android.accounts.AccountManager: void removeOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.accounts.AccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>": [
        "android.permission.AUTHENTICATE_ACCOUNTS"
    ],
    "<android.accounts.AccountManager: void setPassword(android.accounts.Account,java.lang.String)>": [
        "android.permission.AUTHENTICATE_ACCOUNTS"
    ],
    "<android.accounts.AccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>": [
        "android.permission.AUTHENTICATE_ACCOUNTS"
    ],
    "<android.app.Activity: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.Activity: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.Activity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.Activity: void setRequestedOrientation(int)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.Activity: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.Activity: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.Activity: void unregisterReceiver(android.content.BroadcastReceiver)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.ActivityGroup: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.ActivityGroup: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.ActivityGroup: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.ActivityGroup: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.ActivityGroup: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.ActivityGroup: void unregisterReceiver(android.content.BroadcastReceiver)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.ActivityManager: java.util.List getRecentTasks(int,int)>": [
        "android.permission.GET_TASKS"
    ],
    "<android.app.ActivityManager: java.util.List getRunningTasks(int)>": [
        "android.permission.GET_TASKS"
    ],
    "<android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)>": [
        "android.permission.KILL_BACKGROUND_PROCESSES"
    ],
    "<android.app.ActivityManager: void moveTaskToFront(int,int)>": [
        "android.permission.REORDER_TASKS"
    ],
    "<android.app.ActivityManager: void moveTaskToFront(int,int,android.os.Bundle)>": [
        "android.permission.REORDER_TASKS"
    ],
    "<android.app.ActivityManager: void restartPackage(java.lang.String)>": [
        "android.permission.KILL_BACKGROUND_PROCESSES"
    ],
    "<android.app.AlarmManager: void setTimeZone(java.lang.String)>": [
        "android.permission.SET_TIME_ZONE"
    ],
    "<android.app.AliasActivity: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.AliasActivity: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.AliasActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.AliasActivity: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.AliasActivity: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.AliasActivity: void unregisterReceiver(android.content.BroadcastReceiver)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.Application: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.Application: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.Application: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.Application: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.Application: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.Application: void unregisterReceiver(android.content.BroadcastReceiver)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.ExpandableListActivity: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.ExpandableListActivity: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.ExpandableListActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.ExpandableListActivity: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.ExpandableListActivity: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.ExpandableListActivity: void unregisterReceiver(android.content.BroadcastReceiver)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.KeyguardManager$KeyguardLock: void disableKeyguard()>": [
        "android.permission.DISABLE_KEYGUARD"
    ],
    "<android.app.KeyguardManager$KeyguardLock: void reenableKeyguard()>": [
        "android.permission.DISABLE_KEYGUARD"
    ],
    "<android.app.KeyguardManager: void exitKeyguardSecurely(android.app.KeyguardManager$OnKeyguardExitResult)>": [
        "android.permission.DISABLE_KEYGUARD"
    ],
    "<android.app.ListActivity: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.ListActivity: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.ListActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.ListActivity: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.ListActivity: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.ListActivity: void unregisterReceiver(android.content.BroadcastReceiver)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.NativeActivity: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.NativeActivity: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.NativeActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.NativeActivity: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.NativeActivity: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.NativeActivity: void unregisterReceiver(android.content.BroadcastReceiver)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.TabActivity: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.TabActivity: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.TabActivity: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.TabActivity: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.TabActivity: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.TabActivity: void unregisterReceiver(android.content.BroadcastReceiver)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.WallpaperManager: void clear()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.WallpaperManager: void setBitmap(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.WallpaperManager: void setResource(int)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.WallpaperManager: void setStream(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.WallpaperManager: void suggestDesiredDimensions(int,int)>": [
        "android.permission.SET_WALLPAPER_HINTS"
    ],
    "<android.app.backup.BackupAgentHelper: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.backup.BackupAgentHelper: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.backup.BackupAgentHelper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.app.backup.BackupAgentHelper: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.backup.BackupAgentHelper: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.app.backup.BackupAgentHelper: void unregisterReceiver(android.content.BroadcastReceiver)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.bluetooth.BluetoothA2dp: void finalize()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothA2dp: java.util.List getConnectedDevices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothA2dp: int getConnectionState(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothA2dp: java.util.List getDevicesMatchingConnectionStates([int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothA2dp: boolean isA2dpPlaying(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: boolean cancelDiscovery()>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<android.bluetooth.BluetoothAdapter: void closeProfileProxy(int,android.bluetooth.BluetoothProfile)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: boolean disable()>": [
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<android.bluetooth.BluetoothAdapter: boolean enable()>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: java.util.Set getBondedDevices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: java.lang.String getName()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: int getProfileConnectionState(int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: boolean getProfileProxy(android.content.Context,android.bluetooth.BluetoothProfile$ServiceListener,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: int getScanMode()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: int getState()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: boolean isDiscovering()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: boolean isEnabled()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(java.lang.String,java.util.UUID)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: android.bluetooth.BluetoothServerSocket listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: boolean setName(java.lang.String)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<android.bluetooth.BluetoothAdapter: boolean startDiscovery()>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<android.bluetooth.BluetoothAdapter: boolean startLeScan([java.util.UUID,android.bluetooth.BluetoothAdapter$LeScanCallback)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: boolean startLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothAdapter: void stopLeScan(android.bluetooth.BluetoothAdapter$LeScanCallback)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothGatt connectGatt(android.content.Context,boolean,android.bluetooth.BluetoothGattCallback)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createInsecureRfcommSocketToServiceRecord(java.util.UUID)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothSocket createRfcommSocketToServiceRecord(java.util.UUID)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothDevice: boolean fetchUuidsWithSdp()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothDevice: android.bluetooth.BluetoothClass getBluetoothClass()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothDevice: int getBondState()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothDevice: java.lang.String getName()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothDevice: int getType()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothDevice: android.os.ParcelUuid[] getUuids()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGatt: void abortReliableWrite(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGatt: boolean beginReliableWrite()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGatt: void close()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGatt: boolean connect()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGatt: void disconnect()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGatt: boolean discoverServices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGatt: boolean executeReliableWrite()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGatt: boolean readCharacteristic(android.bluetooth.BluetoothGattCharacteristic)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGatt: boolean readDescriptor(android.bluetooth.BluetoothGattDescriptor)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGatt: boolean readRemoteRssi()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGatt: boolean setCharacteristicNotification(android.bluetooth.BluetoothGattCharacteristic,boolean)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGatt: boolean writeCharacteristic(android.bluetooth.BluetoothGattCharacteristic)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGatt: boolean writeDescriptor(android.bluetooth.BluetoothGattDescriptor)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGattServer: boolean addService(android.bluetooth.BluetoothGattService)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGattServer: void cancelConnection(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGattServer: void clearServices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGattServer: void close()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGattServer: boolean connect(android.bluetooth.BluetoothDevice,boolean)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGattServer: boolean notifyCharacteristicChanged(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothGattCharacteristic,boolean)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGattServer: boolean removeService(android.bluetooth.BluetoothGattService)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothGattServer: boolean sendResponse(android.bluetooth.BluetoothDevice,int,int,int,[byte)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothHeadset: java.util.List getConnectedDevices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothHeadset: int getConnectionState(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothHeadset: java.util.List getDevicesMatchingConnectionStates([int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothHeadset: boolean isAudioConnected(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothHeadset: boolean startVoiceRecognition(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<android.bluetooth.BluetoothHeadset: boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH",
        "android.permission.BLUETOOTH_ADMIN"
    ],
    "<android.bluetooth.BluetoothHealth: boolean connectChannelToSource(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothHealth: boolean disconnectChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothHealth: java.util.List getConnectedDevices()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothHealth: int getConnectionState(android.bluetooth.BluetoothDevice)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothHealth: java.util.List getDevicesMatchingConnectionStates([int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothHealth: android.os.ParcelFileDescriptor getMainChannelFd(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothHealth: boolean registerSinkAppConfiguration(java.lang.String,int,android.bluetooth.BluetoothHealthCallback)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothHealth: boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothManager: java.util.List getConnectedDevices(int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothManager: int getConnectionState(android.bluetooth.BluetoothDevice,int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothManager: java.util.List getDevicesMatchingConnectionStates(int,[int)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothManager: android.bluetooth.BluetoothGattServer openGattServer(android.content.Context,android.bluetooth.BluetoothGattServerCallback)>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.bluetooth.BluetoothSocket: void connect()>": [
        "android.permission.BLUETOOTH"
    ],
    "<android.content.ContextWrapper: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.content.ContextWrapper: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.content.ContextWrapper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.content.ContextWrapper: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.content.ContextWrapper: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.content.ContextWrapper: void unregisterReceiver(android.content.BroadcastReceiver)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.content.MutableContextWrapper: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.content.MutableContextWrapper: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.content.MutableContextWrapper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.content.MutableContextWrapper: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.content.MutableContextWrapper: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.content.MutableContextWrapper: void unregisterReceiver(android.content.BroadcastReceiver)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.inputmethodservice.InputMethodService: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.inputmethodservice.InputMethodService: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.inputmethodservice.InputMethodService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.inputmethodservice.InputMethodService: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.inputmethodservice.InputMethodService: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.inputmethodservice.InputMethodService: void unregisterReceiver(android.content.BroadcastReceiver)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)>": [
        "android.permission.ACCESS_MOCK_LOCATION"
    ],
    "<android.location.LocationManager: void clearTestProviderEnabled(java.lang.String)>": [
        "android.permission.ACCESS_MOCK_LOCATION"
    ],
    "<android.location.LocationManager: void clearTestProviderLocation(java.lang.String)>": [
        "android.permission.ACCESS_MOCK_LOCATION"
    ],
    "<android.location.LocationManager: void clearTestProviderStatus(java.lang.String)>": [
        "android.permission.ACCESS_MOCK_LOCATION"
    ],
    "<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: java.util.List getProviders(boolean)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: void removeProximityAlert(android.app.PendingIntent)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: void removeTestProvider(java.lang.String)>": [
        "android.permission.ACCESS_MOCK_LOCATION"
    ],
    "<android.location.LocationManager: void removeUpdates(android.app.PendingIntent)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.ACCESS_FINE_LOCATION",
        "android.permission.ACCESS_LOCATION_EXTRA_COMMANDS"
    ],
    "<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)>": [
        "android.permission.ACCESS_MOCK_LOCATION"
    ],
    "<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)>": [
        "android.permission.ACCESS_MOCK_LOCATION"
    ],
    "<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)>": [
        "android.permission.ACCESS_MOCK_LOCATION"
    ],
    "<android.media.AsyncPlayer: void play(android.content.Context,android.net.Uri,boolean,int)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.AsyncPlayer: void stop()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.AudioManager: void setBluetoothScoOn(boolean)>": [
        "android.permission.MODIFY_AUDIO_SETTINGS"
    ],
    "<android.media.AudioManager: void setMode(int)>": [
        "android.permission.BLUETOOTH",
        "android.permission.MODIFY_AUDIO_SETTINGS"
    ],
    "<android.media.AudioManager: void setSpeakerphoneOn(boolean)>": [
        "android.permission.MODIFY_AUDIO_SETTINGS"
    ],
    "<android.media.AudioManager: void startBluetoothSco()>": [
        "android.permission.MODIFY_AUDIO_SETTINGS"
    ],
    "<android.media.AudioManager: void stopBluetoothSco()>": [
        "android.permission.BLUETOOTH",
        "android.permission.MODIFY_AUDIO_SETTINGS"
    ],
    "<android.media.MediaPlayer: void pause()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.MediaPlayer: void release()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.MediaPlayer: void reset()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.MediaPlayer: void setWakeMode(android.content.Context,int)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.MediaPlayer: void start()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.MediaPlayer: void stop()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.Ringtone: void play()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.Ringtone: void setStreamType(int)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.Ringtone: void stop()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.RingtoneManager: android.media.Ringtone getRingtone(int)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.media.RingtoneManager: void stopPreviousRingtone()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.net.ConnectivityManager: int getNetworkPreference()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.net.ConnectivityManager: boolean isActiveNetworkMetered()>": [
        "android.permission.ACCESS_NETWORK_STATE"
    ],
    "<android.net.ConnectivityManager: boolean requestRouteToHost(int,int)>": [
        "android.permission.CHANGE_NETWORK_STATE"
    ],
    "<android.net.ConnectivityManager: void setNetworkPreference(int)>": [
        "android.permission.CHANGE_NETWORK_STATE"
    ],
    "<android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)>": [
        "android.permission.CHANGE_NETWORK_STATE"
    ],
    "<android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)>": [
        "android.permission.CHANGE_NETWORK_STATE"
    ],
    "<android.net.VpnService: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.net.VpnService: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.net.VpnService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.net.VpnService: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.net.VpnService: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.net.VpnService: void unregisterReceiver(android.content.BroadcastReceiver)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.net.sip.SipAudioCall: void close()>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.WAKE_LOCK"
    ],
    "<android.net.sip.SipAudioCall: void endCall()>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.WAKE_LOCK"
    ],
    "<android.net.sip.SipAudioCall: void setSpeakerMode(boolean)>": [
        "android.permission.MODIFY_AUDIO_SETTINGS"
    ],
    "<android.net.sip.SipAudioCall: void startAudio()>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.ACCESS_WIFI_STATE",
        "android.permission.WAKE_LOCK"
    ],
    "<android.net.sip.SipManager: void close(java.lang.String)>": [
        "android.permission.USE_SIP"
    ],
    "<android.net.sip.SipManager: android.net.sip.SipSession createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession$Listener)>": [
        "android.permission.USE_SIP"
    ],
    "<android.net.sip.SipManager: android.net.sip.SipSession getSessionFor(android.content.Intent)>": [
        "android.permission.USE_SIP"
    ],
    "<android.net.sip.SipManager: boolean isOpened(java.lang.String)>": [
        "android.permission.USE_SIP"
    ],
    "<android.net.sip.SipManager: boolean isRegistered(java.lang.String)>": [
        "android.permission.USE_SIP"
    ],
    "<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall$Listener,int)>": [
        "android.permission.USE_SIP"
    ],
    "<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(java.lang.String,java.lang.String,android.net.sip.SipAudioCall$Listener,int)>": [
        "android.permission.USE_SIP"
    ],
    "<android.net.sip.SipManager: void open(android.net.sip.SipProfile)>": [
        "android.permission.USE_SIP"
    ],
    "<android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)>": [
        "android.permission.USE_SIP"
    ],
    "<android.net.sip.SipManager: void register(android.net.sip.SipProfile,int,android.net.sip.SipRegistrationListener)>": [
        "android.permission.USE_SIP"
    ],
    "<android.net.sip.SipManager: void setRegistrationListener(java.lang.String,android.net.sip.SipRegistrationListener)>": [
        "android.permission.USE_SIP"
    ],
    "<android.net.sip.SipManager: android.net.sip.SipAudioCall takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall$Listener)>": [
        "android.permission.USE_SIP"
    ],
    "<android.net.sip.SipManager: void unregister(android.net.sip.SipProfile,android.net.sip.SipRegistrationListener)>": [
        "android.permission.USE_SIP"
    ],
    "<android.net.wifi.WifiManager$MulticastLock: void acquire()>": [
        "android.permission.CHANGE_WIFI_MULTICAST_STATE"
    ],
    "<android.net.wifi.WifiManager$MulticastLock: void release()>": [
        "android.permission.CHANGE_WIFI_MULTICAST_STATE"
    ],
    "<android.net.wifi.WifiManager$WifiLock: void acquire()>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.WAKE_LOCK"
    ],
    "<android.net.wifi.WifiManager$WifiLock: void release()>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.WAKE_LOCK"
    ],
    "<android.net.wifi.WifiManager: int addNetwork(android.net.wifi.WifiConfiguration)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean disableNetwork(int)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean disconnect()>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: android.net.DhcpInfo getDhcpInfo()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: java.util.List getScanResults()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: int getWifiState()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean isScanAlwaysAvailable()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean isWifiEnabled()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean pingSupplicant()>": [
        "android.permission.ACCESS_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean reassociate()>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean reconnect()>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean removeNetwork(int)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean saveConfiguration()>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)>": [
        "android.permission.ACCESS_NETWORK_STATE",
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: boolean startScan()>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<android.net.wifi.WifiManager: int updateNetwork(android.net.wifi.WifiConfiguration)>": [
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<android.net.wifi.p2p.WifiP2pManager: android.net.wifi.p2p.WifiP2pManager$Channel initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager$ChannelListener)>": [
        "android.permission.ACCESS_WIFI_STATE",
        "android.permission.CHANGE_WIFI_STATE"
    ],
    "<android.nfc.NfcAdapter: void disableForegroundDispatch(android.app.Activity)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.NfcAdapter: void disableForegroundNdefPush(android.app.Activity)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.NfcAdapter: void enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,[android.content.IntentFilter,[[java.lang.String)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.NfcAdapter: void enableForegroundNdefPush(android.app.Activity,android.nfc.NdefMessage)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.NfcAdapter: void setBeamPushUris([android.net.Uri,android.app.Activity)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.NfcAdapter: void setBeamPushUrisCallback(android.nfc.NfcAdapter$CreateBeamUrisCallback,android.app.Activity)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.NfcAdapter: void setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,[android.app.Activity)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.NfcAdapter: void setNdefPushMessageCallback(android.nfc.NfcAdapter$CreateNdefMessageCallback,android.app.Activity,[android.app.Activity)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.NfcAdapter: void setOnNdefPushCompleteCallback(android.nfc.NfcAdapter$OnNdefPushCompleteCallback,android.app.Activity,[android.app.Activity)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.BasicTagTechnology: void close()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.BasicTagTechnology: void connect()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.IsoDep: void close()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.IsoDep: void connect()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.IsoDep: int getTimeout()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.IsoDep: void setTimeout(int)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.IsoDep: B[] transceive([byte)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.MifareClassic: boolean authenticateSectorWithKeyA(int,[byte)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.MifareClassic: boolean authenticateSectorWithKeyB(int,[byte)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.MifareClassic: void close()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.MifareClassic: void connect()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.MifareClassic: void decrement(int,int)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.MifareClassic: int getTimeout()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.MifareClassic: void increment(int,int)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.MifareClassic: B[] readBlock(int)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.MifareClassic: void restore(int)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.MifareClassic: void setTimeout(int)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.MifareClassic: B[] transceive([byte)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.MifareClassic: void transfer(int)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.MifareClassic: void writeBlock(int,[byte)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.MifareUltralight: void close()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.MifareUltralight: void connect()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.MifareUltralight: int getTimeout()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.MifareUltralight: B[] readPages(int)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.MifareUltralight: void setTimeout(int)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.MifareUltralight: B[] transceive([byte)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.MifareUltralight: void writePage(int,[byte)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.Ndef: void close()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.Ndef: void connect()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.Ndef: android.nfc.NdefMessage getNdefMessage()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.Ndef: boolean makeReadOnly()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.Ndef: void writeNdefMessage(android.nfc.NdefMessage)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.NdefFormatable: void close()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.NdefFormatable: void connect()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.NdefFormatable: void format(android.nfc.NdefMessage)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.NdefFormatable: void formatReadOnly(android.nfc.NdefMessage)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.NfcA: void close()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.NfcA: void connect()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.NfcA: int getTimeout()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.NfcA: void setTimeout(int)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.NfcA: B[] transceive([byte)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.NfcB: void close()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.NfcB: void connect()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.NfcB: B[] transceive([byte)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.NfcBarcode: void close()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.NfcBarcode: void connect()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.NfcF: void close()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.NfcF: void connect()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.NfcF: int getTimeout()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.NfcF: void setTimeout(int)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.NfcF: B[] transceive([byte)>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.NfcV: void close()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.NfcV: void connect()>": [
        "android.permission.NFC"
    ],
    "<android.nfc.tech.NfcV: B[] transceive([byte)>": [
        "android.permission.NFC"
    ],
    "<android.os.PowerManager$WakeLock: void acquire()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.os.PowerManager$WakeLock: void acquire(long)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.os.PowerManager$WakeLock: void release()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.os.PowerManager$WakeLock: void setWorkSource(android.os.WorkSource)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.os.SystemVibrator: void cancel()>": [
        "android.permission.VIBRATE"
    ],
    "<android.os.SystemVibrator: void vibrate([long,int)>": [
        "android.permission.VIBRATE"
    ],
    "<android.os.SystemVibrator: void vibrate(int,java.lang.String,[long,int)>": [
        "android.permission.VIBRATE"
    ],
    "<android.os.SystemVibrator: void vibrate(int,java.lang.String,long)>": [
        "android.permission.VIBRATE"
    ],
    "<android.os.SystemVibrator: void vibrate(long)>": [
        "android.permission.VIBRATE"
    ],
    "<android.service.dreams.DreamService: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.service.dreams.DreamService: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.service.dreams.DreamService: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.service.dreams.DreamService: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.service.dreams.DreamService: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.service.dreams.DreamService: void unregisterReceiver(android.content.BroadcastReceiver)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,[byte,android.app.PendingIntent,android.app.PendingIntent)>": [
        "android.permission.SEND_SMS"
    ],
    "<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>": [
        "android.permission.SEND_SMS"
    ],
    "<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>": [
        "android.permission.SEND_SMS"
    ],
    "<android.telephony.TelephonyManager: java.util.List getAllCellInfo()>": [
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>": [
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.telephony.TelephonyManager: java.lang.String getDeviceId()>": [
        "android.permission.READ_PHONE_STATE"
    ],
    "<android.telephony.TelephonyManager: java.lang.String getDeviceSoftwareVersion()>": [
        "android.permission.READ_PHONE_STATE"
    ],
    "<android.telephony.TelephonyManager: java.lang.String getGroupIdLevel1()>": [
        "android.permission.READ_PHONE_STATE"
    ],
    "<android.telephony.TelephonyManager: java.lang.String getLine1Number()>": [
        "android.permission.READ_PHONE_STATE"
    ],
    "<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()>": [
        "android.permission.ACCESS_FINE_LOCATION"
    ],
    "<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>": [
        "android.permission.READ_PHONE_STATE"
    ],
    "<android.telephony.TelephonyManager: java.lang.String getSubscriberId()>": [
        "android.permission.READ_PHONE_STATE"
    ],
    "<android.telephony.TelephonyManager: java.lang.String getVoiceMailAlphaTag()>": [
        "android.permission.READ_PHONE_STATE"
    ],
    "<android.telephony.TelephonyManager: java.lang.String getVoiceMailNumber()>": [
        "android.permission.READ_PHONE_STATE"
    ],
    "<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>": [
        "android.permission.ACCESS_COARSE_LOCATION",
        "android.permission.READ_PHONE_STATE"
    ],
    "<android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,[byte,android.app.PendingIntent,android.app.PendingIntent)>": [
        "android.permission.SEND_SMS"
    ],
    "<android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>": [
        "android.permission.SEND_SMS"
    ],
    "<android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>": [
        "android.permission.SEND_SMS"
    ],
    "<android.test.IsolatedContext: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.test.IsolatedContext: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.test.IsolatedContext: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.test.IsolatedContext: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.test.IsolatedContext: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.test.IsolatedContext: void unregisterReceiver(android.content.BroadcastReceiver)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.test.RenamingDelegatingContext: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.test.RenamingDelegatingContext: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.test.RenamingDelegatingContext: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.test.RenamingDelegatingContext: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.test.RenamingDelegatingContext: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.test.RenamingDelegatingContext: void unregisterReceiver(android.content.BroadcastReceiver)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.test.mock.MockApplication: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.test.mock.MockApplication: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.test.mock.MockApplication: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.test.mock.MockApplication: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.test.mock.MockApplication: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.test.mock.MockApplication: void unregisterReceiver(android.content.BroadcastReceiver)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.view.ContextThemeWrapper: void clearWallpaper()>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.view.ContextThemeWrapper: void removeStickyBroadcast(android.content.Intent)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.view.ContextThemeWrapper: void removeStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.view.ContextThemeWrapper: void setWallpaper(android.graphics.Bitmap)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.view.ContextThemeWrapper: void setWallpaper(java.io.InputStream)>": [
        "android.permission.SET_WALLPAPER"
    ],
    "<android.view.ContextThemeWrapper: void unregisterReceiver(android.content.BroadcastReceiver)>": [
        "android.permission.BROADCAST_STICKY"
    ],
    "<android.widget.VideoView: int getAudioSessionId()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.widget.VideoView: boolean onKeyDown(int,android.view.KeyEvent)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.widget.VideoView: void pause()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.widget.VideoView: void resume()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.widget.VideoView: void setVideoPath(java.lang.String)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.widget.VideoView: void setVideoURI(android.net.Uri)>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.widget.VideoView: void start()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.widget.VideoView: void stopPlayback()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.widget.VideoView: void suspend()>": [
        "android.permission.WAKE_LOCK"
    ],
    "<android.widget.ZoomButtonsController: void setVisible(boolean)>": [
        "android.permission.BROADCAST_STICKY"
    ]
}